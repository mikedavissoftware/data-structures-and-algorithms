window.COURSE_DATA = {"language":"en","lastDownload":"2023-02-21T23:26:39-05:00","title":"Data Structures and Algorithms","modules":[{"id":49385,"name":"Welcome","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gfd21366aa1170e91ad6ce11c3e3419ee","items":[{"id":484157,"title":"Welcome to Technical Interview Preparation","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"welcome-to-technical-interview-prep\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-to-technical-interview-prep\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-to-technical-interview-prep/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain the technical interview process\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\u003cem\u003ePlease note that completion of this content is not required for graduation or\nmoving to the next Phase. It is optional. Please prioritize the required\ncoursework.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eIn addition to preparing a portfolio of awesome projects to show off to your\nfuture employer, you'll also need to be prepared for technical interviews. In\nthis part of the course, we'll help you prepare by asking you to solve a series\nof problems on algorithms and/or data structures. You may find some problems\neasy and others incredibly difficult. Don't worry - this is normal. It takes\ntime to get used to solving these types of problems.\u003c/p\u003e\n\n\u003cp\u003eBefore we get into how to approach progressing through this section, let's talk\nabout the two types of technical interviews.\u003c/p\u003e\n\n\u003ch2\u003eTwo Types of Technical Interviews\u003c/h2\u003e\n\n\u003cp\u003eYour technical interview may be held asynchronously or synchronously. During an\nasynchronous technical interview, you may be asked to solve algorithmic problems\nin a timed environment by yourself. For a synchronous interview, you will likely\nbe asked to whiteboard and solve the problem in front of your interviewer.\u003c/p\u003e\n\n\u003cp\u003eAsync technical interviews typically require candidates to problem solve alone.\nOnce the solution is submitted, the hiring team will review your solution and\ndetermine whether you should move forward in the hiring process. At this point,\nthey'll likely require that most or all problems be solved and will also\nconsider the quality of the solution/s.\u003c/p\u003e\n\n\u003cp\u003eDuring synchronous interviews, the interviewer is likely looking to see how you:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWork in a team\u003c/li\u003e\n\u003cli\u003eHandle feedback\u003c/li\u003e\n\u003cli\u003eTalk technically\u003c/li\u003e\n\u003cli\u003eHandle obstacles\u003c/li\u003e\n\u003cli\u003eApproach solving a problem / think\u003c/li\u003e\n\u003cli\u003eEvaluate different approaches to solving a problem and make decisions\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAt this stage, you may be able to move forward in the hiring process if you\ndemonstrate good communication skills, logical thinking, perseverance, calm\nunder pressure, and graciousness towards your interviewer's feedback even if you\nare unable to solve the problem. Asking good questions to fully understand the\nproblem or get unstuck are normally welcome. Interviewers also typically expect\nyou to come up with your own test cases to ensure the problem is actually\nsolved. This portion of the interview might require you to largely solve the\nproblem alone on a whiteboard or IDE, or through pair programming where the\ninterviewer is either the driver or navigator. Many interviewers are forgiving\nof syntax errors, and they generally don't expect you to have every piece of the\ncore language memorized.\u003c/p\u003e\n\n\u003cp\u003eDuring this portion of the course, we will be preparing you for both types of\ninterviews, so it's important to take the time to solve as many problems as you\ncan alone and to complete the paired assignments, if applicable.\u003c/p\u003e\n\n\u003ch2\u003eHow to Progress Through This Section\u003c/h2\u003e\n\n\u003cp\u003eWe recommend approaching these problems in order by yourself since each problem\nincreases in difficulty. For a problem that is meant to be solved on the same\nday, work on it for 30 minutes. If you can't solve it in 30 minutes, work on\nsomething else, and then come back to it and give yourself up to 30 more\nminutes. For problems that are meant to be solved over the course of several\ndays, set aside 30 to 60 minutes each day to work on them. If you reach the time\nlimit and have not solved the problem, look at our solution or someone else's\nand take time to understand why it works. Some days, due to your workload, you\nmay need to set a shorter time limit; we recommend a minimum of 20 minutes\ntotal.\u003c/p\u003e\n\n\u003cp\u003eIf you fall behind, e.g. you didn't solve Week 1 Day 2's problem on time, keep\nin mind that we usually have bonus problems and spare time available in Week 3\nof any Phase. You can always use this time to catch up on problems you missed.\nDon't worry if you don't finish all of the problems before the next Phase, you\ncan always come back to them when you have time or even after graduation.\u003c/p\u003e\n\n\u003cp\u003eFor any type of problem, if you were able to pass most of the test cases but\njust can't quite solve a couple of the edge cases, consider looking for a\nsolution to compare yours to. If we provide a solution, you can compare it to\nours, but you can also ask other students and search the Internet. Take the time\nto understand why the solutions work and consider working on your solution until\nit works given what you've learned.\u003c/p\u003e\n\n\u003ch2\u003eSome Things to Keep in Mind\u003c/h2\u003e\n\n\u003cp\u003eYou may struggle with some or many of these problems. Be patient with yourself\nand trust that with time and practice, you'll improve. You'll be amazed at how\nmuch you progress with each week or month!\u003c/p\u003e\n\n\u003cp\u003eIf you look at others' solutions, be aware that shorter doesn't mean better. Aim\nfor a solution that makes sense to you, which you can also explain to others.\nThree lines of easy-to-understand code is better than one line of confusing\ncode.\u003c/p\u003e\n\n\u003cp\u003eIf you use an online platform that provides information on how fast your code\nruns or how well it utilizes memory, take that information with a giant grain of\nsalt. Many of those platforms do not tell you how they arrive at those results,\nand you may find that the results vary greatly even when running the same code.\nYou might also find that someone with a similar solution to yours has wildly\ndifferent performance results - an indication that the platform isn't\ncalculating results correctly.\u003c/p\u003e\n\n\u003cp\u003eLastly, try not to compare yourself to others at this point. Everyone progresses\nat a different pace, and that's OK. The key is to keep trying while taking care\nof yourself mentally and physically.\u003c/p\u003e","exportId":"welcome-to-technical-interview-preparation"},{"id":484159,"title":"Algorithmic Problem Solving","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"algorithmic-problem-solving\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/algorithmic-problem-solving\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/algorithmic-problem-solving/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDevelop a process for solving algorithm problems\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eAn algorithm is just a procedure that solves a problem. If you're wondering if\nthat's any different from the work you've already been doing, we've got good\nnews: It's not!\u003c/p\u003e\n\n\u003cp\u003eIn this reading, we'll go over the importance of solving such problems and how\nto approach coming up with solutions.\u003c/p\u003e\n\n\u003ch2\u003eWhy Solve Algorithm Problems?\u003c/h2\u003e\n\n\u003cp\u003eWorking through these challenges will not only help you during the technical\ninterview process, it will also help you become a better programmer. Learning\nhow to break apart a problem into pieces you can understand and then code a\nsolution for is a vital skill, as is learning to think about the different types\nof inputs - or test cases - your solution must account for.\u003c/p\u003e\n\n\u003cp\u003eAs you grow as a developer, you'll find yourself leaning on these skills more\nand more, especially as your work becomes more challenging. These skills will\ntruly help you in any and every project you take on.\u003c/p\u003e\n\n\u003ch2\u003eHow to Solve a Problem\u003c/h2\u003e\n\n\u003cp\u003eTwo mistakes many programmers make are to jump into code too fast or to start\nthinking about code optimization too early. Both of these mistakes can greatly\nincrease the amount of time it takes to solve a problem and increase\nfrustration. To avoid this, here are the steps we recommend taking:\u003c/p\u003e\n\n\u003ch3\u003e1. Spend Time Understanding the Problem\u003c/h3\u003e\n\n\u003cp\u003eBefore you dive into solving the problem, take the time to read it and describe\nit in your own words. You might find it useful to rewrite the problem before\nmoving on.\u003c/p\u003e\n\n\u003cp\u003eIf you have been given test cases, look at each one, apply your understanding of\nthe problem to them to determine what the answer is, and then check if your\nanswer matches the actual answer (e.g. work it out on paper or in your head, no\ncode necessary here). If your answer doesn't match, you need to spend more time\nunderstanding the problem.\u003c/p\u003e\n\n\u003ch3\u003e2. Write Your Own Test Cases\u003c/h3\u003e\n\n\u003cp\u003eNow that you understand the problem and why the answers to the test cases are\nwhat they are, you're ready to write your own test cases! We are not\nrecommending that you write test suites in Rspec or Jest. Instead, you simply\nprint the result of calling your solution method and compare it to the answer\nyou expected.\u003c/p\u003e\n\n\u003cp\u003eBe aware that algorithm problem descriptions rarely provide all of the test\ncases you need to account for, so it's incredibly important that you also come\nup with your own. This is true when using online platforms, such as Leetcode and\nHackerRank, as well as during interviews.\u003c/p\u003e\n\n\u003ch3\u003e3. Pseudocode\u003c/h3\u003e\n\n\u003cp\u003eRemember how we asked you to check your understanding of the problem by going\nthrough the test cases and then writing your own tests? Congratulations! This\nmeans that on some level, you know how to solve the problem. Before you start\ncoding, write pseudocode, which is just a plain description of how to solve the\nproblem. For example, the pseudocode for copying only numbers from one array to\nanother might look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003einitialize empty array called result\n\niterate over each item in the input array:\n  if element is a number:\n    push item onto result\n\nreturn result\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that different people write pseudocode differently. The key is to make it\neasy to understand yourself and explain to others - this is the map to the code\nyou're about to write! I often paste my pseudocode into my workspace as\ncomments, and then code each piece alongside the matching comment.\u003c/p\u003e\n\n\u003cp\u003eYou can also test this procedure against the test cases before writing any code.\nValidating and rewriting pseudocode will likely save you time. You might also\nwish to think about additional solutions: there's always more than one way to\nsolve a problem.\u003c/p\u003e\n\n\u003ch3\u003e4. Code!\u003c/h3\u003e\n\n\u003cp\u003eNow that you have a map, convert it to code!\u003c/p\u003e\n\n\u003cp\u003eAt this point, the goal is to make it work: pass those test cases! If you're\nhaving a hard time getting all of the test cases working, check that your\npseudocode actually solves for all of those cases and then check that your code\ndoes what the pseudocode says it should.\u003c/p\u003e\n\n\u003ch3\u003e5. Make It Clean and Readable\u003c/h3\u003e\n\n\u003cp\u003eOnce your solution is well, a solution, it's time to refactor your code so that\nit's easy to read, not just for you but also for others. Use well-named\nvariables and convert blocks of code to methods when necessary. If you find any\nunneeded or redundant code, delete it.\u003c/p\u003e\n\n\u003cp\u003eDon't forget to test your code again!\u003c/p\u003e\n\n\u003ch3\u003e6. Optimize?\u003c/h3\u003e\n\n\u003cp\u003eDon't optimize your code for time or space complexity (e.g. how long it takes to\nrun or how much memory it's using) unless you absolutely need to. There are\nthree major situations that call for optimization:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe solution is hanging on certain test cases, and therefore cannot pass since\nit's taking too long\u003c/li\u003e\n\u003cli\u003eYou were asked to do so\u003c/li\u003e\n\u003cli\u003eYou think it would be fun to try\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe hope these steps help you solve the problems you're about to encounter.\nRemember, they can be applied to all types of problems, including building web\napps. Don't be afraid to spend more time thinking and planning than coding. Take\nit from those of us who have been coding for years: we often spend more time\nthinking, talking, and writing than we do coding.\u003c/p\u003e\n\n\u003cp\u003eBefore we go, we'd like to leave you with some final tips:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eTalk to yourself while you code: think out loud\u003c/li\u003e\n\u003cli\u003eConsider recording your screen and voice as you solve a problem so you can\nreview your performance\u003c/li\u003e\n\u003cli\u003eTake your time and be patient with yourself!\u003c/li\u003e\n\u003c/ul\u003e","exportId":"algorithmic-problem-solving"},{"id":484161,"title":"A Note on Testing","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"note-on-testing\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/note-on-testing\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/note-on-testing/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse tests to understand your algorithm and discover test cases\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eWhen To Run Tests\u003c/h2\u003e\n\n\u003cp\u003eIf we have made a test suite available for a problem, please refrain from\nlooking at or running those tests until you have:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ePassed the tests given in the README\u003c/li\u003e\n\u003cli\u003ePassed the tests you wrote yourself\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis will give you a chance to think through the problem and write your own test\ncases, which is a skill you'll need when interviewing.\u003c/p\u003e\n\n\u003cp\u003eIn some interview settings, you won't have tests provided to confirm that your\nalgorithm meets the specifications. It's left to you and your conversation with\nthe interviewer to uncover potential edge cases that your algorithm may need to\ncover, and to find ways to verify your work on your own.\u003c/p\u003e\n\n\u003cp\u003eAfter you run our tests, you might notice that you missed some test cases: this\nis a good thing - it's a chance for you to learn and grow as a programmer. You\nwon't always think of all of the necessary test cases, but as time goes by,\nyou'll get better and better at thinking of all of the possible inputs that need\nto be solved for before a solution can be considered complete.\u003c/p\u003e","exportId":"a-note-on-testing"},{"id":484162,"title":"Problem-Solving Tips","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"problem-solving-tips\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/problem-solving-tips\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/problem-solving-tips/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDevelop a set of questions to ask yourself when stuck on a problem\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eHow to Solve Problems and Get Unstuck\u003c/h2\u003e\n\n\u003cp\u003eIf you’re stuck, ask yourself these questions to see if they help you get unstuck:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHave I solved a similar problem before? How can I use that knowledge to solve\nthis one?\u003c/li\u003e\n\u003cli\u003eCan I break this problem down into smaller problems that are easier to solve?\u003c/li\u003e\n\u003cli\u003eWould it help to draw a picture or diagram of the problem?\u003c/li\u003e\n\u003cli\u003eWhich inputs might this method receive? Do my test cases cover the edge cases?\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eShould I draw a table that maps inputs to outputs? Your test cases will then\nmirror that table! The process of drawing the table might also reveal a\npattern, which you can then use to solve the problem.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eExample table for a problem where an Array of distinct values must be returned:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eInput\u003c/th\u003e\n\u003cth\u003eOutput\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e[1, 2, 2, 3]\u003c/td\u003e\n\u003ctd\u003e[1, 2, 3]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e[]\u003c/td\u003e\n\u003ctd\u003e[]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e[4]\u003c/td\u003e\n\u003ctd\u003e[4]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e[3, 2, 2, 10, 2, 7]\u003c/td\u003e\n\u003ctd\u003e[3, 2, 10, 7]\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDo I really understand the problem? You can prove this to yourself by solving\nit on paper without thinking about code.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCan I talk to someone about this and explain my thinking?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSometimes the act of talking to someone even if they don’t say anything\nhelps you get unstuck. It forces you to explain the problem in more\nunderstandable language.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhat information is available to me in this problem? What additional\ninformation can I derive?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you have experience writing or deriving mathematical equations, this is a\nsimilar process: list which variables and mathematical operations are\navailable and then the additional information that can be derived from that.\u003c/li\u003e\n\u003cli\u003eIf you have experience creating artwork, this is similar to the process of\nunderstanding what tools you have available to you and how you can use them,\ne.g. what colors are in my palette and how can I mix them? Or I have a\nstring, tape, and a pencil, and I need to draw a circle - how do I do that?\u003c/li\u003e\n\u003cli\u003eExample: For a problem where an Array of distinct values must be returned,\nsome of the information available includes: the Array itself, each element\nin the Array, its length, and the index of each item. You can find a list of\nArray operations available by looking at the documentation.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCan or should I create additional data to help me solve the problem? What do I\nneed to keep track of for my solution to work?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eConsider adding variables and ask yourself which data structures are\nrequired and how they might help.\u003c/li\u003e\n\u003cli\u003eExample: For a problem where an Array of distinct values must be returned,\nyou might think about using an additional Array or a Hash (aka POJO/Object\nin JavaScript or Dictionary in Python) or a Set.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHave I taken care of myself today? Do I need to eat? Am I hydrated? Am I\nrested? Do I need to move my body?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou’ll be surprised how much better your brain works after eating a good\nmeal, drinking water, resting and/or exercising! Don’t let yourself get\n\u003ca href=\"https://www.merriam-webster.com/dictionary/hangry\"\u003ehangry\u003c/a\u003e!\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"problem-solving-tips"}]},{"id":49388,"name":"Week 1: Starter Algorithms","status":"unlocked","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g272014ca3c086f12046ce513d74d1279","items":[{"id":484165,"title":"Day 1: Reverse a String","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"reverse-string\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/reverse-string/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/reverse-string\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/reverse-string/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFor this task, you'll need to write a method that reverses a string. Your method\nwill receive one argument, a string, and be expected to output that string with\nits letters in reverse order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: \"hi\"\nOutput: \"ih\"\n\nInput: \"catbaby\"\nOutput: \"ybabtac\"\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eDo not call any type of built-in reverse method!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003ePlease solve the problem using iteration.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g887ec7d570de2d11348bbd705dae4278"},{"id":484167,"title":"Self-Assessment","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","exportId":"g6c4af0047738afcf836626a081558676"},{"id":484169,"title":"Day 2: Find First Duplicate","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"find-first-duplicate\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/find-first-duplicate/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-first-duplicate\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-first-duplicate/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven an Array, find the first duplicate value that occurs. If there are no\nduplicates, return -1.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [2, 1, 3, 3, 2]\nOutput: 3\n\nInput: [1, 2, 3, 4]\nOutput: -1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g21837b52a9675e5431216e96cb8a7bdb"},{"id":484171,"title":"Self-Assessment","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","exportId":"g8b929fd339351cc23992f7ab06b8cf24"},{"id":484173,"title":"Day 3: Fibonacci Series","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fibonacci-series\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fibonacci-series/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fibonacci-series\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fibonacci-series/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFind the nth element in the Fibonacci series. The Fibonacci sequence starts with\na 0 followed by a 1. After that, every value is the sum of the two values\npreceding it. Here are the first seven values as an example: 0, 1, 1, 2, 3, 5, 8.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: 0\nOutput: 0\n\nInput: 2\nOutput: 1\n\nInput: 10\nOutput: 55\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that we are using zero-indexing for the series.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g4786f50ff1de5919027a599a58d2b2c8"},{"id":484176,"title":"Self-Assessment","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","exportId":"g216a380cafd203e6976ecdbd9604b07c"},{"id":484177,"title":"Day 4: Selection Sort","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"selection-sort\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/selection-sort/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/selection-sort\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/selection-sort/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eSort an Array of numbers using selection sort. The selection sort algorithm\nsorts an array by repeatedly finding the minimum element (lowest value) in the\ninput Array, and then putting it at the correct location in the sorted Array.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [3, -1, 5, 2]\nOutput: [-1, 2, 3, 5]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou ARE allowed to use a built-in array method to find the minimum value—you need \nnot recreate it algorithmically. Feel free to try it out for an extra challenge, \nthough.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch3\u003eBenchmarking\u003c/h3\u003e\n\n\u003cp\u003eFor this task, we are also asking you to calculate the average runtime of your\nsolution. In other words, you run it a bunch of times and then divide the total\ntime it took for the solution to run by the number of times it ran.\u003c/p\u003e\n\n\u003cp\u003eHere is the pseudocode for creating your own basic benchmarking procedure:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003estore the current time in a variable called start time\n\nloop 1000 times:\n  execute the method using a small input, e.g. three items if input is an Array\n  execute the method using a larger input, e.g. 100 items if input is an Array\n\naverage runtime = (current time - start time) / 2000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe have provided you with the long input to use for benchmarking.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"ge7142ccce56f55dfc82cb9f1eecadc6c"},{"id":484179,"title":"Self-Assessment","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","exportId":"g25672e25ecd6e0ad94a1f3077ee63178"},{"id":484181,"title":"Day 5: Find Shortest String","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"find-shortest-string\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/find-shortest-string/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-shortest-string\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-shortest-string/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven an Array of strings, return the shortest string. If there is more than one\nstring of that length, return the string that comes first in the list. The Array\nwill have a minimum length of 1.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: ['aaa', 'a', 'bb', 'ccc']\nOutput: 'a'\n\nInput: ['cat', 'hi', 'dog', 'an']\nOutput: 'hi'\n\nInput: ['flower', 'juniper', 'lily', 'dandelion']\nOutput: 'lily'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch3\u003eBenchmarking\u003c/h3\u003e\n\n\u003cp\u003eFor this task, we are also asking you to calculate the average runtime of your\nsolution. In other words, you run it a bunch of times and then divide the total\ntime it took for the solution to run by the number of times it ran.\u003c/p\u003e\n\n\u003cp\u003eHere is the pseudocode for creating your own basic benchmarking procedure:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003estore the current time in a variable called start time\n\nloop 1000 times:\n  execute the method using a small input, e.g. three items if input is an Array\n  execute the method using a larger input, e.g. 100 items if input is an Array\n\naverage runtime = (current time - start time) / 2000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"geacceb9fb5610204bdf8bf3f92ce6613"},{"id":484183,"title":"Self-Assessment","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","exportId":"g9d977edf49928bb417862a9bf372d739"}]},{"id":49390,"name":"Phase 1 Pairing Exercises","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g02daa54f27262740f6c644c4de7f0b66","items":[]},{"id":49391,"name":"Week 2: Recursion","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g616e5df3fc16acd9fb0dc2303e786496","items":[{"id":484191,"title":"Introduction to Recursion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"introduction-to-recursion\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/introduction-to-recursion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/introduction-to-recursion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite recursive methods\u003c/li\u003e\n\u003cli\u003eDefine the \"base case\" of a recursive method\u003c/li\u003e\n\u003cli\u003eExplain the role of the call stack in a recursive method\u003c/li\u003e\n\u003cli\u003eIdentify when to use recursion to solve algorithm problems\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eA recursive method is defined as any method that calls itself.\u003c/p\u003e\n\n\u003cp\u003eTypically, recursion is used in a manner similar to a loop: a procedure is run\nover and over again until it reaches a stopping point. Recursive methods must\ncall themselves to be considered recursive.\u003c/p\u003e\n\n\u003cp\u003eWe can use recursion anywhere we use a loop, and vice versa. Sometimes, it's a\nlot easier to solve a problem using recursion, as opposed to a loop, and\nsometimes it's easier to use a loop. It takes time and practice to figure out\nwhen to choose one over the other.\u003c/p\u003e\n\n\u003cp\u003eHere is an example of a recursive method:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the above code, the method \u003ccode\u003etalk_to_myself\u003c/code\u003e is recursive because it calls\nitself. It, however, has a gigantic problem: there is no stopping point!\u003c/p\u003e\n\n\u003ch2\u003eBase Case/s (aka the stopping point/s)\u003c/h2\u003e\n\n\u003cp\u003eThe base case (or cases) tells the recursive method when to stop running. Base\ncases are often written using conditional statements (such as the \u003ccode\u003eif\u003c/code\u003e statement\nbelow), though they don't have to be (it depends on the method and what it needs\nto do).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice how the base case comes \u003cstrong\u003ebefore\u003c/strong\u003e the recursive call to the method. If\nthe base case came after, it would be unreachable and we'd have the same exact\nproblem as before: there would be no stopping point, and we'd hit a stack\noverflow.\u003c/p\u003e\n\n\u003ch2\u003eStack Overflow\u003c/h2\u003e\n\n\u003cp\u003eWhen we run a \u003ccode\u003ewhile\u003c/code\u003e loop where the terminating condition is never reached, we\nget an infinite loop. A stack overflow is similar. However, code that would\neventually terminate can also cause a stack overflow if it adds too many\n\u003cstrong\u003eframes\u003c/strong\u003e to the \u003cstrong\u003ecall stack\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003eframe\u003c/strong\u003e is like a snapshot of all of the variables and other necessary\ninformation required to finish running the process.\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003ecall stack\u003c/strong\u003e is a data structure that stores frames.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFrames are removed from the stack in last-in-first-out (LIFO) order, similar to\nhow we eat a stack of pancakes (the last pancake is put on the stack last, and\nwe eat that one first).\u003c/p\u003e\n\n\u003cp\u003eHere's a gif demonstrating how function calls are added and removed from the stack:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/intro-to-recursion/call-stack.gif\" alt=\"call stack demo\"\u003e\u003c/p\u003e\n\n\u003cp\u003eCalling a function adds it to the top of the call stack. When the function\nfinishes running (either because of an explicit or implicit return), it is\nremoved from the top of the stack. All the other functions below the top of the\nstack can't continue running until they make their way up to the top.\u003c/p\u003e\n\n\u003cp\u003eThis is why it's important that all recursive functions have a base case defined\nwith some condition that causes the function to return. Otherwise, we'll\ncontinually add more function calls to the stack with no way to stop!\u003c/p\u003e\n\n\u003ch2\u003eDepth-First Completion (LIFO)\u003c/h2\u003e\n\n\u003cp\u003eWith recursive methods, the last recursive call will complete its execution\nfirst. Once that completes, the second to last recursive call will complete, and\nso on until only the first call to the method remains. Let's go back to our\n\u003ccode\u003etalk_to_myself\u003c/code\u003e method and illustrate each frame:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003eInitial Call (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(4)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eRecursive Call 1 (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(2)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eRecursive Call 2 (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(1)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eRecursive Call 3 (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(0.5)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e=\u0026gt; Base case is hit because n \u0026lt;= 0.5, no more recursion!\u003c/li\u003e\n\u003cli\u003eRecursive Call 3 completes\u003c/li\u003e\n\u003cli\u003eRecursive Call 2 completes\u003c/li\u003e\n\u003cli\u003eRecursive Call 1 completes\u003c/li\u003e\n\u003cli\u003eInitial Call completes\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can walk through and visualize this process \u003ca href=\"https://pythontutor.com/visualize.html#code=def%20talk_to_myself%28n%29%0A%20%20return%20if%20n%20%3C%3D%200.5%0A%0A%20%20talk_to_myself%28n%20/%202%29%0Aend%0A%0Atalk_to_myself%284%29\u0026amp;cumulative=false\u0026amp;curInstr=0\u0026amp;heapPrimitives=nevernest\u0026amp;mode=display\u0026amp;origin=opt-frontend.js\u0026amp;py=ruby\u0026amp;rawInputLstJSON=%5B%5D\u0026amp;textReferences=false\"\u003ehere\u003c/a\u003e. The\nframes and their data are visualized on the right side of the screen and the\narrows on the left inside the IDE show you which line is being executed. Notice\nthat the arrow pauses on the recursive call if the base case is not hit. When a\nrecursive call finally completes execution and returns up the stack, the\nprevious call will then continue to run from that line onward (the line where\nthe recursion was triggered).\u003c/p\u003e\n\n\u003ch2\u003eDealing With Return Values\u003c/h2\u003e\n\n\u003cp\u003eLet's go back to our code example and modify it to return the string \u003ccode\u003e'done'\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e'done'\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# this is where our method pauses\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# it's also where our return values return to\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat one small change will cause the method to return the string \u003ccode\u003e'done'\u003c/code\u003e from\nevery recursive call and the initial call. But how?\u003c/p\u003e\n\n\u003cp\u003eLet's illustrate how using stack frames again:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eInitial Call (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(1)\u003c/code\u003e # pauses on the line of the recursive call\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eRecursive Call 1 (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(0.5)\u003c/code\u003e # pauses on the line of the recursive call\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e=\u0026gt; Base case is hit because \u003ccode\u003en \u0026lt;= 0.5\u003c/code\u003e, no more recursion! \u003ccode\u003e'done'\u003c/code\u003e is\nreturned to the previous frame\u003c/li\u003e\n\u003cli\u003eRecursive Call 1 receives \u003ccode\u003e'done'\u003c/code\u003e, and then returns \u003ccode\u003e'done'\u003c/code\u003e up the stack\u003c/li\u003e\n\u003cli\u003eInitial Call receives \u003ccode\u003e'done'\u003c/code\u003e, and then returns \u003ccode\u003e'done'\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBut what if we added a line of code after the recursive call? What would happen\nthen?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e'done'\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# this is where our method pauses\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# it's also where our return values return to\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"sb\"\u003e`'The sheep goes baaaaaahhhh'`\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003eInitial Call (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(1)\u003c/code\u003e # pauses on the line of the recursive call\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eRecursive Call 1 (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(0.5)\u003c/code\u003e # pauses on the line of the recursive call\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e=\u0026gt; Base case is hit because n \u0026lt;= 0.5, no more recursion! \u003ccode\u003e'done'\u003c/code\u003e is returned to\nthe previous frame\u003c/li\u003e\n\u003cli\u003eRecursive Call 1 receives \u003ccode\u003e'done'\u003c/code\u003e and returns \u003ccode\u003e'The sheep goes baaaaaahhhh'\u003c/code\u003e up\nthe stack\u003c/li\u003e\n\u003cli\u003eInitial Call receives \u003ccode\u003e'The sheep goes baaaaaahhhh'\u003c/code\u003e, and then returns\n\u003ccode\u003e'The sheep goes baaaaaahhhh'\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can see a visualization of the code \u003ca href=\"https://pythontutor.com/visualize.html#code=def%20talk_to_myself%28n%29%0A%20%20return%20'done'%20if%20n%20%3C%3D%200.5%0A%0A%20%20%23%20this%20is%20where%20our%20method%20pauses%0A%20%20%23%20it's%20also%20where%20our%20return%20values%20return%20to%0A%20%20talk_to_myself%28n%20/%202%29%0A%20%20%60'The%20sheep%20goes%20baaaaaahhhh'%60%0Aend%0A%0Atalk_to_myself%281%29\u0026amp;cumulative=false\u0026amp;curInstr=0\u0026amp;heapPrimitives=nevernest\u0026amp;mode=display\u0026amp;origin=opt-frontend.js\u0026amp;py=ruby\u0026amp;rawInputLstJSON=%5B%5D\u0026amp;textReferences=false\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eDon't worry if this hasn't all sunk in yet. We'll get you started slowly. If you\nfind yourself having trouble with recursion, ask yourself these questions:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat is/are the base case/s? Many people add those first.\u003c/li\u003e\n\u003cli\u003eIf you're getting a stack overflow: Why isn't my base case being triggered?\u003c/li\u003e\n\u003cli\u003eWhat should the recursive call return? And how should I use that value?\n\n\u003cul\u003e\n\u003cli\u003eRemember the return value goes up the stack to the line where the recursive\ncall was made.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eWhat should the method return once it has completed execution?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can also try drawing out the frames to trace what's happening or use this\n\u003ca href=\"http://pythontutor.com/visualize.html#mode=edit\"\u003etool\u003c/a\u003e. Start small when\nmapping out what's happening, e.g. in the code examples above we used the values\n2 or 4, but never 20!\u003c/p\u003e","exportId":"introduction-to-recursion"},{"id":484192,"title":"Day 1: Recursive Counting","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"recursive-count\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/recursive-count/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/recursive-count\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/recursive-count/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e\u003cstrong\u003eFork and then clone me!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's ease into recursion. For this challenge, we'd like you to convert the following while loop that counts to a recursive method that counts. We've included while loops for Ruby and JS below. Your method is successful if it prints numbers 0-9. Remember: it must call itself!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you get a stack overflow, just breathe. We all get them - the trick is to get used to them and carry on solving the problem.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some languages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding:\u003c/h2\u003e\n\n\u003cp\u003eYou may wish to optionally write pseudocode and an explanation of your solution for this problem.\u003c/p\u003e\n\n\u003cp\u003eFeel free to run our tests whenever you like.\u003c/p\u003e\n\n\u003ch2\u003eHow to run your code\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gb6c38b468c3468830b270708f90a320d"},{"id":484194,"title":"Self-Assessment","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","exportId":"g7c75b4ae14e51da9e79164ba57f989c9"},{"id":484196,"title":"Day 2: Recursive Search","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"recursive-search\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/recursive-search/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/recursive-search\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/recursive-search/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithm problems using recursion\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven an Array of values, use recursion to find the target value. Return \u003ccode\u003etrue\u003c/code\u003e\nif found, otherwise \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [1, 2, 3], 2\nOutput: true\n\nInput: [3, 2, 1], 4\nOutput: false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSometimes it can help to solve the problem iteratively first, and then convert\nthat to the recursive version. Here are two possible iterative solutions: one in\nRuby and one in JS.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eiterative_search\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eiterativeSearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere are many ways to solve this problem. We suggest starting with the \u003cstrong\u003ebase\ncases\u003c/strong\u003e. What are they?\u003c/p\u003e\n\n\u003cp\u003eFeeling stuck? Have a hint! Do you need to pass the \u003cem\u003ewhole\u003c/em\u003e array with every\nrecursive call, or just \u003cem\u003epart\u003c/em\u003e of it?\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g4de3b12725fb1ea0f75f7332de691136"},{"id":484198,"title":"Self-Assessment","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","exportId":"g459e346f2e7204f2bfd8d28cf153a830"},{"id":484200,"title":"Day 3: Recursive Fibonacci Series","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fibonacci-recursive\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fibonacci-recursive/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fibonacci-recursive\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fibonacci-recursive/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithm problems using recursion\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFind the nth element in the Fibonacci series. The Fibonacci sequence starts with\na 0 followed by a 1. After that, every value is the sum of the two values\npreceding it. Here are the first seven values as an example: 0, 1, 1, 2, 3, 5, 8.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: 0\nOutput: 0\n\nInput: 2\nOutput: 1\n\nInput: 10\nOutput: 55\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you solved this problem before iteratively, you may wish to convert that\nsolution to a recursive version. Here are two iterative solutions - one in Ruby\nand one in JS:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003evalues\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003etimes\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evalues\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elast\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eStuck? Here are some hints:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCode the base cases first.\u003c/li\u003e\n\u003cli\u003eYou may wish to look up how the fibonacci sequence is expressed as a formula.\u003c/li\u003e\n\u003cli\u003eStart small. What needs to happen if \u003ccode\u003en\u003c/code\u003e is 1 or \u003ccode\u003en\u003c/code\u003e is 2?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gd03b0559d382621f3966e7380a2fa39e"},{"id":484202,"title":"Self-Assessment","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","exportId":"gc837e80101032012dd830f30d5bde8fc"},{"id":484204,"title":"Day 4: Recursive Find Shortest String","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"find-shortest-string-recursive\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/find-shortest-string-recursive/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-shortest-string-recursive\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-shortest-string-recursive/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithm problems using recursion\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven an array of strings, return the shortest string. If there is more than one\nstring of that length, return the string that comes first in the list. The array\nwill have a minimum length of 1.\u003c/p\u003e\n\n\u003cp\u003eOnce you're done solving the problem, calculate the average run time and compare\nit to the average run time for the iterative version.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: ['aaa', 'a', 'bb', 'ccc']\nOutput: 'a'\n\nInput: ['cat', 'hi', 'dog', 'an']\nOutput: 'hi'\n\nInput: ['flower', 'juniper', 'lily', 'dandelion']\nOutput: 'lily'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou may wish to convert your iterative solution to a recursive one. We've\nincluded our old solutions in Ruby and JavaScript below:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efind_shortest_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ereduce\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elength\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eshortest\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindShortestString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eshortest\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g04a2a6aaeb0419ab5f3eeab7eb1981d0"},{"id":484206,"title":"Self-Assessment","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","exportId":"gfbcfe47f6448a70b784344970b2c3d2b"},{"id":484207,"title":"Day 5: Recursive Selection Sort","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"selection-sort-recursive\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/selection-sort-recursive/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/selection-sort-recursive\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/selection-sort-recursive/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithm problems using recursion\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eSort an array of numbers using selection sort. The selection sort algorithm\nsorts an array by repeatedly finding the minimum element (lowest value) in the\ninput array, and then putting it at the correct location in the sorted array.\u003c/p\u003e\n\n\u003cp\u003eOnce you're done solving the problem, calculate the average run time and compare\nit to the average run time for the iterative version.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [3, -1, 5, 2]\nOutput: [-1, 2, 3, 5]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou may wish to convert your iterative solution to a recursive one. We've\nincluded our old solutions in Ruby and JavaScript below:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eselection_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003esorted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003euntil\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n    \u003cspan class=\"n\"\u003emin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emin\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eidx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esorted\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edelete_at\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eidx\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003esorted\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eselectionSort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(...\u003c/span\u003e\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eidx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eindexOf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eidx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g924d240bf70f92dd24fb4f72285f885e"}]},{"id":49394,"name":"Week 3: Additional Practice","status":"unlocked","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"ge11310d6b554df4afdfa37c552b8a7a5","items":[{"id":484210,"title":"Bonus 1: Balancing Parentheses","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"balancing-parentheses\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/balancing-parentheses/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/balancing-parentheses\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/balancing-parentheses/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFor parentheses to be considered balanced, there must an opening parenthesis\nfollowed by a matching closing parenthesis. Given a string containing only\nparentheses, return the number of additional parentheses needed for the string\nto be considered balanced. The input string will have a minimum length of 1.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: '(()())'\nOutput: 0\n\nInput: '()))'\nOutput: 2\n\nInput: ')'\nOutput: 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gd627626029a605dc3c535cf91cf9240a"},{"id":484212,"title":"Bonus 2: Roman Numeral to Integer","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"roman-numeral-to-integer\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/roman-numeral-to-integer/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/roman-numeral-to-integer\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/roman-numeral-to-integer/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eConvert the provided Roman numeral (a String) to an Integer. For more\ninformation on Roman numerals, please go to\n\u003ca href=\"https://www.mathsisfun.com/roman-numerals.html\"\u003eMath Is Fun\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe String input will always consist of uppercase letters with a minimum length\nof 1. We will only be covering numbers below 4000, so you can safely ignore the\n\"Really Big Numbers\" section on the Math is Fun page we linked to.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: 'I'\nOutput: 1\n\nInput: 'IX'\nOutput: 9\n\nInput: 'CDII'\nOutput: 402\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gb37a47f898667f852997345e5295be15"},{"id":484214,"title":"Bonus 3: Rotate Array Clockwise","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rotate-array-clockwise\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rotate-array-clockwise/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rotate-array-clockwise\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rotate-array-clockwise/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven an input Array, rotate \u003ccode\u003ek\u003c/code\u003e units clockwise, i.e. shift the values\nrightward \u003ccode\u003ek\u003c/code\u003e units.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ek\u003c/code\u003e is an integer that is greater than or equal to 0.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [1, 2, 3, 4], 1\nOutput: [4, 1, 2, 3]\n\nInput: [1, 2, 3], 2\nOutput: [2, 3, 1]\n\nInput: [1, 2, 3], 3\nOutput: [1, 2, 3]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"ga84de738c1b3c12adadbe67376e0060d"},{"id":484216,"title":"Bonus 4: Distinct Pair Sum","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"distinct-pair-sum\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/distinct-pair-sum/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/distinct-pair-sum\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/distinct-pair-sum/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven an input array and a target value \u003ccode\u003ek\u003c/code\u003e, return all distinct pairs of\n\u003cstrong\u003econsecutive numbers\u003c/strong\u003e that add up to \u003ccode\u003ek\u003c/code\u003e. A pair is distinct if no other pair\ncontains the same numbers.\u003c/p\u003e\n\n\u003cp\u003eThe order of the pairs and order of the values in each pair does not matter,\ne.g. we consider \u003ccode\u003e[[2, 8], [7, 3]]\u003c/code\u003e to be the same as \u003ccode\u003e[[3, 7], [8, 2]]\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [0, 1, 1, 2, 0, 1, 1], 2\nOutput: [[1, 1], [2, 0]]\n\nInput: [3, 4, 2, 1, 5, 2, 8, 2], 10\nOutput: [[2, 8]]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gaf7c78bdc8f6ef8463786a6fbe6d643e"},{"id":484217,"title":"Bonus 5: Consecutive Substrings","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"consecutive-substrings\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/consecutive-substrings/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/consecutive-substrings\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/consecutive-substrings/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven a string, return all consecutive substrings within that string consisting\nof at least one character. Substrings should be returned in the order in which\nthey appear.\u003c/p\u003e\n\n\u003cp\u003eNote than in the string \u003ccode\u003e'abc'\u003c/code\u003e, \u003ccode\u003e'ac'\u003c/code\u003e is not a consecutive substring.\u003c/p\u003e\n\n\u003cp\u003eThe input string will have a length of 0 or more.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: 'abc'\nOutput: ['a', 'ab', 'abc', 'b', 'bc', 'c']\n\nInput: 'a'\nOutput: ['a']\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gda91a8140529158aa03b199220990642"}]},{"id":49397,"name":"Week 4: Big O Notation","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g597c07898bc686a510f2c80efed9f3d4","items":[{"id":484219,"title":"Day 1: Introduction to Big O Notation","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"intro-to-big-o\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-big-o\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-big-o/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine Big O notation\u003c/li\u003e\n\u003cli\u003eCalculate time and space complexity using Big O notation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's say we were trying to solve a problem and we weren't sure which solution\nto choose. We might think about which solution is easier to code or understand,\nbut we could also think about which solution runs faster. That last case is\nwhere Big O notation (calculating time complexity) comes in!\u003c/p\u003e\n\n\u003ch2\u003eWhat is Big O Notation?\u003c/h2\u003e\n\n\u003cp\u003eBig O notation describes the amount of time it takes for a procedure to run\nrelative to its input. For example, if the input is a string of one character:\nhow long will it take? If the input is 1,000 characters, how long then?\u003c/p\u003e\n\n\u003cp\u003eIt describes the runtime abstractly in terms of the input size and the number of\noperations that will occur, rather than milliseconds or other units of time.\nSpecifically, it describes the way in which the runtime grows as the input\ngrows. Here are some examples of what Big O notation looks like: O(n), O(1),\nO(n\u003csup\u003e2\u003c/sup\u003e). We'll get into what this means in a moment. For now, know that\nn refers to the size of the input or the input itself, e.g. the length of a\nstring or an array or a value itself, such as an integer.\u003c/p\u003e\n\n\u003ch2\u003eCalculate for the Worst Case\u003c/h2\u003e\n\n\u003cp\u003eBefore we get technical, let's use going to the grocery store as an analogy for\ncalculating time complexity.\u003c/p\u003e\n\n\u003ch3\u003eGrocery Store\u003c/h3\u003e\n\n\u003cp\u003eSo we're at the store looking for chocolate chips. The best case is that we walk\nin, and BAM, those chocolate chips are right there in front of us. The worst\ncase is that we end up walking up and down every single aisle, until finally we\nfind them. That last case is what we're interested in, and we could then\ndescribe our chocolate chip search in terms of the number of aisles in the\ngrocery store: O(aisles), because our search time grows as the number of aisles\ngrows. In other words, the amount of time it takes to find chocolatey morsels of\ngoodness depends on the number of aisles in the store.\u003c/p\u003e\n\n\u003cp\u003eIf there were 5 aisles, we could say O(5), but what if the grocery store added\nor removed aisles? We'd have to update our notation to the new value, e.g.\nO(20). This is why it's better to say O(aisles): it covers any number of aisles.\u003c/p\u003e\n\n\u003ch3\u003eFinding an Element in an Array\u003c/h3\u003e\n\n\u003cp\u003eLet's say we have an unsorted array of elements and our function needs to find\nand return a specific element. That element could be at the 0th index or it\ncould be at the last index or not in there at all, so we iterate over the array\nuntil we find it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction findElement(arr, target):\n  iterate over arr:\n    if element == target:\n      return true\n\n  return false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe're interested in the worst case, which is when the element is not in the\narray. In that case we must iterate over the entire array before returning\nfalse. We can refer to the number of elements as n, which means Big O for this\nfunction is O(n). The time it takes to run directly relates to the array's\nlength.\u003c/p\u003e\n\n\u003ch2\u003eCalculate for the Weakest Link\u003c/h2\u003e\n\n\u003cp\u003eBig O does not concern itself with every little detail in a procedure. Instead,\nit cares most about the part of the procedure that will take the longest. In\nother words, we find the part that will take the longest (the weakest link) and\ncalculate Big O for that part.\u003c/p\u003e\n\n\u003ch3\u003eGrocery Store\u003c/h3\u003e\n\n\u003cp\u003eLet's think back to our chocolate chip hunt. We discussed walking the aisles to\nsearch for those sweet nuggets, but we didn't talk about going to the store or\nwalking home. Let's pretend we live one minute away from the store, so walking\nthere always takes one minute. The time it takes to walk the aisles, on the\nother hand, depends on where the chocolate chips are. We don't need to concern\nourselves with the time it takes to walk because it's not the weakest link: it's\nalways the same amount of time. Walking the aisles is the weakest link because\nit has the potential to take up the most time.\u003c/p\u003e\n\n\u003ch3\u003eFinding a Duplicate Element in an Array\u003c/h3\u003e\n\n\u003cp\u003eLet's say we need to check if there's a duplicate of the 0th element in an array\nelsewhere in that same array. Our algorithm might look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction findDuplicate(arr):\n  zeroth_element = arr[0]\n\n  iterate over arr starting at index 1:\n    if element == zeroth_element:\n      return true\n\n  return false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe need not concern ourselves with the time it takes to grab the 0th element or\nreturn true or false - those tasks always take the same amount of time, and\ntherefore, are not the weakest link. The weakest link is the iteration over the\narray, which depends on the length of the array, so it has the potential to take\nup the most time. If the array is one element long: great, it'll be super fast.\nBut if it contains one million elements, that's going to take some time. Since\nthe amount of time directly correlates with the length of the array (which we\ncall n), Big O for this algorithm is O(n).\u003c/p\u003e\n\n\u003ch2\u003eDrop the Coefficients\u003c/h2\u003e\n\n\u003cp\u003eWhen calculating time complexity, we don't concern ourselves with coefficients\n(the numbers that come before variables in mathematics, e.g. 2n or 5x). Let's\nlook at a pseudocode example to see what this might look like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction find_lowest_and_highest(arr):\n  result = []\n  result \u0026lt;\u0026lt; iterate and find minimum in arr\n  result \u0026lt;\u0026lt; iterate and find maximum in arr\n\n  return result\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis code actually has two weakest links: iterating to find the maximum value\nand iterating to find the minimum value. Both of those procedures have a time\ncomplexity of O(n), since the minimum or maximum values could be at the end of\nthe array in the worst case. We could say that the time complexity of\nfind_lowest_and_highest is 2O(n), since the weakest link runs twice. However,\nBig O simply does not care about that, so we drop the coefficients and declare\nthat this function runs in O(n) time.\u003c/p\u003e\n\n\u003ch2\u003eCommon Time Complexities\u003c/h2\u003e\n\n\u003cp\u003eIt's a lot easier to calculate Big O if you know how the most common runtimes\nare defined. Please note that we aren't listing all of the possibilities here.\u003c/p\u003e\n\n\u003ch3\u003eConstant Time: O(1)\u003c/h3\u003e\n\n\u003cp\u003eConstant time is the best time! Algorithms or procedures that run in O(1) time\ntake the same amount of time to run regardless of the size of the input (like\nwalking to the store to get chocolate chips). Some examples of constant time\nprocedures include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMathematical operations, such as adding or subtracting numbers\u003c/li\u003e\n\u003cli\u003eAccessing an element in an array at a specific index, e.g. array[2]\u003c/li\u003e\n\u003cli\u003eAccessing a value in a Hash (Object in JS, Dictionary in Python) using a key\u003c/li\u003e\n\u003cli\u003eReturning a value\u003c/li\u003e\n\u003cli\u003ePrinting a value (e.g. to the console or command line)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAs an example, it doesn't matter if you're accessing the 2nd or 1,000th element\nin an array when you're accessing it by its index number - it'll take the same\namount of time either way!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction find_by_index(arr, index):\n  print arr[index]\n  return arr[index]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eLinear Time: O(n)\u003c/h3\u003e\n\n\u003cp\u003eLinear time is also good. The runtime for algorithms that run in O(n) time is\nproportional to the size of the input, e.g. 1 x input size or 3 x input size.\nEarlier we mentioned that finding an item in an array takes O(n) time because\nthe item could be at the very end or not in there at all, which means we must\niterate over the length of the array in the worst case. Some examples of linear\ntime procedures include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIterating over an array, e.g. to find a target value\u003c/li\u003e\n\u003cli\u003eIterating over a string\u003c/li\u003e\n\u003cli\u003ePrinting each character or element of an array or string, respectively, one by\none\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction say_hi_to_everyone(names):\n  iterate over names:\n    print \"hi \" + name\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eQuadratic Time: O(n\u003csup\u003e2\u003c/sup\u003e)\u003c/h3\u003e\n\n\u003cp\u003eQuadratic time is not good, but sometimes unavoidable. The runtime is defined as\nthe square of the input's size. For example, if we had a quadratic time\nalgorithm that took an array as an input: for an input of length 1, there would\nbe 1 operation, but for an input of length 10, there would be 100 operations.\nSome examples of algorithms that take quadratic time include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eBubble sort\u003c/li\u003e\n\u003cli\u003eSelection sort\u003c/li\u003e\n\u003cli\u003eInsertion sort\u003c/li\u003e\n\u003cli\u003eSome algorithms that contain a loop nested in another loop\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction nested_loop_quadratic_time(arr):\n  iterate over arr:\n    iterate over arr:\n      perform some operation\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the above example, the outer loop iterates over the entire input array. For\neach element in the input array, it then iterates over the entire array again.\nFor an array of length 2, there are 2 * 2 (or 4) operations, but for an array\nof length 10, there are 10 * 10 (or 100) operations.\u003c/p\u003e\n\n\u003ch3\u003eLogarithmic Time: O(log n)\u003c/h3\u003e\n\n\u003cp\u003eLogarithmic time is fantastic! It's not quite as good as constant time, but it\nis faster than linear time. If an algorithm runs in O(log n) time, time\nincreases linearly while the input increases exponentially. Let's pretend we\nhave some operation that takes 1 second to handle an input containing 10\nelements. When the input has 100 elements, that operation will take 2 seconds,\nand 1,000 elements will take 3 seconds! That's fast!\u003c/p\u003e\n\n\u003cp\u003eAn algorithm may be logarithmic if:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe weakest link always runs less than n times\u003c/li\u003e\n\u003cli\u003eEach time the input is operated upon, the size of the input is divided by some\nnumber\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAn example of an O(log n) algorithm is:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eBinary search\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction useless_log_n_loop(arr):\n  n = length of arr\n\n  while n \u0026gt; 0:\n    print arr[n]\n    n = n / 2\n    round down n to nearest integer\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eGraph of Common Time Complexities\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/Big-O-graph.png\" alt=\"Image of Big O Graph with Time vs Input\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eNeed to Know\u003c/h2\u003e\n\n\u003cp\u003eWhen we calculate Big O for a procedure, there are some runtimes we just need to\nknow (or look up). For example, it's important to know the runtime for accessing\nan element in an array or accessing a value in a Hash (aka Object or\nDictionary). Take some time to review this\n\u003ca href=\"https://www.bigocheatsheet.com/\"\u003eresource\u003c/a\u003e (bookmark it!), which includes the\nbest, average, and worst case time complexity for common operations and\nalgorithms. For now, the most important data structures to pay attention to are\narrays and hash tables.\u003c/p\u003e\n\n\u003ch2\u003eNote on Recursion\u003c/h2\u003e\n\n\u003cp\u003eWhen calculating Big O for recursive functions, we compare the total stack\nframes over time to the size of the input.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction count(stop_count, count = 0):\n  if count \u0026gt;= stop_count:\n    return 'done'\n\n  return count(stop_count, count + 1)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFor the above function the total number of frames added to the stack over time\nis directly proportional to the \u003ccode\u003estop_count\u003c/code\u003e, so Big O is O(n).\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCalculating Big O for a procedure can help you decide between several solutions\nor improve a solution you've already thought of. It takes time and practice to\nget used to Big O notation. In the coming days, we'll be asking you to calculate\nthe time complexity for problems you've already solved. We'll also show you our\nown calculations to help you along.\u003c/p\u003e","exportId":"day-1-introduction-to-big-o-notation"},{"id":484221,"title":"Day 1: Time Complexity Quiz","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"g628a2f865f155c1a98cea44fe1000627","questionCount":3,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":3.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eUse this short quiz to check your understanding of time complexity. If you don't know the answer to a question, select I don't know.\u003c/p\u003e","exportId":"gdc862cc100da18e92fb8c7142c10bb5a"},{"id":484223,"title":"Day 2: Introduction to Space Complexity","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"intro-to-space-complexity\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-space-complexity\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-space-complexity/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCalculate space complexity using Big O notation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSpace complexity measures how much working memory an algorithm requires.\nSpecifically it measures how the space requirements grow as the input grows.\nSound familiar? If this reminds you of time complexity, you're correct! We use\nthe same Big O notation to describe how much space a procedure needs in the\nworst case.\u003c/p\u003e\n\n\u003cp\u003eJust like time complexity, we calculate space complexity when we're considering\ncompeting solutions or when we have specific space requirements we must meet. In\ngame development, for example, engineers are often allocated upper limits for\nhow much space each process may use, such as running the audio engine or\nrendering certain types of effects.\u003c/p\u003e\n\n\u003cp\u003eIf you're still struggling with the concept of time complexity, you might want\nto take 15 minutes to research Big O and get more comfortable with it before\nmoving forward. Here are two resources you might wish to read:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.interviewcake.com/article/java/big-o-notation-time-and-space-complexity\"\u003eInterview Cake: Big O Notation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/\"\u003eRob Bell: A Beginner's Guide to Big O Notation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eRefresher\u003c/h2\u003e\n\n\u003cp\u003eThe important things to remember when calculating time complexity are the same\nfor space complexity:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCalculate for the worst case\u003c/li\u003e\n\u003cli\u003eFocus on the weakest link (the part that will take up the most space)\u003c/li\u003e\n\u003cli\u003eIgnore the other details\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eCommon Notations\u003c/h3\u003e\n\n\u003cp\u003eHere are some of the commonly used Big O values, though there are more, in order\nfrom most desirable to least desirable:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eConstant O(1): The amount of space required never changes, regardless of the\ninput\u003c/li\u003e\n\u003cli\u003eLogarithmic O(log n): As the size of the input increases exponentially, the\namount of space required grows linearly\u003c/li\u003e\n\u003cli\u003eLinear O(n): The amount of space required is equal to the size of the input\u003c/li\u003e\n\u003cli\u003eQuadratic O(n\u003csup\u003e2\u003c/sup\u003e): The amount of space required is the square of the\ninput\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCalculating Space Complexity\u003c/h2\u003e\n\n\u003cp\u003eWhen we calculate space complexity, we consider the size of the input as well as\nthe extra space we're allocating for the algorithm to complete successfully.\nLet's take a look at some examples to see what this means.\u003c/p\u003e\n\n\u003ch3\u003eConstant Space O(1)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction add(x, y):\n  return x + y\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis function adds two numbers and returns the result. The inputs will be\nintegers, and the return value will also be an integer. It doesn't matter what\nthose integers are, the space requirements will always be the same for any given\ninputs.\u003c/p\u003e\n\n\u003ch3\u003eLogarithmic Space O(log n)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e/* for sorted arrays only */\n\nfunction binary_search(array, target):\n  if array is empty:\n    return false\n\n  middle = array[array length / 2]\n\n  if middle == target:\n    return true\n\n  if middle \u0026lt; target:\n    return binary_search(left half of array)\n  else:\n    return binary_search(right half of array)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe function above is recursive and requires logarithmic space: as the input\nsize grows exponentially, the space required grows linearly.\u003c/p\u003e\n\n\u003cp\u003eEach time it recurses it cuts the input array in half. If you recall from the\ntime complexity reading, an algorithm \u003cem\u003emight\u003c/em\u003e take O(log n) runtime if the input\nis consistently being divided. The same is true for space complexity.\u003c/p\u003e\n\n\u003cp\u003eSince the above method is recursive, we can think of the space in terms of the\nnumber of stack frames required for any input. If the target value isn't in the\ninput array, the number of frames will be as follows:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eInput Length\u003c/th\u003e\n\u003cth\u003eFrames\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e10\u003c/td\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003ch3\u003eLinear Space O(n)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction sum_array(array):\n  sum = 0\n\n  iterate over array:\n    sum = sum + array element\n\n  return sum\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis procedure stores an integer variable and requires an input array to run. If\nwe were to code this fully using a \u003ccode\u003efor\u003c/code\u003e or \u003ccode\u003ewhile\u003c/code\u003e loop, we'd also have to\nstore another variable for the iteration (the one commonly known as \u003ccode\u003ei\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eThe integer variables, such as \u003ccode\u003esum\u003c/code\u003e and \u003ccode\u003ei\u003c/code\u003e would require constant space, since\nthey'll only ever store a single integer each. The input array, however, will\nhave varying space requirements because its length is not fixed. The function\ncould be called with an array that's empty or contains 1,000 elements.\nTherefore, this procedure requires O(n) space: the input array is the weakest\nlink!\u003c/p\u003e\n\n\u003ch3\u003eQuadratic Space O(n\u003csup\u003e2\u003c/sup\u003e)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e/* a really useless function */\n\nfunction quadratic_recurse(num):\n  total_times = num * num\n\n  function recurse(count):\n    if count == total_times:\n      return\n\n    recurse(count + 1)\n\n  recurse(0)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis function is recursive and requires quadratic space. Once again, we can\nthink of the required space in terms of total stack frames. If the input number\nis 1, 1 stack frame is required. If the input is 2, 4 stack frames, and if the\ninput is 4, 16 stack frames are required.\u003c/p\u003e\n\n\u003ch2\u003eRecursive Gotcha\u003c/h2\u003e\n\n\u003cp\u003eWhen thinking about the space complexity of a recursive function, we need to\nconsider how deep the recursion will go in the worst case. In other words, we\naren't interested in the total number of stack frames over time, but rather, the\ndeepest depth or the largest number of frames that will be on the stack at any\ngiven time. Keep in mind that the stack grows and shrinks as recursive calls are\nmade and then begin returning. A recursive call increases the stack, while\nhitting a return statement reduces its size.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction big_sum(array):\n  total = 0\n\n  function add(count):\n    if count == array length:\n      return\n\n    iterate over each element in array:\n      total = total + element\n      add(count + 1)\n\n  add(0)\n  return total\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe above function adds array length number of frames to the stack for every\nelement in the input array. Let's say the input array is \u003ccode\u003e[1, 2]\u003c/code\u003e. \u003ccode\u003eadd\u003c/code\u003e will\nrecurse with a \u003ccode\u003ecount\u003c/code\u003e of 1, and will then recurse again with a \u003ccode\u003ecount\u003c/code\u003e of 2, so\ntwo frames are on the stack. At this point the \u003ccode\u003ecount\u003c/code\u003e equals the array length,\nso the frame will be popped from the stack, reducing its size. As it turns out,\nthe largest number of frames on the stack (or the deepest depth), equals O(n) -\ni.e. the length fo the input array - for this function.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe can use Big O notation to represent the space complexity of an algorithm,\nsimilar to how we use it for time complexity. To calculate the space complexity,\nwe must consider all of the data required for the algorithm to run. We can then\npinpoint the weakest link with the worst case in mind and use that to determine\nBig O. And don't forget, we have to consider how much space the input requires!\u003c/p\u003e\n\n\u003ch2\u003eFurther Resources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.baeldung.com/cs/space-complexity\"\u003eUnderstanding Space Complexity\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.studytonight.com/data-structures/space-complexity-of-algorithms#\"\u003eSpace Complexity of Algorithms\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"day-2-introduction-to-space-complexity"},{"id":484225,"title":"Day 2: Space Complexity Quiz","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"g4f73176dce6a0ec3e86cc8d96ca60199","questionCount":3,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":3.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eUse this short quiz to check your understanding of space complexity. If you don't know the answer to a question, select I don't know.\u003c/p\u003e","exportId":"g6a3c9dbb187c10c791bf72038e6d0456"},{"id":484226,"title":"Day 3: Work Out Big O Quiz Part 1","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"g8d101a71781fa12452ecc9137ee6153c","questionCount":2,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":2.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eUse this quiz to check your understanding of time and space complexity. If you don't know the answer to a question, select I don't know.\u003c/p\u003e","exportId":"gce960cab1c254c2bd7283d14414675db"},{"id":484229,"title":"Day 4: Work Out Big O Quiz Part 2","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"g8d3bf18f09210509db6b5c0c418ad60f","questionCount":2,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":2.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eUse this quiz to check your understanding of time and space complexity. If you don't know the answer to a question, select I don't know.\u003c/span\u003e\u003c/p\u003e","exportId":"g5a51bdbaeadfb67c03985a2e72b81b7b"}]},{"id":49399,"name":"Phase 2 Pairing Exercise","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gb983e3f9c2c760265dea0ac1d09ce233","items":[{"id":484234,"title":"Whiteboard Big O","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dsa-whiteboard-big-o\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-whiteboard-big-o\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-whiteboard-big-o/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify the Big O time complexity of an algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe recommend completing this activity during weeks 2 or 3 of Phase 2. This way,\nyou will have had some practice calculating Big O before pairing off.\u003c/p\u003e\n\n\u003cp\u003eFor this activity, you and your partner will take turns calculating the time\ncomplexity using Big O notation for a problem you solved during Phase 1. Think\nof this exercise as being more collaborative and less formal than other\nwhiteboarding exercises. In other words, you and your partner should communicate\nfreely and work together to come up with the appropriate calculation.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou and your partner should each choose a different problem from Phase 1\u003c/li\u003e\n\u003cli\u003eShare your solution to the chosen problem either on a whiteboard or via a\nscreenshare\u003c/li\u003e\n\u003cli\u003eDetermine the time complexity for your solution\n\n\u003cul\u003e\n\u003cli\u003eExplain your thinking and work with your partner to come up with the answer\u003c/li\u003e\n\u003cli\u003eTake turns typing or whiteboarding\u003c/li\u003e\n\u003cli\u003ePlan to start the conversation and whiteboard/type when evaluating your\nown solution\u003c/li\u003e\n\u003cli\u003eRemember to use the correct notation, e.g. O(n) or O(1)\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"whiteboard-big-o"}]},{"id":49400,"name":"Week 5: Sorting Algorithms","status":"unlocked","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g1e3ea7331d5230c2811102baa934490c","items":[{"id":484239,"title":"Days 1-2: Bubble Sort","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"bubble-sort\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/bubble-sort/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/bubble-sort\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/bubble-sort/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the bubble sort algorithm and its advantages/disadvantages\u003c/li\u003e\n\u003cli\u003eImplement the bubble sort algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBubble sort is considered one of the simpler sorting algorithms, and it is\nhighly efficient at handling already sorted lists. While it performs well for\nsorted lists and short lists, it does not perform well for longer lists. As a\nresult, the sorting functions built into programming languages do not use bubble\nsort.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [3, 2, 1, 4]\nOutput: [1, 2, 3, 4]\n\nInput: []\nOutput: []\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eHow Does Bubble Sort Work?\u003c/h2\u003e\n\n\u003cp\u003eBubble sort sorts a list in place. In other words, it does not create a new\nArray; instead, it modifies the Array that was passed to the function as an\nargument.\u003c/p\u003e\n\n\u003cp\u003eTo achieve this in-place sorting, bubble sort swaps elements when they are in\nthe incorrect order. When no swaps occur, the Array is considered sorted. This\nalgorithm iterates over an Array over and over until it is sorted. If the input\nArray is already sorted, it iterates over it only once because no swaps occur.\u003c/p\u003e\n\n\u003cp\u003eLet's look at a step-by-step example with an unsorted list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [2, 3, 1]\n// 2 is less than 3, so it stays where it is\n// But 1 is less than 3 so those two values are swapped\nPass 1: [2, 1, 3]\n\n// 1 is less than 2, so those values are swapped\n// 2 is less than 3, so those values stay as is\nPass 2: [1, 2, 3]\n\n// On this final pass, no swaps occur, so Array is sorted\nPass 3: [1, 2, 3]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd here's what happens with a sorted list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [1, 2, 3]\n\n// No swaps occur when iterating over Array\n// Input Array is returned as is\nPass 1: [1, 2, 3]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImplement Bubble Sort\u003c/h2\u003e\n\n\u003cp\u003eGiven what you know about bubble sort, implement your own version. Remember, we\nneed to sort the Array in place, so there's no need to declare a new Array and\npush to it: be sure to return the input Array with its values in order.\u003c/p\u003e\n\n\u003cp\u003eLastly, you may wish to look up how to swap values in whichever language you\nchoose to solve the problem in. Some languages, like Ruby and JavaScript,\nprovide shortcuts!\u003c/p\u003e\n\n\u003cp\u003eWhen you write up the explanation of your solution, don't forget to calculate\nBig O for its time complexity.\u003c/p\u003e\n\n\u003cp\u003eAlso take some time to think about what you learned by solving this challenge.\nWhat problem solving techniques did you use, coding or otherwise? How can they\nhelp you solve other problems?\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g3716c6a8bab57eb9e153d18321a0bff0"},{"id":484241,"title":"Days 3-5: Merge Sort","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"merge-sort\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/merge-sort/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/merge-sort\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/merge-sort/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the merge sort algorithm and its advantages/disadvantages\u003c/li\u003e\n\u003cli\u003eImplement the merge sort algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eMerge sort is an efficient sorting algorithm that uses a divide and conquer\napproach to sorting elements. In other words, it sorts small subsets of the\nlist, merges those subsets, sorts those, and carries on until the whole list has\nbeen sorted. It is commonly implemented as a recursive algorithm.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/merge-sort/merge_sort.gif\" alt=\"Merge Sort animation\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow Does Merge Sort Work?\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/merge-sort/merge_sort.png\" alt=\"Merge Sort image\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's say we have an Array consisting of four elements. First, we divide that\ninto two Arrays of two elements each. Since this is not the smallest possible\ndivision, we then divide those into four Arrays total consisting of one element\neach:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[4, 3, 2, 1]\n[4, 3] [2, 1]\n[4] [3] [2] [1]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNext, we sort and combine those elements until we have a merged and sorted list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eSort [4] with [3] =\u0026gt; [3, 4]\nSort [2] with [1] =\u0026gt; [1, 2]\nSort [3, 4] with [1, 2] =\u0026gt; [1, 2, 3, 4]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt is common to declare two functions (or more) when implementing a merge sort.\nThe main function is recursive: it divides the list and merges the sorted\npieces. It calls a helper function, which might be recursive or iterative. The\nhelper function merges the pieces of the list into a sorted list, and returns\nit.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003cp\u003eYou should also think of what the time complexity is for this algorithm. This is\na tough one because you have to think about both the recursive process and the\niterative process to come up with an answer for Big O. You might want to search\nthe web for this one. Check out this\n\u003ca href=\"https://softwareengineering.stackexchange.com/questions/297160/why-is-mergesort-olog-n\"\u003eStackExchange discussion\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003e1. Implement the Helper Function \u003ccode\u003emerge\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003emerge\u003c/code\u003e takes two arguments, both of which are Arrays. \u003cstrong\u003eEach of those Arrays\nwill already be sorted.\u003c/strong\u003e It then merges those Arrays into one sorted Array and\nreturns it. It merges and sorts them by comparing the first element of each\nArray. The smallest one is removed and pushed onto a new result Array. It does\nthis until one of the Arrays is empty, and then pushes any remaining values onto\nthe result.\u003c/p\u003e\n\n\u003cp\u003eHere is an example of what happens during this process:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003einput 1 = [1, 2]\ninput 2 = [0, 6]\nresult = []\n\nIs 1 \u0026lt; 0?\n  No. Remove 0 and push onto result.\n\ninput 1 = [1, 2]\ninput 2 = [6]\nresult = [0]\n\nIs 1 \u0026lt; 6?\n  Yes. Remove 1 and push onto result.\n\ninput 1 = [2]\ninput 2 = [6]\nresult = [0, 1]\n\nIs 2 \u0026lt; 6?\n  Yes. Remove 2 and push onto result.\n\ninput 1 = []\ninput 2 = [6]\nresult = [0, 1, 2]\n\ninput 1 is empty, add remainder of input 2 to result:\nresult = [0, 1, 2, 6]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBe sure to test your \u003ccode\u003emerge\u003c/code\u003e method with Arrays of different sizes to ensure\nit's working. What sizes might those Arrays be? Will both inputs always be the\nsame size? If your \u003ccode\u003emerge\u003c/code\u003e method is working, it'll return a sorted list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emerge([0, 1], [-2, 4])\n=\u0026gt; [-2, 0, 1, 4]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd remember, each argument Array to \u003ccode\u003emerge\u003c/code\u003e will already be sorted:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e// Valid inputs\nmerge([2, 10], [9, 10, 12])\n\n// Invalid inputs\nmerge([10, 3], [10, 9, 2])\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eDo not worry about invalid inputs! Just ensure your method works for valid\ninputs before moving on. You'll need to rely on your own testing skills here!\nYou've got this!\u003c/p\u003e\n\n\u003ch2\u003e2. Implement the Main Function \u003ccode\u003emerge_sort\u003c/code\u003e/\u003ccode\u003emergeSort\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe main function recursively divides the unsorted input array into pieces until\nthose pieces are as small as possible. It then feeds those pieces to the \u003ccode\u003emerge\u003c/code\u003e\nhelper method. It then combines the results from calling \u003ccode\u003emerge\u003c/code\u003e into one final\nsorted list that is returned.\u003c/p\u003e\n\n\u003cp\u003eLet's take this step by step by breaking this process down into chunks we can\ntest. Keep in mind that you'll be responsible for testing each step. Our tests\nwill only check the final result of calling the main method.\u003c/p\u003e\n\n\u003ch3\u003e1. Add the base case\u003c/h3\u003e\n\n\u003cp\u003eWe want to divide the input into its smallest possible subsets. What length or\nlengths might the smallest possible subset be? You can also ask yourself: \"What\nmight the smallest possible input be?\" or \"When do I want to stop dividing the\nArray and return it?\" or \"What inputs would already be considered sorted no\nmatter what their contents are?\"\u003c/p\u003e\n\n\u003cp\u003eIf you're feeling rusty on recursion: the base case, often an \u003ccode\u003eif\u003c/code\u003e statement, is\nresponsible for stopping the recursive calls.\u003c/p\u003e\n\n\u003cp\u003eTest your code. If it's working you'll get the following result:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput []\nOutput: []\n\nInput: [1]\nOutput: [1]\n\nInput: [1, 2]\nOutput: undefined or nil (i.e. default return value for the language you're using)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e2. Find the middle\u003c/h3\u003e\n\n\u003cp\u003eStore the middle index of the input Array in a variable. Print or return it to\ncheck that it's correct. Make sure it's an integer!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: []\nOutput: [] // never reaches the middle calculation\n\nInput: [1]\nOutput: [1] // never reaches the middle calculation\n\nInput: [1, 2]\nOutput: 1\n\nInput: [1, 2, 3]\nOutput: 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce that's working, be sure to remove any print or return statements you used\nto test your code.\u003c/p\u003e\n\n\u003ch3\u003e3. Divide the Array\u003c/h3\u003e\n\n\u003cp\u003eDivide the Array into two parts: one part stores all the values up to the\nmiddle, and the other part stores all the values from the middle onwards. These\nare often called \u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003eright\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTest your work by printing or returning the two parts. Make sure all of the\nvalues from the input are present.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [1, 2, 3, 4]\nLeft: [1, 2]\nRight: [3, 4]\n\nInput: [1, 2, 3]\nLeft: [1]\nRight: [2, 3]\n// Left [1, 2] and Right [3] is also valid\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce that's working, be sure to remove any print or return statements you used\nto test your code.\u003c/p\u003e\n\n\u003ch3\u003e4. Divide more!\u003c/h3\u003e\n\n\u003cp\u003eEarlier, we said that we need to keep dividing the input until it is divided\ninto the smallest possible pieces. Another way of thinking of this is that we\nneed to keep dividing the input until we hit the base case we declared earlier.\u003c/p\u003e\n\n\u003cp\u003eRight now, we are only dividing the list into a \u003ccode\u003eleft\u003c/code\u003e side and a \u003ccode\u003eright\u003c/code\u003e side\nonce. How can we keep dividing the list until it's as small as possible? What do\nwe need to do?\u003c/p\u003e\n\n\u003cp\u003eYou can test your code by printing the values stored in left and right. If the\nprint statement/s are the very last line/s in your code, you should see the\nfollowing print out:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emerge_sort([1, 2, 3, 4])\n=\u0026gt; [1]\n=\u0026gt; [2]\n=\u0026gt; [3]\n=\u0026gt; [4]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce that's working, be sure to remove any print or return statements you used\nto test your code.\u003c/p\u003e\n\n\u003ch3\u003e5. Sort and merge\u003c/h3\u003e\n\n\u003cp\u003eWe still haven't called our helper method \u003ccode\u003emerge\u003c/code\u003e, and it's getting lonely. If\nyou recall from earlier in this README, \u003ccode\u003emerge\u003c/code\u003e takes two sorted lists and sorts\nand merges them into one list. What might we do with this method? What might we\nprovide to it as arguments?\u003c/p\u003e\n\n\u003cp\u003eAt the end of this step, you should be done!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emerge_sort([1, 2, 3])\n=\u0026gt; [1, 2, 3]\n\nmerge_sort([-10, 5, 100, -100])\n=\u0026gt; [-100, -10, 5, 100]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e6. Take some time to think\u003c/h3\u003e\n\n\u003cp\u003eTake some time to understand what's happening as the algorithm recurses. What\ndoes the stack look like? What's in each frame? Can you plot it out on paper for\nsmall inputs? Try plotting it out when the input Array has 2 elements, 3\nelements, or 4 elements. You can also watch your solution in action using this\n\u003ca href=\"http://pythontutor.com/visualize.html#mode=edit\"\u003etool\u003c/a\u003e: don't forget to choose\nthe right language, and then call your function with an argument!\u003c/p\u003e\n\n\u003cp\u003eAlso think about the problem solving techniques you used. How can you use what\nyou've learned to solve other problems? What did you learn about\nrecursion/recursive programming?\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gea2f37d686477cf969600c96620a0cfd"},{"id":484242,"title":"Bonus: Quicksort","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"quicksort\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/quicksort/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/quicksort\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/quicksort/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the quicksort algorithm and its advantages/disadvantages\u003c/li\u003e\n\u003cli\u003eImplement the quicksort algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eQuicksort is an efficient divide and conquer algorithm for sorting data. It can\nsort in place, i.e. it does not require us to push data to a new data structure,\nand it's typically implemented as a recursive algorithm. Note that there are a\nnumber of ways to implement a quicksort.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/quicksort/quick_sort_partition_animation.gif\" alt=\"quicksort animation\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow Does Quicksort Work?\u003c/h2\u003e\n\n\u003cp\u003eThe quicksort algorithm requires us to choose a pivot element in the array. The\npivot can be at any point, such as the start, middle, or end. Next, we sort all\nof the elements that are less than the pivot to the left of the pivot, and all\nof the elements that are greater than the pivot to the right. Once this is done,\nthe pivot is at the correct location. We then repeat this process on the left\nand right sides until the whole list is sorted.\u003c/p\u003e\n\n\u003cp\u003eIn the diagram below, notice how the number 4, which is the pivot, is sorted to\nthe correct location before the recursive call is made (branching denotes the\nrecursive calls). First, we check if 1 is more than 4. It isn't so we move to\nthe next value: 7. 7 is more than 4, so it is swapped with the element before 4\n(which is 5), and 4 is then swapped with 7. This continues until every element\nbefore the pivot has been evaluated.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/quicksort/quicksort_diagram.png\" alt=\"diagram of quicksort in action\"\u003e\u003c/p\u003e\n\n\u003ch2\u003ePerformance\u003c/h2\u003e\n\n\u003cp\u003eIn the worst case, quicksort runs in quadratic time: O(n^2). This will happen\nwhen we choose the rightmost element as the pivot for an already sorted list.\nThe average run time, however, is logarithmic: O(n log n).\u003c/p\u003e\n\n\u003cp\u003eWe can improve the performance of our quicksort algorithm by choosing the middle\nelement as the pivot instead. We can potentially gain further improvements by\nsampling three or more elements and choosing the median as the pivot. However,\nchoosing too many elements for sampling will likely degrade performance, so it\nreally is a balancing act.\u003c/p\u003e\n\n\u003ch2\u003eImplement Quicksort\u003c/h2\u003e\n\n\u003cp\u003eWe'll implement the quicksort algorithm in two parts. First we'll make the\nhelper function that sorts elements to the right or left of the pivot. Once\nthat's working, we'll work on the main function that calls the helper function.\nOur tests will test the main function. It'll be up to you to ensure the helper\nfunction works.\u003c/p\u003e\n\n\u003ch3\u003e1. \u003ccode\u003epartition(array, low, high)\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe helper method \u003ccode\u003epartition\u003c/code\u003e takes three arguments: the \u003ccode\u003earray\u003c/code\u003e to operate\nupon, and a \u003ccode\u003elow\u003c/code\u003e and a \u003ccode\u003ehigh\u003c/code\u003e, which are integers denoting which portion of the\narray requires sorting. It returns the final index of the pivot element and\nperforms the following operations:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eChoose the rightmost element as the pivot\u003c/li\u003e\n\u003cli\u003eDeclare a variable called \u003ccode\u003epivotIndex\u003c/code\u003e or \u003ccode\u003epivot_index\u003c/code\u003e and set it equal to\nthe value of \u003ccode\u003ehigh\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eIterate over the array starting at the \u003ccode\u003elow\u003c/code\u003e index and ending at the \u003ccode\u003epivotIndex\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf an element to the left of the pivot is less than or equal to the pivot, continue\u003c/li\u003e\n\u003cli\u003eIf an element to the left of the pivot is greater than the pivot:\n\n\u003cul\u003e\n\u003cli\u003eSwap it with the element just before the pivot, and then swap the pivot\nwith that element (i.e. the pivot will now be at its original index - 1)\u003c/li\u003e\n\u003cli\u003eDecrement the \u003ccode\u003epivotIndex\u003c/code\u003e, since the pivot has been moved to the left by\none place\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIf an element is equal to the pivot, leave it in place\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eReturn the \u003ccode\u003epivotIndex\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eYour function should sort the array in place. This means you should not be\ncreating a new array at any point. You'll also need to decide how to best\niterate over the array. Think about which element needs to be compared to the\npivot at any given time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003earray = [3, 2, 1, 4]\npartition(array, 0, 3)\n=\u0026gt; 3\n// array = [3, 2, 1, 4]\n\narray = [3, 2, 1, 2]\npartition(array, 0, 3)\n=\u0026gt; 2\n// array = [1, 2, 2, 3]\n\narray = [2, -10, 7, 0, 1, 3]\npartition(array, 0, 5)\n=\u0026gt; 4\n// array = [2, -10, 1, 0, 3, 7]\n\narray = [2, -10, 7, 0, 1, 3]\npartition(array, 1, 3)\n=\u0026gt; 2\n// array = [2, -10, 0, 7, 1, 3]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo determine whether your function is working, check if all elements lower than\nthe pivot are to the pivot's left, while all elements greater than the pivot are\nto its right. Be sure to look at the correct subset of the array when using\nvalues other than 0 and the array's length - 1 as the \u003ccode\u003elow\u003c/code\u003e and \u003ccode\u003ehigh\u003c/code\u003e. Finally,\nthe method will return the final index of the pivot element.\u003c/p\u003e\n\n\u003ch3\u003e2. \u003ccode\u003equicksort(array, low, high)\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThis is the main method that returns a sorted array. Once again, it sorts the\narray in place - it does not create any new arrays. It achieves this by\npartitioning the array using the helper method from earlier, and then\nrecursively processing all elements to the left of the pivot and all elements to\nthe right of the pivot. The steps are:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIf \u003ccode\u003elow\u003c/code\u003e is less than \u003ccode\u003ehigh\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003ePartition the array using the \u003ccode\u003elow\u003c/code\u003e and \u003ccode\u003ehigh\u003c/code\u003e values\u003c/li\u003e\n\u003cli\u003eStore the result of calling \u003ccode\u003epartition\u003c/code\u003e in a variable (recall that the\nresult is the final index of the pivot)\u003c/li\u003e\n\u003cli\u003eRecurse with the left side of the array (use \u003ccode\u003elow\u003c/code\u003e and \u003ccode\u003ehigh\u003c/code\u003e to specify\nthe starting and stopping points)\u003c/li\u003e\n\u003cli\u003eRecurse with the right side of the array (use \u003ccode\u003elow\u003c/code\u003e and \u003ccode\u003ehigh\u003c/code\u003e to specify\nthe starting and stopping points)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eElse return the array\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003earr = [3, 2, 1, 4]\nquicksort(arr, 0, 3)\n=\u0026gt; [1, 2, 3, 4]\n\narr = [1, 2, 2, 3, 4]\nquicksort(arr, 0, 4)\n=\u0026gt; [1, 2, 2, 3, 4]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eBonus: Reduce the Number of Swaps\u003c/h3\u003e\n\n\u003cp\u003eOur algorithm for \u003ccode\u003epartition\u003c/code\u003e always performs two swaps when a number higher\nthan the pivot is encountered. Can you modify the algorithm so that it performs\nonly one swap in this case? It should then perform one final swap to put the\npivot in the correct location before returning the pivot index. Take a look at\nthe gif at the top of this README if you need to see it in action.\u003c/p\u003e\n\n\u003ch3\u003eSuper Bonus: Choose the Middle Element as the Pivot\u003c/h3\u003e\n\n\u003cp\u003eCan you modify the algorithm to use the middle element as the pivot? There's\nmore than one way to achieve this functionality! What about using the median of\nseveral values? Or a random element?\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gb86b85a980e1df187ebf73998b76ca99"}]},{"id":49402,"name":"Week 6: Data Structures and Big O","status":"unlocked","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g5cdbcbb040debc745880b491f6a59f38","items":[{"id":484244,"title":"Days 1-2: Implement a Stack Class","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"what-is-a-stack\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-stack/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-stack\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-stack/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the characteristics of a stack\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a stack class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eA \u003cstrong\u003estack\u003c/strong\u003e is a data structure where items are processed in last-in-first-out\norder (LIFO). Similar to a stack of pancakes, where the last pancake placed on\nthe stack is eaten first, the last item placed on the stack data structure is\nremoved first. The last item on the stack is known as the \u003cstrong\u003etop\u003c/strong\u003e, and the first\nitem that was pushed on the stack is known as the \u003cstrong\u003ebase\u003c/strong\u003e. This means that the\nbase is removed from the stack last.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/what-is-a-stack/pancakes.png\" alt=\"pancake stack\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe use stacks to solve certain algorithm problems. We also think of recursive\nproblems in terms of a stack, since each recursive call results in a stack frame\nbeing added to the stack: those frames are then processed and removed in LIFO\norder! If you are tackling a problem and you see that it must be solved\ndepth-first, this is a good clue that you'll either be using recursion or\nimplementing a stack. Depth-first means that we go as deep as we can before we\nstart processing data (LIFO order).\u003c/p\u003e\n\n\u003ch2\u003eWait! This Sounds A Lot Like an Array!\u003c/h2\u003e\n\n\u003cp\u003eWe can actually implement a \u003ccode\u003eStack\u003c/code\u003e class using an array as the underlying data\nstructure! Arrays provide all of the methods we need for the core functionality\nof a stack. Some of the methods we'll be adding to our \u003ccode\u003eStack\u003c/code\u003e class include:\n\u003ccode\u003epush\u003c/code\u003e, \u003ccode\u003epop\u003c/code\u003e, \u003ccode\u003epeek\u003c/code\u003e, \u003ccode\u003eisEmpty\u003c/code\u003e, and \u003ccode\u003eprint\u003c/code\u003e. Do any of those sound familiar?\u003c/p\u003e\n\n\u003cp\u003eHowever, it's important to note that an array doesn't have to be the underlying\ndata structure. It could be another data structure, such as a Linked List (we'll\ncover this data structure later).\u003c/p\u003e\n\n\u003cp\u003eWhen calculating Big O for a stack, we always need to consider what the\nunderlying data structure is since that'll affect our calculations.\u003c/p\u003e\n\n\u003ch2\u003eImplement the Stack Class\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eStack\u003c/code\u003e class already has two attributes: the \u003ccode\u003estack\u003c/code\u003e itself (an array) and\na \u003ccode\u003elimit\u003c/code\u003e, which is an integer representing the total number of items allowed in\nthe stack at one time.\u003c/p\u003e\n\n\u003cp\u003eWe've provided starter code for some languages. Choose whichever language you\nlike. Once again, we recommend writing your own tests first and then running the\ntest suites.\u003c/p\u003e\n\n\u003cp\u003eAdd the following methods to the \u003ccode\u003eStack\u003c/code\u003e class:\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003epush(item)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003epush\u003c/code\u003e adds an item to the top of the stack. If the stack is full, the item\nshould not be pushed, and an error should be thrown.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003epop\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003epop\u003c/code\u003e removes the item at the top of the stack and returns it. Don't worry if\n\u003ccode\u003epop\u003c/code\u003e is called on an empty stack. It's OK for it to return the default return\nvalue, such as \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003epeek\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003epeek\u003c/code\u003e returns the item at the top of the stack without removing it. If the\nstack is empty, use the default return value, e.g. \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eisEmpty\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eisEmpty\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if the stack is empty, otherwise \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eisFull\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eisFull\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if no more space is available in the stack, otherwise\n\u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003esize\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003esize\u003c/code\u003e returns the number of items currently on the stack.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003esearch(target)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003esearch\u003c/code\u003e returns an Integer representing how far the target item is from the top\nof the stack. If the item is not in the stack, return \u003ccode\u003e-1\u003c/code\u003e. Example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Stack = 1, 2, 3, 4, 5 \u0026lt;-top\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; 0\u003c/span\u003e\n\u003cspan class=\"nx\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; 1\u003c/span\u003e\n\u003cspan class=\"nx\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; -1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eprint\u003c/code\u003e prints the contents of the stack. It does not return them! You may print\nthem however you wish.\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gb5fb3c93b532892f86a76ecaea6b19fb"},{"id":484246,"title":"Day 2: Big O Stack Quiz","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"g447b2f08f5f9b8f0dcd321648f3bd976","questionCount":3,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":3.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eIn this quiz we'll ask you to calculate the time complexity for several of the Stack class methods. Remember that we used an Array as the underlying data structure for our class. If you don't know the time complexity for an Array method, you may need to Google.\u003c/p\u003e","exportId":"g4502585cfd2556beb22ae2713d9071a0"},{"id":484248,"title":"Days 3-4: Implement a Queue Class","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"what-is-a-queue\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-queue/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-queue\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-queue/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the characteristics of a queue\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a queue class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eA queue is a data structure where items are processed in first-in-first-out\norder (FIFO). It has two ends: a front and a rear. The front is where items are\ndequeued from first, while items at the rear are handled last. Items are added\nto the rear of the queue until the queue is full. A queue operates a lot like a\nqueue at the checkout of a grocery store. Customers join at the end of the line\nand are served at the front of the line.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/what-is-a-queue/grocery_store.jpg\" alt=\"grocery queue\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can implement a \u003ccode\u003eQueue\u003c/code\u003e class using an array as the underlying data structure!\nArrays provide all of the methods we need for the core functionality of a queue.\nSome of the methods we'll be adding to our Queue class include: \u003ccode\u003eenqueue\u003c/code\u003e,\n\u003ccode\u003edequeue\u003c/code\u003e, \u003ccode\u003epeek\u003c/code\u003e, \u003ccode\u003eisEmpty\u003c/code\u003e, and \u003ccode\u003eprint\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIt's important to note that an array doesn't have to be the underlying data\nstructure. It could be another data structure, such as a Linked List (we'll\ncover this data structure later).\u003c/p\u003e\n\n\u003cp\u003eWhen calculating Big O for a queue, we always need to consider what the\nunderlying data structure is since that'll affect our calculations.\u003c/p\u003e\n\n\u003ch2\u003eImplement the Queue Class\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eQueue\u003c/code\u003e class already has two attributes: the \u003ccode\u003equeue\u003c/code\u003e itself (an array) and\na \u003ccode\u003elimit\u003c/code\u003e, which is an integer representing the total number of items allowed in\nthe \u003ccode\u003equeue\u003c/code\u003e at one time.\u003c/p\u003e\n\n\u003cp\u003eWe've provided starter code for some languages. Choose whichever language you\nlike. Once again, we recommend writing your own tests first and then running the\ntest suites.\u003c/p\u003e\n\n\u003cp\u003eAdd the following methods to the class:\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eenqueue(item)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eenqueue\u003c/code\u003e adds an item to the back of the queue. If the queue is full, the item\nshould not be pushed and an Error should be thrown.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003edequeue\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003edequeue\u003c/code\u003e removes the item at the front of the queue and returns it. Don't worry\nif \u003ccode\u003edequeue\u003c/code\u003e is called on an empty queue. It's OK for it to return the default\nreturn value, such as \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003epeek\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003epeek\u003c/code\u003e returns the item at the front of the queue without removing it. If the\nqueue is empty, use the default return value, e.g. \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eisEmpty\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eisEmpty\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if the queue is empty, otherwise \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eisFull\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eisFull\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if no more space is available in the queue, otherwise \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003esize\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003esize\u003c/code\u003e returns the number of items currently in the queue.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003esearch(target)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003esearch\u003c/code\u003e returns an integer representing how far the target item is from the\nfront of the queue. If the item is not in the queue, return \u003ccode\u003e-1\u003c/code\u003e. Example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// queue = 1, 2, 3, 4, 5 \u0026lt;- rear\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; 4\u003c/span\u003e\n\u003cspan class=\"nx\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; 3\u003c/span\u003e\n\u003cspan class=\"nx\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; -1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eprint\u003c/code\u003e prints the contents of the queue. It does not return them! You may print\nthem however you wish.\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g78c803950fa1d0ea51ecb4d5dcf3547c"},{"id":484250,"title":"Day 4: Big O Queue Quiz","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"g3546206289961b149a22ce30c3b18e20","questionCount":3,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":3.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eIn this quiz we'll ask you to calculate the time complexity for several of the Queue class methods. Remember that we used an Array as the underlying data structure for our class. If you don't know the time complexity for an Array method, you may need to Google.\u003c/p\u003e","exportId":"g76e1fe9cc974f565512cf5cb97be892d"},{"id":484251,"title":"Day 5: What Is a Set?","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"what-is-a-set\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-set/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-set\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-set/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the characteristics of a set\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a set class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eA \u003cstrong\u003eset\u003c/strong\u003e is a data structure that can store any number of \u003cem\u003eunique\u003c/em\u003e values or\nelements. That means there are \u003cem\u003eno repeating elements\u003c/em\u003e in a set.\u003c/p\u003e\n\n\u003cp\u003eMany languages provide sets as part of the core language, but today, we'll be\nbuilding our own \u003ccode\u003eMySet\u003c/code\u003e class by using a hash/object as the underlying data\nstructure. We've chosen a hash/object because that data structure only allows\nunique keys.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e// Convert an Array to a Set\n\narray = [1, 3, 1, 2]\nset = new Set from array\n=\u0026gt; {1, 3, 2}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImplement the MySet class\u003c/h2\u003e\n\n\u003cp\u003eWe have already declared a class called \u003ccode\u003eMySet\u003c/code\u003e in the starter files and\nprovided the underlying data structure: a hash/object called \u003ccode\u003edata\u003c/code\u003e. You'll need\nto build out all of the methods. Do not worry about the ordering of items in the\nset. They can be in any order.\u003c/p\u003e\n\n\u003cp\u003eBe aware that these methods may go by different names in different languages.\nThis is one way to implement a set, there are others! We are basing ours on\nJavaScript's \u003ccode\u003eSet\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003eInitialization, e.g. \u003ccode\u003econstructor(iterable)\u003c/code\u003e or \u003ccode\u003e#initialize(iterable)\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eWe should be able to initialize a new \u003ccode\u003eMySet\u003c/code\u003e instance with no data, or by\nproviding an iterable, such as an array or string. When a new \u003ccode\u003eMySet\u003c/code\u003e instance\nis initialized with an array or string, only its \u003cstrong\u003eunique\u003c/strong\u003e contents should be\nadded to the \u003ccode\u003eMySet\u003c/code\u003e instance.\u003c/p\u003e\n\n\u003cp\u003eUse a value of \u003ccode\u003etrue\u003c/code\u003e for each key: \u003ccode\u003e{ dog: true }\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003enew MySet()\n=\u0026gt; MySet data = {}\nnew MySet([1, 2, 1, 3])\n=\u0026gt; MySet data = { 1: true, 2: true, 3: true }\nnew MySet('hello')\n=\u0026gt; MySet data = { 'h': true, 'e': true, 'l': true, 'o': true }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAn error should be thrown if a user tries to initialize a new \u003ccode\u003eMySet\u003c/code\u003e instance\nwith anything other than nothing, a string, or an array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003esize\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eReturns the number of items in the MySet instance.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eadd(item)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eAdd an item to a \u003ccode\u003eMySet\u003c/code\u003e instance. Remember, \u003cstrong\u003eonly unique items\u003c/strong\u003e should exist\nin \u003ccode\u003eMySet\u003c/code\u003e. When adding an item, the item is added as is. Return the \u003ccode\u003eMySet\u003c/code\u003e\ninstance.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emy_set = new MySet()\nmy_set.add('caat')\n=\u0026gt; MySet data = { 'caat' }\n\nnext_set = new MySet('doooog')\nnext_set.add('caarp')\n=\u0026gt; MySet data = { 'd', 'o', 'g', 'caarp' }\nnext_set.add(12)\n=\u0026gt; MySet data = { 'd', 'o', 'g', 'caarp', 12 }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote on JS: Arrays cannot be keys for JS objects. They will be converted to\nstrings by default like so: \u003ccode\u003e[1, 2] =\u0026gt; '1,2'\u003c/code\u003e. Don't worry about this. We'll\nensure our tests allow for this. For now, just be aware that actual Sets most\ncertainly can handle Arrays!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003edelete(item)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eRemoves the item from the set. If the removal was successful, return \u003ccode\u003etrue\u003c/code\u003e. If\nthe item was not removed (i.e. if the item was not present in the set to begin\nwith), return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emy_set = new MySet('aabb')\nmy_set.delete('a')\n=\u0026gt; true\nmy_set.delete('z')\n=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote on JS: Don't worry about handling Arrays here!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ehas(item)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIf the item is in the \u003ccode\u003eMySet\u003c/code\u003e instance, return \u003ccode\u003etrue\u003c/code\u003e, otherwise \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote on JS: Don't worry about handling Arrays here!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eentries\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eReturns an array containing all of the values in the \u003ccode\u003eMySet\u003c/code\u003e instance.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emy_set = new MySet('aabb')\nmy_set.entries()\n=\u0026gt; ['a', 'b']\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote on JS: Don't worry about handling Arrays (which were meant to be keys in\n\u003ccode\u003ethis.data\u003c/code\u003e) here!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gd220e41be9517c71404a69a4181186e1"},{"id":484253,"title":"Day 5: Big O Set Quiz","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"g046796c979c39efb3ee2f02ee5ac8176","questionCount":3,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":3.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eIn this quiz we'll ask you to calculate the time complexity for several of the MySet class methods. Remember that we used a Hash/Object as the underlying data structure for our class. If you don't know the time complexity for a method, you may need to Google.\u003c/p\u003e","exportId":"gc4ad2134b4df5ff7bcd1a68e4d0437e2"}]},{"id":49405,"name":"Week 7: Foundational Data Structures","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g0336c8447d0aaa128d18e370bb0007bf","items":[{"id":484256,"title":"Days 1-2: Implement a Linked List","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"what-is-a-linked-list\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-linked-list/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-linked-list\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-linked-list/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the characteristics of a linked list\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a linked list class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll be implementing a \u003cstrong\u003elinked list\u003c/strong\u003e data structure. More\nspecifically, we'll be implementing a singly-linked list, or simple linked list\n(it goes by several names). A \u003cstrong\u003elinked list\u003c/strong\u003e consists of \u003cstrong\u003enodes\u003c/strong\u003e, which are\nconnected to one another. It is similar to an array in that its elements (nodes)\nare in a specific order.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/what-is-a-linked-list/linked_list.png\" alt=\"Linked List\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe may choose to use linked lists in place of other data structures when we need\nfast insertion and deletion of data.\u003c/p\u003e\n\n\u003cp\u003eThe node at the beginning of the list is called the \u003ccode\u003ehead\u003c/code\u003e, while the node at\nthe end is called the \u003ccode\u003etail\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eWhat Is a Node?\u003c/h2\u003e\n\n\u003cp\u003eA \u003cstrong\u003enode\u003c/strong\u003e in a linked list is an object that has two attributes: \u003ccode\u003evalue\u003c/code\u003e and\n\u003ccode\u003enext\u003c/code\u003e. The \u003ccode\u003evalue\u003c/code\u003e stores the data that we might be interested in retrieving,\nsuch as an integer, array, string, or some other object. The \u003ccode\u003enext\u003c/code\u003e attribute\npoints to the next node in the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003earray = [1, 2]\nhead = new Node(value: 1)\nnextNode = new Node(value: 2)\nhead.next = nextNode\n// head -\u0026gt; nextNode\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe very last node in the linked list will point to nothing, so its \u003ccode\u003enext\u003c/code\u003e value\nmay be \u003ccode\u003eundefined\u003c/code\u003e, \u003ccode\u003enull\u003c/code\u003e, \u003ccode\u003enil\u003c/code\u003e, etc. It depends on the language being used\nand on the implementation of the node class.\u003c/p\u003e\n\n\u003ch2\u003eHow Do We Track the Starting Node of a Linked List?\u003c/h2\u003e\n\n\u003cp\u003eIt is common to define a class called \u003ccode\u003eLinkedList\u003c/code\u003e when using this data\nstructure. The \u003ccode\u003eLinkedList\u003c/code\u003e class stores the \u003ccode\u003ehead\u003c/code\u003e node, which points to the\nstart of the list. As long as we know where the list starts, we can always\ntraverse it to access all other nodes in the list by using the \u003ccode\u003enext\u003c/code\u003e property.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node(value: 'i am the beginning!')\nlist = new LinkedList(head)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA note on online algorithm challenges: When completing challenges online, such\nas through LeetCode, you might be provided with only the head node, rather\nthan a \u003ccode\u003eLinkedList\u003c/code\u003e class.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eHow Do We Visit Each Node?\u003c/h2\u003e\n\n\u003cp\u003eIterables, like arrays, provide instance methods that allow us to traverse them,\nand we can also traverse them using loops and indices. Linked lists are a little\ndifferent. Nodes do not have indexes: they just point to the next node, or to\nnothing if it's the last node in the list (the \u003ccode\u003etail\u003c/code\u003e). This means we have to go\nto the \u003ccode\u003ehead\u003c/code\u003e node, ask it what's next, go there, and repeat!\u003c/p\u003e\n\n\u003cp\u003eHere's an example using people waiting in a queue to get into a club to dance to\nsome sick beats! In order, the queue consists of Janzz, Murray, and Lakshmi.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eYou: \"Hey Janzz! Who's next?\"\nJanzz: \"Murray\"\nYou: \"Hey Murray! Who's next?\"\nMurray: \"Lakshmi\"\nYou: \"Hey Lakshmi! Who's next?\"\nLakshmi: [awkward silence]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe're not giving you the code here because we want you to figure out how to\ntraverse a linked list for yourself later on. We believe in you!\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eA \u003cstrong\u003elinked list\u003c/strong\u003e is a data structure consisting of \u003cstrong\u003enodes\u003c/strong\u003e. The \u003ccode\u003ehead\u003c/code\u003e node\ndenotes the start of the list.\u003c/p\u003e\n\n\u003cp\u003eEach node has two attributes: \u003ccode\u003evalue\u003c/code\u003e and \u003ccode\u003enext\u003c/code\u003e. \u003ccode\u003evalue\u003c/code\u003e stores the data we\nmight be interested in retrieving, while \u003ccode\u003enext\u003c/code\u003e points to the next Node in the\nlist. The last node, called the \u003ccode\u003etail\u003c/code\u003e, in the list points to nothing (e.g.\n\u003ccode\u003enext\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e), and that's how we know it's the end!\u003c/p\u003e\n\n\u003cp\u003eWe can use another class called \u003ccode\u003eLinkedList\u003c/code\u003e to track the \u003ccode\u003ehead\u003c/code\u003e of the list.\u003c/p\u003e\n\n\u003ch2\u003eImplement a Linked List\u003c/h2\u003e\n\n\u003cp\u003ePlease note that in Ruby we'll be using \u003ccode\u003enext_node\u003c/code\u003e instead of \u003ccode\u003enext\u003c/code\u003e as the\n\u003ccode\u003eNode\u003c/code\u003e attribute. This is to avoid confusing syntax, since next is a reserved\nkeyword in Ruby. It also leads to confusing syntax highlighting as a result. In\nshort, wherever you see \u003ccode\u003enext\u003c/code\u003e, think \u003ccode\u003enext_node\u003c/code\u003e for Ruby.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, and optionally explain your solution and\ncode.\u003c/p\u003e\n\n\u003ch3\u003e1. Define the \u003ccode\u003eNode\u003c/code\u003e Class\u003c/h3\u003e\n\n\u003cp\u003eA \u003ccode\u003eNode\u003c/code\u003e has two attributes: \u003ccode\u003evalue\u003c/code\u003e and \u003ccode\u003enext\u003c/code\u003e. \u003ccode\u003evalue\u003c/code\u003e can store anything,\nwhile \u003ccode\u003enext\u003c/code\u003e will either point to the next \u003ccode\u003eNode\u003c/code\u003e or to nothing.\u003c/p\u003e\n\n\u003cp\u003eProvide default values for both \u003ccode\u003evalue\u003c/code\u003e and \u003ccode\u003enext\u003c/code\u003e so that a new Node can be\ninstantiated without any arguments. In JS, the default values for both should be\n\u003ccode\u003enull\u003c/code\u003e, while they should both be \u003ccode\u003enil\u003c/code\u003e in Ruby. Choose a comparable value if\ncoding in other languages.\u003c/p\u003e\n\n\u003cp\u003eWhen instantiating a new \u003ccode\u003eNode\u003c/code\u003e, the arguments in order should be: \u003ccode\u003evalue\u003c/code\u003e,\n\u003ccode\u003enext\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003enode = new Node()\nnode.value\n=\u0026gt; null or nil\nnode.next\n=\u0026gt; null or nil\n\nnode = new Node('hi', new Node('bye'))\nnode.value\n=\u0026gt; 'hi'\nnode.next\n=\u0026gt; Instance of Node with value of 'bye'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e2. Define the \u003ccode\u003eLinkedList\u003c/code\u003e Class\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eLinkedList\u003c/code\u003e class tracks the \u003ccode\u003ehead\u003c/code\u003e of the list, so we know where it\nbegins. It should have one attribute: \u003ccode\u003ehead\u003c/code\u003e. Provide a default value for \u003ccode\u003ehead\u003c/code\u003e\nof \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e, or some other falsy value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003enode = new Node()\nlist = new LinkedList(node)\nlist.head\n=\u0026gt; Instance of Node\n\nemptyList = new LinkedList()\nlist.head\n=\u0026gt; null or nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e3. Spend a Few Minutes Playing With Your Linked List\u003c/h3\u003e\n\n\u003cp\u003eSee if you can recreate the following Arrays as Linked Lists using your classes,\nwhere the 0th element denotes the \u003ccode\u003ehead\u003c/code\u003e of the list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003echaracters = ['Hamtaro', 'Walter White']\ndrinks = ['Coffee', 'Manhattan', 'Brandy Sour']\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou can test this manually like so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nprint list.head.value\nprint list.head.next.value\nprint list.head.next.next\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e4. Add \u003ccode\u003eiterate\u003c/code\u003e Method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eFor now, we'll build part of the \u003ccode\u003eiterate\u003c/code\u003e method (but not all of it). The\n\u003ccode\u003eiterate\u003c/code\u003e method traverses the entire \u003ccode\u003eLinkedList\u003c/code\u003e. To ensure that it's working,\nwe'll print the value of each \u003ccode\u003eNode\u003c/code\u003e. Later we'll remove this functionality and\nupdate the method to take a callback.\u003c/p\u003e\n\n\u003cp\u003eRemember, the \u003ccode\u003ehead\u003c/code\u003e is the first \u003ccode\u003eNode\u003c/code\u003e in the list, and the next one is stored\nin its \u003ccode\u003enext\u003c/code\u003e attribute. We can go to each \u003ccode\u003eNode\u003c/code\u003e by visiting all of the\n\u003ccode\u003enext\u003c/code\u003es. When \u003ccode\u003enext\u003c/code\u003e is equal to a falsy value, such as \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e, we've\nreached the end of the list. At the end of the iteration, return the \u003ccode\u003ehead\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.iterate()\n=\u0026gt; 'hi again'\n=\u0026gt; 'but why?'\n=\u0026gt; Node with value 'hi again'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e5. Modify the \u003ccode\u003eiterate(callback)\u003c/code\u003e Method to Take a Callback\u003c/h3\u003e\n\n\u003cp\u003eChange the \u003ccode\u003eiterate\u003c/code\u003e method, so that it takes a callback (a function) as an\nargument.\u003c/p\u003e\n\n\u003cp\u003eReplace the print statements in the \u003ccode\u003eiterate\u003c/code\u003e method with a call to the\ncallback. When calling the callback, provide the current Node as an argument to\nthe callback. You can test if this is working by calling \u003ccode\u003eiterate\u003c/code\u003e on the list\nwith a callback that prints the value of each Node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction printNode(node):\n  print node.value\n\nhead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.iterate(printNode)\n=\u0026gt; 'hi again'\n=\u0026gt; 'but why?'\n=\u0026gt; Node with value 'hi again'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eHint\u003c/strong\u003e: Rubyists might be interested in learning about passing blocks and\nusing \u003ca href=\"https://www.brainstobytes.com/ruby-iterators-and-the-yield-keyword-with-examples/\"\u003e\u003ccode\u003eyield\u003c/code\u003e\u003c/a\u003e to implement the \u003ccode\u003eiterate\u003c/code\u003e method. Your Ruby\nimplementation should accept a block rather than a callback function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eNode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'hi again'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"no\"\u003eNode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'but why?'\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"n\"\u003elist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eiterate\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003evalue\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e6. Add \u003ccode\u003eprint\u003c/code\u003e method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eprint\u003c/code\u003e method should print each node value on its own line. Use the\n\u003ccode\u003eiterate\u003c/code\u003e method in the \u003ccode\u003eprint\u003c/code\u003e method.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.print()\n=\u0026gt; 'hi again'\n=\u0026gt; 'but why?'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e7. Add \u003ccode\u003efind(target)\u003c/code\u003e method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003efind\u003c/code\u003e method searches for a \u003ccode\u003eNode\u003c/code\u003e with the \u003ccode\u003etarget\u003c/code\u003e value. If the \u003ccode\u003eNode\u003c/code\u003e\nis found, it returns that \u003ccode\u003eNode\u003c/code\u003e. Otherwise, it returns a falsy value such as\n\u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e. Use the \u003ccode\u003eiterate\u003c/code\u003e method to keep your code short and DRY.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.find('but why?')\n=\u0026gt; Node with value 'but why?'\n\nlist.find('tell me secrets')\n=\u0026gt; null or nil, etc.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e8. Add \u003ccode\u003eaddFirst(node)\u003c/code\u003e method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eaddFirst\u003c/code\u003e takes a Node as an argument and adds it as the \u003ccode\u003ehead\u003c/code\u003e of the Linked\nList. No existing Nodes are removed.\u003c/p\u003e\n\n\u003cp\u003eThis method adds only 1 Node to the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.addFirst(new Node('I am first now'))\nlist.print()\n=\u0026gt; 'I am first now'\n=\u0026gt; 'hi again'\n=\u0026gt; 'but why?'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e9. Add \u003ccode\u003eaddLast(node)\u003c/code\u003e method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eaddLast\u003c/code\u003e takes a Node as an argument and adds it at the end of the Linked List\n(i.e. it will be the tail). No existing Nodes are removed. The \u003ccode\u003eiterate\u003c/code\u003e method\ncan help you here.\u003c/p\u003e\n\n\u003cp\u003eThis method adds only 1 Node to the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.addLast(new Node('I am last'))\nlist.print()\n=\u0026gt; 'hi again'\n=\u0026gt; 'but why?'\n=\u0026gt; 'I am last'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e10. Add \u003ccode\u003eremoveFirst\u003c/code\u003e method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eremoveFirst\u003c/code\u003e removes the first (head) Node in the list and returns the node\nthat was removed.\u003c/p\u003e\n\n\u003cp\u003eHint: Try not to overthink this. Removing the head takes one line of code.\nYou'll need a little bit more code to handle returning the node that was\nremoved, however.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.removeFirst()\n=\u0026gt; Node with value 'hi again'\nlist.print()\n=\u0026gt; 'but why?'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e11. Add \u003ccode\u003eremoveLast\u003c/code\u003e method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eremoveLast\u003c/code\u003e removes the last (tail) Node in the list and returns the removed\nNode.\u003c/p\u003e\n\n\u003cp\u003eHint: The \u003ccode\u003eiterate\u003c/code\u003e method might be helpful here.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.removeLast()\n=\u0026gt; Node with value 'but why?'\nlist.print()\n=\u0026gt; 'hi again'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e12. Add \u003ccode\u003ereplace(index, node)\u003c/code\u003e to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eReplace the Node at the given \u003ccode\u003eindex\u003c/code\u003e with the given \u003ccode\u003enode\u003c/code\u003e. \u003ccode\u003ereplace\u003c/code\u003e should\nwork on all Node indexes. Nodes are zero-indexed.\u003c/p\u003e\n\n\u003cp\u003eDon't worry about handling invalid indexes, such as -1 or those that go beyond\nthe size of the list.\u003c/p\u003e\n\n\u003cp\u003eReturn the inserted Node.\u003c/p\u003e\n\n\u003cp\u003eHint: The \u003ccode\u003eiterate\u003c/code\u003e method might be helpful here. You may wish to modify it by\nadding the ability to count, or you can declare the count within \u003ccode\u003ereplace\u003c/code\u003e and\nupdate it in the callback passed to \u003ccode\u003eiterate\u003c/code\u003e. Or you can create an\n\u003ccode\u003eiterate_with_count\u003c/code\u003e method and use that (and that method can call the \u003ccode\u003eiterate\u003c/code\u003e\nmethod). So many options!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('one', new Node('two', new Node('three')))\nlist = new LinkedList(head)\nlist.replace(0, '1')\n=\u0026gt; Node with value '1'\n// list is now '1' -\u0026gt; 'two' -\u0026gt; 'three'\n\nlist.replace(1, '2')\n=\u0026gt; Node with value '2'\n// list is now '1' -\u0026gt; '2' -\u0026gt; 'three'\n\nlist.replace(2, '3')\n=\u0026gt; Node with value '3'\n// list is now '1' -\u0026gt; '2' -\u0026gt; '3'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e13. Add \u003ccode\u003einsert(index, node)\u003c/code\u003e to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eInsert the given \u003ccode\u003enode\u003c/code\u003e at the given \u003ccode\u003eindex\u003c/code\u003e in the \u003ccode\u003eLinkedList\u003c/code\u003e. No nodes\nshould be removed or replaced! This method inserts only 1 Node into the list.\u003c/p\u003e\n\n\u003cp\u003eEnsure you can handle all valid \u003ccode\u003eindex\u003c/code\u003e values: 0 to last index + 1 in list.\nDon't worry about invalid index values.\u003c/p\u003e\n\n\u003cp\u003eHint: \u003ccode\u003eiterate\u003c/code\u003e may be helpful once more.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('one', new Node('two', new Node('three')))\nlist = new LinkedList(head)\nlist.insert(1, new Node('inserted at 1'))\n// list is now 'one' -\u0026gt; 'inserted at 1' -\u0026gt; 'two' -\u0026gt; 'three'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('one', new Node('two', new Node('three')))\nlist = new LinkedList(head)\nlist.insert(0, new Node('inserted at 0'))\n// list is now 'inserted at 0' -\u0026gt; 'one' -\u0026gt; 'two' -\u0026gt; 'three'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('one', new Node('two', new Node('three')))\nlist = new LinkedList(head)\nlist.insert(3, new Node('inserted at 3'))\n// list is now 'one' -\u0026gt; 'two' -\u0026gt; 'three' -\u0026gt; 'inserted at 3'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e14. Add \u003ccode\u003eremove(index)\u003c/code\u003e to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eRemove the \u003ccode\u003eNode\u003c/code\u003e at the given \u003ccode\u003eindex\u003c/code\u003e and return the removed \u003ccode\u003eNode\u003c/code\u003e. Don't\nworry about invalid indices, such as -1 or those that go beyond the size of the\nlist.\u003c/p\u003e\n\n\u003cp\u003eHint: Good ol' \u003ccode\u003eiterate\u003c/code\u003e...again!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('one', new Node('two', new Node('three')))\nlist = new LinkedList(head)\n\nlist.remove(1)\n=\u0026gt; Node with value 'two'\n// list is now 'one' -\u0026gt; 'three'\n\nlist.remove(1)\n=\u0026gt; Node with value 'three'\n// list is now 'one'\n\nlist.remove(0)\n=\u0026gt; Node with value 'one'\n// list is empty :(\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e15. Add \u003ccode\u003eclear\u003c/code\u003e to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eClear the linked list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('one', new Node('two', new Node('three')))\nlist = new LinkedList(head)\n\nlist.clear()\nlist.print()\n// nothing happens because it's empty\nlist.head\n=\u0026gt; null or nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g5e80b7328d031153072ea2f54798081d"},{"id":484258,"title":"Day 2: Big O Linked List Quiz","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"g0c68d084a26be944b214a3a9941cd838","questionCount":4,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":4.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eIn this quiz we'll ask you to calculate the time complexity for several of the methods declared inside the LinkedList class.\u003c/p\u003e","exportId":"gda36189d8b467f85c1706bef52e5b1ae"},{"id":484259,"title":"Day 3: Underneath Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"arrays-underneath\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/arrays-underneath\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/arrays-underneath/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain how programming languages implement arrays\u003c/li\u003e\n\u003cli\u003eIdentify the runtime complexity of common array methods in Big O notation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhile you may be familiar with arrays, chances are you have not considered what\nhappens when our computer either manipulates an array by adding or removing\nelements, or retrieves information from an array. In this lesson, we'll discuss\nwhat happens when we retrieve or manipulate data in an array.\u003c/p\u003e\n\n\u003cp\u003eUnderstanding how familiar data structures work under the hood will give you a\nbetter sense of what's happening at a low level, as well as some clues as to how\nto determine the Big O of algorithms that use these data structures.\u003c/p\u003e\n\n\u003ch2\u003eArrays Under the Hood\u003c/h2\u003e\n\n\u003cp\u003eWhen we initialize an array in a programming language, the language allocates\nspace in memory for your array, and then points that starting variable to that\naddress in memory. Then the program assigns a fixed amount of memory for each\u003cbr\u003e\nelement.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/objects-tenElementArray.gif\" alt=\"ten element array\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's say my array say starts at memory address 100. Assume that the programming\nlanguage allocates eight bits of memory for each element in the array, and that\nit allocates enough space for ten elements evenly spaced in memory.\u003c/p\u003e\n\n\u003cp\u003eNow, let's try to think through how a computer program retrieves an element at a\nspecific index.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003emyAarr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ea\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyAarr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ea\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen we initialize the array and assign the letter \u003ccode\u003e\"a\"\u003c/code\u003e as the first element,\nthe programming language assigns the letter \u003ccode\u003e\"a\"\u003c/code\u003e to a specific space in memory.\nIn our example, address 100. So then, when we call \u003ccode\u003emyArr[0]\u003c/code\u003e all the program\nhas to do is go to address 100, and retrieve the element.\u003c/p\u003e\n\n\u003cp\u003eSo now, what do you think happens if we call \u003ccode\u003emyArr[3]\u003c/code\u003e, to return what is in\nthat slot. If the \u003ccode\u003emyArr\u003c/code\u003e begins at address 100, and we allocate eight bits of\nspace for each, what address does the program go to to retrieve the element at\nindex 3?\u003c/p\u003e\n\n\u003cp\u003eIs there a formula that we can come up with for retrieval? Yep!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e100 + 3 * 8 = 124\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOur programming language knows that if eight bits are allocated to each element,\nand then to retrieve an element at a specific index, the program simply visits\nan address by using the following formula:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ememoryLocationOfElement = arrayStartAddress + indexNumber * bitAllocation\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eManipulating Array Elements\u003c/h3\u003e\n\n\u003cp\u003eNow that we talked about retrieving elements from an array, let's talk about\nremoving elements from an array.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e48\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 9\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// [1, 24, 48]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePerforming an operation like \u003ccode\u003epop\u003c/code\u003e is fairly simple. Let's assume that our array\nbegins at memory address 100:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ememory address\u003c/th\u003e\n\u003cth\u003e100\u003c/th\u003e\n\u003cth\u003e108\u003c/th\u003e\n\u003cth\u003e116\u003c/th\u003e\n\u003cth\u003e124\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr.pop\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003eX\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eRemoving from the end of the array is not so bad. But removing an element from\nthe beginning involves a lot more:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ememory address\u003c/th\u003e\n\u003cth\u003e100\u003c/th\u003e\n\u003cth\u003e108\u003c/th\u003e\n\u003cth\u003e116\u003c/th\u003e\n\u003cth\u003e124\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr.shift\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003eX\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eLooking at the chart above, shifting involves moving \u003cstrong\u003eevery\u003c/strong\u003e remaining element\nto a new space in memory. The cost is equal to the number of elements in the\narray. So the time complexity of shifting is Big O(n). Adding elements to the\nbeginning of the array also will cost Big O(n), as every subsequent element would\nhave to move to different spot in memory:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ememory address\u003c/th\u003e\n\u003cth\u003e100\u003c/th\u003e\n\u003cth\u003e108\u003c/th\u003e\n\u003cth\u003e116\u003c/th\u003e\n\u003cth\u003e124\u003c/th\u003e\n\u003cth\u003e132\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003eX\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr.unshift(5)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eSo \u003ccode\u003eunshift\u003c/code\u003e is Big O(n) and \u003ccode\u003eshift\u003c/code\u003e is Big O(n). However, \u003ccode\u003epop\u003c/code\u003e and accessing\nelements using their index positions take the same amount of time regardless the\nsize of the array. That is, the time complexity is Big O(1), meaning that the\ncost of the operation does not depend on the number of elements in the array.\u003c/p\u003e\n\n\u003ch3\u003eArray Size\u003c/h3\u003e\n\n\u003cp\u003eRemember that to retrieve information from an array, we simply need to apply the\nformula \u003ccode\u003estartingAddress + index * bitAllocation\u003c/code\u003e and go to the corresponding\naddress. One problem that occurs with having all of these contiguous elements\nis that we must allocate a specific amount of space — say enough space for six\nelements. What happens when we want to add an seventh element?\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ememory address\u003c/th\u003e\n\u003cth\u003e100\u003c/th\u003e\n\u003cth\u003e108\u003c/th\u003e\n\u003cth\u003e116\u003c/th\u003e\n\u003cth\u003e124\u003c/th\u003e\n\u003cth\u003e132\u003c/th\u003e\n\u003cth\u003e140\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003e32\u003c/td\u003e\n\u003ctd\u003esong.mp3\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr.push(5)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003e32\u003c/td\u003e\n\u003ctd\u003esong.mp3\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eDo you see our problem? We want to push another element, but something else is\non those eight bits. If we move our new element to a different location, our\nformula for retrieving elements no longer works. Instead, we copy our array into\na new location in memory where there is enough space. However, notice that the\ncost of doing this is Big O(n), as we must incur a cost for each element we copy\nover.\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003enew memory address\u003c/th\u003e\n\u003cth\u003e300\u003c/th\u003e\n\u003cth\u003e308\u003c/th\u003e\n\u003cth\u003e316\u003c/th\u003e\n\u003cth\u003e324\u003c/th\u003e\n\u003cth\u003e332\u003c/th\u003e\n\u003cth\u003e340\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003e32\u003c/td\u003e\n\u003ctd\u003eX\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr.push(5)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003e32\u003c/td\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003ch3\u003eSummary\u003c/h3\u003e\n\n\u003cp\u003eWe saw in this section that some of the strengths and weaknesses of using an\narray. Retrieving elements by index and adding elements to the end of the array\nhas a time complexity of Big O(1), while adding or removing elements at the\nbeginning of an array is Big O(n). We also saw that because operations in our\narray rely on using neighboring locations in memory, we can run out of space.\u003c/p\u003e\n\n\u003cp\u003eHere's a summary of the Big O of common array methods:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMethod\u003c/th\u003e\n\u003cth\u003eBig O\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eAccess\u003c/td\u003e\n\u003ctd\u003eO(1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSearch\u003c/td\u003e\n\u003ctd\u003eO(n)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInsertion (end)\u003c/td\u003e\n\u003ctd\u003eO(1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInsertion (beginning)\u003c/td\u003e\n\u003ctd\u003eO(n)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDeletion (end)\u003c/td\u003e\n\u003ctd\u003eO(1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDeletion (beginning)\u003c/td\u003e\n\u003ctd\u003eO(n)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eFor problems that rely on adding or removing elements from the beginning, you're\nbetter off using a linked list, as we saw in a previous lesson. Arrays are quick\nfor accessing elements when you know their index position, and for adding and\nremoving items from the end.\u003c/p\u003e","exportId":"day-3-underneath-arrays"},{"id":484260,"title":"Day 4: Underneath Hashes","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"hash-table\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/hash-table\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/hash-table/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain how programming languages implement hashes\u003c/li\u003e\n\u003cli\u003eIdentify the runtime complexity of common hash methods in Big O notation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eNow it's time to formally introduce you to the hash. When we talk about hashes\nin this lesson, we're referring to the general data structure known as a \u003ccode\u003eHash\u003c/code\u003e\nin Ruby, as an \u003ccode\u003eObject\u003c/code\u003e in JavaScript, a \u003ccode\u003eDictionary\u003c/code\u003e in Python, and so on.\nJust about every language has an implementation of this data structure!\u003c/p\u003e\n\n\u003cp\u003eHashes are used for storing key-value pairs. This allows for quick retrieval of\ndata — the Big O for accessing a value in a hash is constant time: O(1). But how\ndoes it work under the hood?\u003c/p\u003e\n\n\u003ch2\u003eHash Functions\u003c/h2\u003e\n\n\u003cp\u003eFor a hash to work, we use a \u003cstrong\u003ehash function\u003c/strong\u003e to determine where in memory to\nstore information related to that key. Later, we use the same hash function to\ndetermine where to search for a given key.\u003c/p\u003e\n\n\u003cp\u003eOne way to think about how hashes relate to hash functions is thinking about how\nwe find a book in a library. We do this by telling a librarian the title and\nauthor of a book, and the librarian tells us precisely where to find the book.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3-us-west-2.amazonaws.com/curriculum-content/algorithms/dewey-decimal-arrangement.jpg\" alt=\"library book example\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn this analogy, our \u003cstrong\u003ekey\u003c/strong\u003e is the title and author of the book, which we can\nuse to determine the appropriate card catalog id. The card catalog id (which\ncomes from the Dewey Decimal System above — think of that as our \u003cstrong\u003ehash\nfunction\u003c/strong\u003e) tells us exactly where to find the book. If the book is there, we\nhave our book and all of the information inside. If nothing is there, there is\nno book.\u003c/p\u003e\n\n\u003cp\u003eLet's start by inserting some books into a hash table structure. We have the\nfollowing books: \u003cem\u003eThe Bible\u003c/em\u003e, \u003cem\u003eAlexander Hamilton\u003c/em\u003e, \u003cem\u003eIntroduction to Physics\u003c/em\u003e,\nand \u003cem\u003eWar and Peace\u003c/em\u003e. Based on our hash function, we store the books in the\nfollowing locations:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003cth style=\"text-align: center\"\u003eBook\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e000\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e100\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e200\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eThe Bible\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e300\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e400\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e500\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eIntroduction to Physics\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e600\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e700\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e800\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eWar and Peace\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e900\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eAlexander Hamilton\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eYou will see that while the Dewey Decimal System assigns us one of a range of\nnumbers, we adapt its formula to store each book at the lowest number possible\nfor each section. So based on that, The Bible is assigned 200, because it falls\nunder religion. Accordingly, we also assign Introduction to Physics number 500,\nWar and Peace 800 and Alexander Hamilton 900.\u003c/p\u003e\n\n\u003cp\u003eBecause we assigned each of our books according to this formula, when we\nretrieve a book, we do not need to look through every index to find our books.\nInstead, we just look at the place of the book based on the Dewey Decimal\nSystem.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/geroge-peabody-library-horizontal-large-gallery.jpg\" alt=\"A massive library\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can \u003cem\u003ealso\u003c/em\u003e use our formula to tell us both where to insert a book, as well as\nto know if a book exists in our collection. If someone asks us if \u003cem\u003eEloquent\nJavascript\u003c/em\u003e is in our hash table, we simply visit our index at location 600, see\nthat nothing is there, and can confidently reply that the book is not located\nthere.\u003c/p\u003e\n\n\u003cp\u003eWith a hash table, we look at the data in our key, run it through our hash\nfunction to determine where to place the element and associated data. Later, we\nalso use the information in the key, run it through our hash function to tell us\nwhere to retrieve this data. With this process, we achieve our goal of \u003cstrong\u003eO(n)\u003c/strong\u003e\n(constant time) for inserting and retrieving elements, irrespective of the\nnumber of elements in our collection.\u003c/p\u003e\n\n\u003ch3\u003eHash Table Collisions\u003c/h3\u003e\n\n\u003cp\u003eOur hash table currently looks like the following:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003cth style=\"text-align: center\"\u003eBook\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e000\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e100\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e200\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eThe Bible\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e300\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e400\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e500\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eIntroduction to Physics\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e600\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e700\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e800\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eWar and Peace\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e900\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eAlexander Hamilton\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eWhat happens if we need to store another book, this time \u003cem\u003eIntroduction to\nBiology\u003c/em\u003e? Well, our adapted Dewey Decimal System tells us to store the key at\nprecisely index 500. The only problem is that the slot is already filled. We\nhave just encountered a \u003cstrong\u003ecollision\u003c/strong\u003e. A collision is where our hash function\noutputs an index that is already assigned to another key in our hash table.\u003c/p\u003e\n\n\u003cp\u003eTo handle our collision, we apply a technique called \u003cem\u003eseparate chaining\u003c/em\u003e. With\nseparate chaining, each index points to a linked list. So in our example above\nwe could place both \u003cem\u003eIntroduction to Physics\u003c/em\u003e and \u003cem\u003eIntroduction to Biology\u003c/em\u003e in\nthe place linked list is located at index 500. Applying the separate chaining\ntechnique, our hash table looks like the following:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003cth style=\"text-align: center\"\u003eBook\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e000\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e100\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e200\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e[ \"\u003cem\u003eThe Bible\u003c/em\u003e\" ]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e300\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e400\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e500\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e[ \"\u003cem\u003eIntroduction to Physics\u003c/em\u003e\", \"\u003cem\u003eIntroduction to Biology\u003c/em\u003e\" ]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e600\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e700\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e800\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e[ \"\u003cem\u003eWar and Peace\u003c/em\u003e\" ]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e900\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e[ \"\u003cem\u003eAlexander Hamilton\u003c/em\u003e\" ]\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eIn the worst case scenario, all of our inserted elements collide, and we have to\ntraverse a linked list of length \u003ccode\u003en\u003c/code\u003e to retrieve an element, so we have \u003cstrong\u003eO(n)\u003c/strong\u003e\nruntime. However, on average collisions do not occur, so we achieve constant\ntime for lookup, insertion and deletion \u003cem\u003eon average\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003eIdentifying Good Hash Functions\u003c/h3\u003e\n\n\u003cp\u003eProgramming languages that implement hashes use a hash function that minimizes\nthe chance of a collision occurring. Some properties of a good hash function are:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eMakes use of all information provided by a given key to maximize the number\nof possible hash values. Note that the real Dewey Decimal System does a\nbetter job at this: different titles by different authors map to different\nvalues.\u003c/li\u003e\n\u003cli\u003eMaps similar keys to very different values - making collisions much less likely.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we learned about \u003cstrong\u003ehash tables\u003c/strong\u003e. Hash tables use a \u003cstrong\u003ehash\nfunction\u003c/strong\u003e to output a \u003cstrong\u003ehash value\u003c/strong\u003e. The hash value determines where to place\nthe element in memory. Because a hash function produces the same hash value for\na given element, it also gives us fast lookup time to retrieve an element.\u003c/p\u003e\n\n\u003cp\u003eWhen a hash function outputs the same hash value for two different elements, we\nhave a collision. We can resolve a collision by employing separate chaining\nwhere each hash value points to a linked list, and when there is a collision, we\nattach the element to the linked list.\u003c/p\u003e\n\n\u003cp\u003eBecause retrieving elements from a linked list is O(n), programming languages\nuse hash functions that avoid collisions as much as possible.\u003c/p\u003e\n\n\u003cp\u003eWhen you use a hash to solve an algorithm problem, it's useful to know how\nhashes work under the hood in order to understand their runtime. Here's a\nsummary of the Big O of common hash methods. While collisions can occur that may\nresult in worse performance than listed below, we can generalize the runtime as\nfollows:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMethod\u003c/th\u003e\n\u003cth\u003eBig O\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eAccess (looking for a value with a known key)\u003c/td\u003e\n\u003ctd\u003eO(1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSearch (looking for a value without a known key)\u003c/td\u003e\n\u003ctd\u003eO(n)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInsertion\u003c/td\u003e\n\u003ctd\u003eO(1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDeletion\u003c/td\u003e\n\u003ctd\u003eO(1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e","exportId":"day-4-underneath-hashes"},{"id":484262,"title":"Day 5: Data Structure Quiz","type":"Quizzes::Quiz","indent":1,"locked":false,"assignmentExportId":"gff16d830320518df468e329ff35deced","questionCount":3,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":3.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eIn this quiz we'll present different programming scenarios that can be solved with several different data structures. Your job will be to choose the best one for the job based on the requirements! Pull from your Big O knowledge!\u003c/p\u003e\n\u003cp\u003eAssume all answer options are valid choices (no trick questions), and that all of the necessary information about the scenario has been presented to you.\u003c/p\u003e","exportId":"g9c0a669888e37fe86781a4d349e3f6c0"},{"id":484264,"title":"Bonus Algorithm: Recursive Reverse a String","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"recursive-string-reverse\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/recursive-string-reverse/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/recursive-string-reverse\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/recursive-string-reverse/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithm problems using recursion\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFor this task, you'll need to reverse a string...\u003cstrong\u003erecursively\u003c/strong\u003e! Your method\nwill receive one argument, a string, and be expected to output that string with\nits letters in reverse order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: \"hi\"\nOutput: \"ih\"\n\nInput: \"catbaby\"\nOutput: \"ybabtac\"\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eDo not call any type of built-in reverse method!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g7249e650693bc806b832a709c81fa29b"},{"id":484265,"title":"Bonus: Modify the Linked List to Track Tail and Size","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"linked-list-with-tail-and-size\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/linked-list-with-tail-and-size/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/linked-list-with-tail-and-size\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/linked-list-with-tail-and-size/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eImplement a common methods of a linked list class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eToday, we'll be modifying the \u003ccode\u003eLinkedList\u003c/code\u003e class we created earlier to track its\n\u003ccode\u003etail\u003c/code\u003e and \u003ccode\u003esize\u003c/code\u003e. You can use your solution or ours as starter code. We've\nincluded ours in the starter files if you wish to use it.\u003c/p\u003e\n\n\u003cp\u003eNote that this is a pretty strange implementation of a linked list and there are\nthose who would say: \"Ermahgerd! What have you done?!\" We're trying to stretch\nour skills here: that's what we've done!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/linked-list-with-tail-and-size/linked_list.png\" alt=\"Linked List\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eRefresher on Linked Lists\u003c/h2\u003e\n\n\u003cp\u003eA \u003cstrong\u003elinked list\u003c/strong\u003e is a data structure consisting of \u003cstrong\u003enodes\u003c/strong\u003e. The \u003ccode\u003ehead\u003c/code\u003e node\ndenotes the start of the list. Each node has two attributes: \u003ccode\u003evalue\u003c/code\u003e and \u003ccode\u003enext\u003c/code\u003e.\n\u003ccode\u003evalue\u003c/code\u003e stores the data we might be interested in retrieving, while \u003ccode\u003enext\u003c/code\u003e\npoints to the next node in the list. The last node, called the \u003ccode\u003etail\u003c/code\u003e, in the\nlist points to nothing (e.g. \u003ccode\u003enext\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e), and that's how we know it's the\nend!\u003c/p\u003e\n\n\u003cp\u003eWe can use another class called \u003ccode\u003eLinkedList\u003c/code\u003e to track the \u003ccode\u003ehead\u003c/code\u003e of the list.\u003c/p\u003e\n\n\u003ch2\u003eModify the \u003ccode\u003eLinkedList\u003c/code\u003e Class\u003c/h2\u003e\n\n\u003cp\u003eWe'll be tracking the \u003ccode\u003etail\u003c/code\u003e and \u003ccode\u003esize\u003c/code\u003e of the list. There are a number of ways\nto implement these features with varying time complexities. Create helper\nmethods if needed. Make sure you can explain to yourself and others why you\nchose the approach you took.\u003c/p\u003e\n\n\u003cp\u003eFor any method, such as adding or removing a Node, assume that only valid inputs\nwill be provided, such as valid indices.\u003c/p\u003e\n\n\u003cp\u003eAlso make the following assumptions:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUpon initialization of a new list, a user might provide a node that is already\nconnected to other nodes, i.e. the \u003ccode\u003ehead\u003c/code\u003e node being provided has a \u003ccode\u003enext\u003c/code\u003e\nattribute that points to another node, and that node might point to another\nnode.\u003c/li\u003e\n\u003cli\u003eAny time a node is added via any other method, such as \u003ccode\u003eadd_first\u003c/code\u003e or\n\u003ccode\u003einsert\u003c/code\u003e, that node is not yet connected to any other nodes, i.e. its \u003ccode\u003enext\u003c/code\u003e\nvalue is \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e or some other falsy value.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAs you modify the class, think about what the time complexity is for any methods\nyou add or modify.\u003c/p\u003e\n\n\u003cp\u003eWe've included all of the original tests in the test suites to ensure all of the\nmethods continue to work as expected as you modify them.\u003c/p\u003e\n\n\u003ch3\u003e1. Track the \u003ccode\u003etail\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd an attribute to \u003ccode\u003eLinkedList\u003c/code\u003e called \u003ccode\u003etail\u003c/code\u003e. When an empty list is\ninitialized, \u003ccode\u003etail\u003c/code\u003e should be a falsy value, such as \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e. As nodes\nare added and removed, the \u003ccode\u003etail\u003c/code\u003e should be updated to reflect the current\n\u003ccode\u003etail\u003c/code\u003e. Think about which methods in the class may affect the \u003ccode\u003etail\u003c/code\u003e of the\nlist.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new LinkedList\nlist.tail\n=\u0026gt; null or nil\n\nnode = new Node('it meee')\nlist.add_first(node)\nlist.tail\n=\u0026gt; Node with value 'it meee'\n\nlist.remove_first\n=\u0026gt; Node with value 'it meee'\nlist.tail\n=\u0026gt; null or nil\n\nanother_list = new LinkedList(node)\nanother_list.tail\n=\u0026gt; Node with value 'it meee'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e2. Track the \u003ccode\u003esize\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd an attribute to \u003ccode\u003eLinkedList\u003c/code\u003e called \u003ccode\u003esize\u003c/code\u003e. When an empty list is\ninitialized, \u003ccode\u003esize\u003c/code\u003e should be \u003ccode\u003e0\u003c/code\u003e. As nodes are added and removed, the \u003ccode\u003esize\u003c/code\u003e\nshould be updated to reflect the current \u003ccode\u003esize\u003c/code\u003e. Think about which methods in\nthe class may affect the \u003ccode\u003esize\u003c/code\u003e of the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new LinkedList\nlist.size\n=\u0026gt; 0\n\nnode = new Node('it meee')\nlist.add_first(node)\nlist.size\n=\u0026gt; 1\n\nlist.remove_first\n=\u0026gt; Node with value 'it meee'\nlist.size\n=\u0026gt; 0\n\nlist.add_first(node)\nlist.add_first(new Node('it not meee'))\nlist.size\n=\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e3. Super Bonus Refactor\u003c/h3\u003e\n\n\u003cp\u003eOnce you can track the \u003ccode\u003etail\u003c/code\u003e and \u003ccode\u003esize\u003c/code\u003e successfully, go through the\n\u003ccode\u003eLinkedList\u003c/code\u003e methods and see if you can refactor any to be more time-efficient.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, and explain your solution, and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g5a806e28efc70b3c62c4125d6eecf9c7"},{"id":484268,"title":"Bonus: Build a Doubly Linked List","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"doubly-linked-list\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/doubly-linked-list/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/doubly-linked-list\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/doubly-linked-list/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a doubly linked list data structure\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a doubly linked list class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eToday we'll be implementing a \u003cstrong\u003edoubly linked list\u003c/strong\u003e. A doubly linked list is\nlike a singly-linked list, except it has an extra attribute on each node: a\n\u003ccode\u003eprev\u003c/code\u003e pointer that points to the previous node.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/doubly-linked-list/linked_list.png\" alt=\"Linked List\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eImplement a Doubly Linked List\u003c/h2\u003e\n\n\u003cp\u003eFor this challenge, assume that only one node is added at a time, including upon\ninitialization of a new list.\u003c/p\u003e\n\n\u003ch3\u003e1. Modify the \u003ccode\u003eNode\u003c/code\u003e Class\u003c/h3\u003e\n\n\u003cp\u003eEach node should have a pointer called \u003ccode\u003eprev\u003c/code\u003e that points to the node that comes\nbefore it. If no node comes before it, it should be a falsy value, such as\n\u003ccode\u003enull\u003c/code\u003e in JS or \u003ccode\u003enil\u003c/code\u003e in Ruby.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003enode = new Node('first')\nnode.prev\n=\u0026gt; nil or null\n\nnode.prev = new Node('zeroth')\nnode.prev\n=\u0026gt; Node with value 'zeroth'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e2. Modify the \u003ccode\u003eLinkedList\u003c/code\u003e Class\u003c/h3\u003e\n\n\u003cp\u003eLook through the methods and determine which need to be modified in order to\nensure that a node's \u003ccode\u003eprev\u003c/code\u003e attribute always points to the correct Node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new LinkedList\nlist.add_first(new Node('zeroth'))\nlist.head\n=\u0026gt; Node with value 'zeroth'\nlist.head.prev\n=\u0026gt; nil or null\n\nlist.add_first(new Node('less than zero'))\nlist.head\n=\u0026gt; Node with value 'less than zero'\nlist.head.next\n=\u0026gt; Node with value 'zeroth'\nlist.head.next.prev\n=\u0026gt; Node with value 'less than zero'\n\nlist.remove_first\nlist.head\n=\u0026gt; Node with value 'zeroth'\nlist.head.prev\n=\u0026gt; nil or null\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included code from the original\n\u003ccode\u003eLinkedList\u003c/code\u003e implementation. You may also copy and paste your own.\u003c/p\u003e\n\n\u003cp\u003eWe've also included the original \u003ccode\u003eLinkedList\u003c/code\u003e tests, so you can ensure that your\ncode still functions correctly.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g348acf77fc52fc7948ef62ce1da45e10"}]},{"id":49410,"name":"Phase 3 Pairing Exercise","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gb1e2fb2ad7ab799f32a3806f1ee7fad9","items":[{"id":484273,"title":"Pair Programming","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dsa-pair-programming-phase-3\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-pair-programming-phase-3\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-pair-programming-phase-3/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse pair programing to solve an algorithm problem\u003c/li\u003e\n\u003cli\u003ePractice pair programming techniques\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe recommend completing this exercise in weeks 2 or 3 of Phase 3.\u003c/p\u003e\n\n\u003cp\u003eFor this activity, you will pair up and complete a challenge from this Phase\npair-programming style! In other words, one of you will be the driver and the\nother will be the navigator, and then you will switch. Remember to be patient\nwith one another and to keep the lines of communication open. If one of you\nbecomes quiet for an extended period of time, ask a question to help keep things\nmoving.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eChoose a problem from this Phase that you were unable to solve, have not tried\nyet, or struggled with a lot\u003c/li\u003e\n\u003cli\u003eIf you are the navigator, you will guide the driver by doing the following:\n\n\u003cul\u003e\n\u003cli\u003eCommunicate in simple and small steps what code should be written\u003c/li\u003e\n\u003cli\u003eExplain why you're making those decisions\u003c/li\u003e\n\u003cli\u003eInform the driver when they're misunderstanding your directions or are\nmaking syntactical errors\u003c/li\u003e\n\u003cli\u003ePoint out any improvements that can be made to the code\u003c/li\u003e\n\u003cli\u003eIf time allows and problem has been solved, guide the driver through a\nrefactor to improve the code\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eIf you are the driver, you will write code according to the navigator's instructions:\n\n\u003cul\u003e\n\u003cli\u003eAsk questions when you don't understand the what or the why\u003c/li\u003e\n\u003cli\u003eIf you disagree with a decision, diplomatically state your disagreement and why\u003c/li\u003e\n\u003cli\u003eBe the typist\u003c/li\u003e\n\u003cli\u003eStay focused on the current task\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"pair-programming"}]},{"id":49412,"name":"Week 8: Searching","status":"unlocked","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g521b906357d779093f47d7b5032fd94f","items":[{"id":484276,"title":"Days 1-3: Binary Search","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"binary-search\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/binary-search/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/binary-search\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/binary-search/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the binary search algorithm and its use cases\u003c/li\u003e\n\u003cli\u003eImplement the binary search algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBinary search is an algorithm that searches a sorted list for a target value. It\nis typically implemented using recursion. For a sorted list, it is faster than\niterating over the entire list until the target is found, since a binary search\nwill not visit every single element in the list. Keep in mind that we perform\nbinary searches on \u003cstrong\u003esorted datasets only\u003c/strong\u003e!\u003c/p\u003e\n\n\u003ch2\u003eHow Does It Work?\u003c/h2\u003e\n\n\u003cp\u003eHopefully, you are old enough to remember the phone book (a large\nalphabetically-ordered directory of businesses and residents of a county or town\nand their phone numbers) because we're about to dive deep into its pages!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/binary-search/phone_book.jpeg\" alt=\"Phone Book\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's imagine we're searching for Deirdre Xanadu and we're trying to find the\npage with the \"X\" names (let's pretend there's only one page of them). Since\nDeirdre's last name starts with an \"X\", she'll probably be close to the end of\nthe phonebook. With iterative search, we can start at page 1 or the last page,\nand look at every page until we find \"Xanadu\". Starting at page 1 will be quick\nif there are barely any people whose last names start with the letters \"A\"\nthrough \"X\", and starting at the last page will only be quick if barely any\nresidents' last names start with letters \"Z\" through \"X\". In the worst case,\nDeirdre will be on the last page or first page, depending on where we start our\nsearch, and we will have visited every page.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/binary-search/binary_search.gif\" alt=\"Binary Search\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNow let's use a binary search. Instead of starting on the first or last page, we\nstart in the middle of the book. Let's say the last names on this page start\nwith \"M\". \"M\" comes before \"X\", so we take the second half of the book in our\nhands, locate the middle page of that portion, and go straight there. Let's say\nwe land on the page of \"Y\" names. \"X\" comes before \"Y\", so we take the part of\nthe book with \"M\" names up to the part with the \"Y\" names in our hands, find the\nmiddle and go there. Let's say we land on \"X\": we can check that page for\nDeirdre Xanadu. We found our friend without going to every page!\u003c/p\u003e\n\n\u003cp\u003eHere's a summary of the process we just used to find Xanadu:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eGo to middle of phone book\nLast names start with \"M\"\nIs \"M\" == \"X\":\n  No.\nIs \"M\" \u0026lt; \"X\":\n  Yes. Need to search half going from \"M\" to \"Z\".\n\nGo to middle of portion of phone book (\"M\" to \"Z\"):\nLast names start with \"Y\"\nIs \"Y\" == \"X\":\n  No.\nIs \"Y\" \u0026lt; \"X\":\n  No. Need to search first half of portion from \"M\" to \"Y\"\n\nGo to middle of portion of phone book (\"M\" to \"Y\")\nLast names start with \"X\"\nIs \"X\" == \"X\"\n  Yes! Find Xanadu's entry!\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFrom the above example, you may notice that we keep dividing the input into two\nparts: a left side containing everything that comes before the middle, and a\nright side containing everything after the middle. We then check if the target\nvalue we're searching for is less or more than the middle. If the target is less\nthan the middle value, we search the left side. If it's more than the middle, we\nsearch the right side. As we search, our input gets smaller and smaller until we\neither find the target or there is nothing left to search.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at another example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eList: [1, 2, 3, 4, 5]\nTarget: 1\n\nMiddle: 3\nIs Middle == Target:\n  No.\nIs Middle \u0026lt; Target:\n  No.\nLeft: [1, 2]\nSearch Left for Target\n\nMiddle: 2\nIs Middle == Target:\n  No.\nIs Middle \u0026lt; Target:\n  No.\nLeft: [1]\nSearch Left for Target\n\nMiddle: 1\nIs Middle == Target:\n  Yes! Return true\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImplement a Binary Search That Returns True or False\u003c/h2\u003e\n\n\u003cp\u003eLet's try something different today. Below you'll find pseudocode for binary\nsearch. Your job is to remove the pseudo part! Assume we're only searching for\nintegers.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction binary_search(array, target):\n  return false if array is empty\n\n  initialize integer variable middle with middle index of input array\n  initialize integer variable middle_value with middle value from array\n\n  return true if middle_value == target\n\n  if middle_value \u0026gt; target:\n    return binary_search(left half of input, target)\n  else:\n    return binary_search(right half of input, target)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd here are some test cases to consider:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: arr = [1, 2, 3], target = 3\nOutput: true\n\nInput: arr = [3, 5, 9], target = 10\nOutput: false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce you've got that working, take a moment to think. What is the worst-case\ntime complexity for this algorithm? How does that compare to an iterative\nsearch. Why does this only work with sorted inputs?\u003c/p\u003e\n\n\u003cp\u003eAlso take some time to plot out what's happening on paper using a small input as\nan example. Maybe try to plot the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eInput: \u003ccode\u003earr\u003c/code\u003e: \u003ccode\u003e[-10, 4, 9, 30, 31]\u003c/code\u003e, \u003ccode\u003etarget\u003c/code\u003e: \u003ccode\u003e30\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eInput: \u003ccode\u003earr\u003c/code\u003e: \u003ccode\u003e[1, 2, 3]\u003c/code\u003e, target: \u003ccode\u003e5\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eBonus: Return the Index of the Target\u003c/h2\u003e\n\n\u003cp\u003eCan you modify the algorithm to return the index of the target? If the target\nisn't in the input Array, return -1. For the bonus, copy your code from earlier\ninto the function called \u003ccode\u003ebinary_search_index\u003c/code\u003e/\u003ccode\u003ebinarySearchIndex\u003c/code\u003e, and then\nmodify it. That way all of the tests will run correctly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: arr = [1, 2, 3], target = 1\nOutput: 0\n\nInput: arr = [4, 7, 20], target = 100\nOutput: -1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g15a31ff7f4e18acc344f69a66f76ddf0"},{"id":484279,"title":"Day 4: What Is a Binary Search Tree?","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"binary-search-tree-manual\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/binary-search-tree-manual/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/binary-search-tree-manual\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/binary-search-tree-manual/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a binary search tree and its use cases\u003c/li\u003e\n\u003cli\u003eBuild a valid binary search tree\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/binary-search-tree-manual/valid_tree.png\" alt=\"Valid tree\"\u003e\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003ebinary search tree\u003c/strong\u003e (BST) is a data structure consisting of nodes: it's\ncalled a \u003cstrong\u003ebinary\u003c/strong\u003e search tree because each node has at most \u003cstrong\u003etwo\u003c/strong\u003e child\nnodes and because its nodes are arranged in a specific order that makes it\npossible to search quickly.\u003c/p\u003e\n\n\u003cp\u003eEach node has two attributes, often called \u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003eright\u003c/code\u003e, and an additional\nattribute that stores the \u003ccode\u003evalue\u003c/code\u003e of that node. The \u003ccode\u003eleft\u003c/code\u003e node contains a\n\u003ccode\u003evalue\u003c/code\u003e less than the parent node, and the \u003ccode\u003eright\u003c/code\u003e node contains a value that is\ngreater than or equal to the parent node. Any node that has at least one child\nnode is called a parent node, and any node that doesn't have any children is\ncalled a leaf node. The node at the top of the tree is called the root node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eleft_node = new Node(1)\n=\u0026gt; Node with value 1, left is null or nil, right is null or nil\n\nright_node = new Node(3)\n=\u0026gt; Node with value 3, left is null or nil, right is null or nil\n\n// Both left_node and right_node are leaf nodes since they have no children\n\nroot_node = new Node(2, left_node, right_node)\n=\u0026gt; Node with value 2, left is Node with value 1, right is Node with value 3\n// This is the top of the tree, so it is the root, and because it has children, it's also a parent node\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt is important to note that a BST is not the same as a binary tree. A BST is a\ntype of binary tree that follows specific rules, such as the ability to traverse\nit in such a way that its nodes' values are output in sorted order. A binary\ntree, in contrast, can have nodes that are in no specific order whatsoever.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ebst_in_order_traversal(bst_root)\n=\u0026gt; [-1, 3, 5, 10]\n\nbinary_tree_in_order_traversal(bt_root)\n=\u0026gt; [10, -20, 3, 0, 7]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImportant Terms\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eroot\u003c/strong\u003e: The top node of the tree, the one where we begin traversing the tree\n(similar to the zeroth element in an Array). May or may not have children.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eparent\u003c/strong\u003e: Any node that has at least one child, i.e. its \u003ccode\u003eleft\u003c/code\u003e or \u003ccode\u003eright\u003c/code\u003e\nattribute, or both, point to another node.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eleft\u003c/strong\u003e: An attribute on every node in the tree. The node will have a value\nlesser than its parent. If it doesn't point to another node, it will be null\nor nil or some other falsy value.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eright\u003c/strong\u003e: An attribute on every node in the tree. The node will have a value\ngreater than or equal to its parent. If it doesn't point to another node, it\nwill be null or nil or some other falsy value.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eleaf\u003c/strong\u003e: A node that has no children.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003esubtree\u003c/strong\u003e: Any time we see a parent node, other than the root node, we can refer\nto that node and all that branch off of it as a subtree. This is similar to\nhow you think of a portion of an Array as a subset of that Array.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eBST Rules\u003c/h2\u003e\n\n\u003cp\u003eFor a BST to be valid, it must adhere to certain rules:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eEach node has a maximum of two children (\u003ccode\u003eleft\u003c/code\u003e and/or \u003ccode\u003eright\u003c/code\u003e nodes).\u003c/li\u003e\n\u003cli\u003eEvery parent node contains a value that is greater than the value of its\n\u003ccode\u003eleft\u003c/code\u003e node and less than the value of its \u003ccode\u003eright\u003c/code\u003e node.\u003c/li\u003e\n\u003cli\u003eAll nodes of a left subtree are less than the root node.\u003c/li\u003e\n\u003cli\u003eAll nodes of a right subtree are greater than the root node.\u003c/li\u003e\n\u003cli\u003eAll subtrees are also valid BSTs. This is just another way of rephrasing\npoints 3 and 4 above.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIt's important to note that a tree with only a root node is considered valid. An\nempty tree is also valid. Weird, but true!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eroot = new Node(7)\nis_valid_bst(root)\n=\u0026gt; true\n\nis_valid_bst(null)\n=\u0026gt; true\n\nis_valid_bst(\"If this is true, then I've gone bananas!\")\n=\u0026gt; false\n// guess we've not gone bananas!\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eExamples of Valid BSTs\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/binary-search-tree-manual/valid_trees.png\" alt=\"valid trees\"\u003e\u003c/p\u003e\n\n\u003cp\u003eBoth of these binary trees are valid BSTs.\u003c/p\u003e\n\n\u003cp\u003eThe left tree is valid because:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eEvery node value to the left of the root is less than the value of the root.\nEvery node value to the right of the root is greater than the root's value.\u003c/li\u003e\n\u003cli\u003eThe same is true for all subtrees. For example, if we start at the node with\nvalue 5, the node to its left is less than 5 and the node to its right is\ngreater than 5.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe right tree is valid because:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAll of the nodes to the right of the root (value 5) are greater than the root.\u003c/li\u003e\n\u003cli\u003eAs we go down the right side, each right node is greater than its parent node.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eExamples of Invalid BSTs\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/binary-search-tree-manual/invalid_trees.png\" alt=\"invalid trees\"\u003e\u003c/p\u003e\n\n\u003cp\u003eBoth of these trees are invalid BSTs.\u003c/p\u003e\n\n\u003cp\u003eThe left tree is invalid because:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe node with value 11 is greater than the root node with value 10. The node\nwith value 11 is to the left of the root and needs to be less than 10 and\ngreater than 5.\u003c/li\u003e\n\u003cli\u003eThe node with value 1 is less than the root node. Since it's on the right side\nof the tree, it needs to be greater than 10 and less than 16. If we consider\nthe node 12 and all of its child nodes as a subtree, then we also notice that\nthe node with value of 1 needs to be greater than 12. In summary, this\nmisplaced node needs to be greater than 12 and less than 16.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe right tree is invalid because:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe node with value 25 is to the right of the node with value 30, meaning that\nits value must be greater than 30.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eImplement a BST\u003c/h2\u003e\n\n\u003cp\u003eFor this challenge, we'll be creating the \u003ccode\u003eNode\u003c/code\u003e class with the appropriate\nattributes and then we'll manually create valid BSTs to ensure that we\nunderstand the rules of BSTs. Our tests will check that your manually created\nBSTs are valid. We will not be creating a parent class to track the \u003ccode\u003eroot\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can optionally pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eFeel free to run our tests whenever you like for this challenge! It can be\nhard to validate a BST on your own, especially if you're a newbie.\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003eCreate the \u003ccode\u003eNode\u003c/code\u003e class\u003c/h3\u003e\n\n\u003cp\u003eA \u003ccode\u003eNode\u003c/code\u003e should have three attributes: \u003ccode\u003eleft\u003c/code\u003e, \u003ccode\u003eright\u003c/code\u003e, \u003ccode\u003evalue\u003c/code\u003e. When\ninitializing a new Node, it should take three arguments: \u003ccode\u003evalue\u003c/code\u003e, \u003ccode\u003eleft\u003c/code\u003e, and\n\u003ccode\u003eright\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen a new \u003ccode\u003eNode\u003c/code\u003e is initialized without a \u003ccode\u003eleft\u003c/code\u003e node, \u003ccode\u003eleft\u003c/code\u003e should be set to\nan appropriate falsy value by default. The same applies to the \u003ccode\u003eright\u003c/code\u003e node.\nExpect that every \u003ccode\u003eNode\u003c/code\u003e will be initialized with a \u003ccode\u003evalue\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003enode = new Node(7)\n=\u0026gt; Node: value = 7, left = null / nil, right = null / nil\n\nleft = new Node(4)\nright = new Node(10)\nroot = new Node(7, left, right)\n=\u0026gt; Node: value = 7, left = Node with value 4, right = Node with value 10\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eManually Create Valid BSTs\u003c/h3\u003e\n\n\u003cp\u003eLet's manually create some BSTs using the \u003ccode\u003eNode\u003c/code\u003e class we just declared. For\nthis part, we'll have several methods with unique names, and it'll be your job\nto create the BST and return the \u003ccode\u003eroot\u003c/code\u003e node. Our tests will then traverse the\ntree and determine if it's valid.\u003c/p\u003e\n\n\u003cp\u003eYou will be given an Array of values in sorted order, which you'll use to create\nyour tree. Drawing the tree on paper can make it easier to understand how the\nnodes connect to one another. Be aware, that there is almost always more than\none way to create a valid BST from a list of values. You get to decide how! In\nother words, you get to decide which node in the list to use as the root.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = [1, 2, 3]\n/* i want my tree to look like this:\n       2\n    1     3\n*/\n\nfunction one_to_three_bst() {\n  left = new Node(1)\n  right = new Node(3)\n  root = new Node(2, left, right)\n\n  return root\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou can find the methods and their accompanying lists in the starter files.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g9c55437954b862f4a709c44c86c9c64e"},{"id":484281,"title":"Day 5: Balanced and Unbalanced Binary Trees","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"balanced-binary-tree\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/balanced-binary-tree/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/balanced-binary-tree\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/balanced-binary-tree/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain the difference between balanced and unbalanced binary search trees\u003c/li\u003e\n\u003cli\u003eBuild a balanced binary search tree\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/balanced-binary-tree/valid_trees.png\" alt=\"Balanced and unbalanced tree\"\u003e\u003c/p\u003e\n\n\u003cp\u003eBinary trees can be balanced or unbalanced. In the image above, the left tree is\nbalanced, while the right tree is unbalanced. For the left tree, the left\nsubtree is the same height as the right subtree, making it balanced. For the\nright tree, there is only a right subtree, making it unbalanced.\u003c/p\u003e\n\n\u003ch2\u003eHow to Calculate the Height of a Tree\u003c/h2\u003e\n\n\u003cp\u003eWe can look at a visualization of a tree and intuitively determine whether its\nleft and right subtrees are the same height, much the same way as we determine\nwhether two people are the same height. But, when it comes to trees, we actually\nhave a more specific definition of height and it can be measured numerically,\njust like your own height!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/balanced-binary-tree/tree_height.png\" alt=\"Tree height\"\u003e\u003c/p\u003e\n\n\u003cp\u003eFor a binary tree, the height is defined as the distance from the root node\n(where the tree starts) to the furthest leaf node (a node without any children).\nTo calculate the height we count up the layers (or depth) of nodes (not all of\nthe nodes), and then subtract 1, since we aren't supposed to include the root\nnode in the height. This means that the height for both trees in the image at\nthe top of this reading is 2.\u003c/p\u003e\n\n\u003ch2\u003eHow to Determine If a Tree Is Balanced or Unbalanced\u003c/h2\u003e\n\n\u003cp\u003eA tree is considered balanced if its right subtree and left subtree are the same\nheight or they have a difference of 1. All other trees are unbalanced. Here are\ntwo examples of balanced trees:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    0             10\n   / \\           /  \\\n-10   20        0    20\n                     /\n                   19\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eVisually, it is quite easy to determine whether a tree is balanced or not. We\nlook at the left and right sides and can almost immediately tell that they're\nthe same, or roughly the same, height. In code, however, we have to traverse the\nleft subtree and determine its depth, and then traverse the right subtree and\ndetermine its depth. Lastly, we compare those depths. We won't be coding this\ntoday, but we will be revisiting this in a later challenge.\u003c/p\u003e\n\n\u003ch2\u003eWhy Should We Balance a Tree?\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/balanced-binary-tree/tree_compare.png\" alt=\"Two trees to compare\"\u003e\u003c/p\u003e\n\n\u003cp\u003eTake a look at the two trees above. Let's imagine that we want to see if the\nvalue 16 is in these trees.\u003c/p\u003e\n\n\u003cp\u003eFor the left tree, which is balanced, we can do the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eGo to 10.\u003c/li\u003e\n\u003cli\u003eIs 10 more or less than 16? It's less!\u003c/li\u003e\n\u003cli\u003eGo right, to 12.\u003c/li\u003e\n\u003cli\u003eIs 12 more or less than 16? It's less!\u003c/li\u003e\n\u003cli\u003eGo right, to 16! found it.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNotice that we didn't have to visit the left subtree at all, which means this\nalgorithm would have a Big O run time of less than O(n)! Think about what the\nspecific run time might be, or Google it. (Hint: does this remind you the binary\nsearch algorithm?)\u003c/p\u003e\n\n\u003cp\u003eFor the right tree, which is unbalanced, we have to visit every single node\nbefore we get to 16. This has a Big O run time of O(n), which is not as good as\nthe balanced tree.\u003c/p\u003e\n\n\u003cp\u003eSo why do we want to aim for balanced trees? To save time!\u003c/p\u003e\n\n\u003ch2\u003ePractice Building Balanced Trees Manually\u003c/h2\u003e\n\n\u003cp\u003eFor practice, let's manually build balanced trees from lists. We'll include\nseveral methods in the starter files which you'll fill out. For each method,\nreturn the root node. Our tests will then check if the tree is balanced or\nunbalanced, and if it's a valid BST. Remember, a tree is balanced if the left\nand right subtrees have a height difference of 0 or 1. Note that there may be\nmore than one way to create a balanced BST from the lists.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = [1, 2, 3]\n/* i want my tree to look like this:\n       2\n    1     3\n*/\n\nfunction one_to_three_bst():\n  left = new Node(1)\n  right = new Node(3)\n  root = new Node(2, left, right)\n\n  return root\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can optionally pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g1add21a42518f7ca836605cc9a150ede"}]},{"id":49416,"name":"Week 9: Searching and Sorting Continued","status":"unlocked","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g04c3f607a783b33bf9bfc3b6b165c3e7","items":[{"id":484287,"title":"Days 1 to 2: Level-Order aka Breadth-First Tree Traversal","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"level-order-tree-traversal\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/level-order-tree-traversal/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/level-order-tree-traversal\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/level-order-tree-traversal/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the breadth-first tree traversal algorithm\u003c/li\u003e\n\u003cli\u003eImplement the breadth-first tree traversal algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThere are a number of different ways to traverse a tree, or in other words,\ntravel down a tree from its root node all the way through to its leaf nodes or\nto a target node. Today we'll be focusing on a type of traversal called\nlevel-order or breadth-first tree traversal, which can be used with any type of\ntree data structure. Typically, it is implemented iteratively.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/level-order-tree-traversal/trees.png\" alt=\"Trees\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eWhat is level-order tree traversal?\u003c/h2\u003e\n\n\u003cp\u003eWith level-order traversal we start at the root and then move down the tree one\nlevel, or layer, at a time. You can think of it as being similar to a printer:\nit outputs its ink in rows until the image is complete. You can also think of it\nas being similar to typing a document: you type one line going from left to\nright, and then move down to the next and repeat.\u003c/p\u003e\n\n\u003cp\u003eTake a moment to look at the trees at the top of this README. If we were to\nperform a level-order traversal of the left tree and print out each value, we\nwould get: 10, 5, 12, 3, 6, 16. For the tree on the right: 5, 30, 60.\u003c/p\u003e\n\n\u003ch2\u003eBut Why?\u003c/h2\u003e\n\n\u003cp\u003eLet's say we had our data stored in a tree, but it wasn't a binary search tree\n(a BST requires its nodes to be ordered). In this tree the values of our nodes\ncan be stored in any order:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/level-order-tree-traversal/unordered_tree.png\" alt=\"Trees\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNow, let's say we want to find the shortest path to the node with a value of 30.\nThat node could be anywhere! On the left side or the right side. If we do a\nlevel-order traversal (breadth-first search aka BFS), we can stop searching once\nwe reach the correct depth. In contrast, if we were to go all the way down one\npath, before coming back up to the root and going down a different path, we\ncould end up going much further down the tree than we need to.\u003c/p\u003e\n\n\u003cp\u003eThere are other uses for a level-order tree traversal, but we'll let you\nresearch that when you're ready to do so.\u003c/p\u003e\n\n\u003ch2\u003ePerform a Level-Order Tree Traversal\u003c/h2\u003e\n\n\u003cp\u003eFor this challenge, we're going to write a method that takes the root node of a\ntree, performs a level-order traversal, and returns an array representing each\nlayer of the tree. The array will contain the values of the nodes, rather than\nthe nodes themselves:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    1\n  /   \\\n 2     3\n\nlevel_order_traversal(root)\n=\u0026gt; [1, 2, 3]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e       10\n      /  \\\n    20    30\n   /  \\\n  9   22\n\nlevel_order_traversal(root)\n=\u0026gt; [10, 20, 30, 9, 22]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g79ef0e2a684ea212088281ee6c04e29b"},{"id":484290,"title":"Days 3 to 4: In-Order Tree Traversal","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"tree-traversal-inorder\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/tree-traversal-inorder/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/tree-traversal-inorder\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/tree-traversal-inorder/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the in-order tree traversal algorithm\u003c/li\u003e\n\u003cli\u003eImplement the in-order tree traversal algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn-order tree traversal requires an algorithm that visits the \u003cstrong\u003eleft\u003c/strong\u003e subtree\nfirst, followed by the \u003cstrong\u003eroot\u003c/strong\u003e, and then the \u003cstrong\u003eright\u003c/strong\u003e subtree.\u003c/p\u003e\n\n\u003cp\u003eWhen using in-order traversal with a binary search tree (BST), the value of each\nnode will be output in order from least to greatest. For the left tree above the\noutput would be: 3, 5, 6, 10, 12, 16. For the tree on the right: 5, 30, 60.\u003c/p\u003e\n\n\u003cp\u003eThis algorithm can be programmed recursively or iteratively.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/tree-traversal-inorder/trees.png\" alt=\"Binary search trees\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eImplement In-Order Traversal\u003c/h2\u003e\n\n\u003cp\u003eFor this exercise, your function will be called with the root node of a BST.\nYour algorithm should return an array containing the nodes' values in sorted\norder. Note that your algorithm should not be calling sort! It should traverse\nthe tree nodes in order and add each value to the array that will be returned as\nit travels through the tree.\u003c/p\u003e\n\n\u003cp\u003eWhat is the time complexity of your solution?\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eHint: It might help to add a default parameter if solving this recursively.\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e      2\n    /   \\\n  -10   20\n\nin_order_traversal(root)\n=\u0026gt; [-10, 2, 20]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e     10\n    /   \\\n   0    20\n    \\     \\\n     5     30\n\nin_order_traversal(root)\n=\u0026gt; [0, 5, 10, 20, 30]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"ge1d0a29447f5b9b3f2505a78df5d5237"},{"id":484292,"title":"Day 5: Find a Target Value in a Binary Search Tree","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"find-value-binary-tree\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/find-value-binary-tree/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-value-binary-tree\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-value-binary-tree/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eImplement the binary search algorithm on a binary search tree\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eGiven a binary search tree (BST), find the node with the target value and return\nthe node. If the node does not exist in the tree return a falsy value, such as\n\u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e   1\n  / \\\n-1   2\n\nInput: root node, target = 2\nOutput: Node with value 2\n\nInput: root node, target = 5\nOutput: null or nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat is the time complexity of your solution? How does the complexity differ for\na balanced tree versus an unbalanced tree?\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gf29404adc091f03130c3a4e3946eee5f"}]},{"id":49418,"name":"Phase 4 Pairing Exercise","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gdb5f2e2ecbf63367e6f538d0251b866d","items":[{"id":484298,"title":"Whiteboard and Calculate Big O","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dsa-whiteboard-and-calculate-big-o\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-whiteboard-and-calculate-big-o\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-whiteboard-and-calculate-big-o/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithms in a technical interview setting\u003c/li\u003e\n\u003cli\u003eIdentify the Big O time complexity of an algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eFor this activity, you and your partner will each choose a problem and solve it\nin front of one another, and you will also calculate the time complexity for the\nsolution. You may select a problem you have already solved or a problem you have\nnot yet solved during this Phase. You may complete this activity using an actual\nwhiteboard, if available, or in the IDE of your choosing, such as VS Code or an\nonline REPL.\u003c/p\u003e\n\n\u003cp\u003eKeep in mind that these challenges tend to make people nervous, so remember to\nalways be kind, patient, and encouraging. Also be aware that nerves can cause\npeople to come up with some pretty weird solutions to problems, so remember to\nbring your empathy with you!\u003c/p\u003e\n\n\u003cp\u003ePlan to spend 15 minutes in each role. This means you and/or your partner might\nnot have enough time to finish the solution, and that's OK. If you can\nreasonably spend more time on this, you can, but do put a time limit on it. Be\nsure to calculate Big O for time complexity even if your solution isn't\ncomplete. If you can, try to reason about and discuss what Big O would be if you\nhad completed it based on your pseudocode.\u003c/p\u003e\n\n\u003ch2\u003eInstructions for Interviewer\u003c/h2\u003e\n\n\u003cp\u003eAs the interviewer your job will be to first present the problem. Explain the\nchallenge to your partner and provide some example test cases. You are not\nexpected to provide every possible test case or edge case. Instead, provide just\nenough detail for the interviewee to understand the problem and ask clarifying\nquestions. Example: \"For this challenge, your function will accept a single\nstring as input and return it in reverse. So if it were to receive 'cat', it\nwould return 'tac'.\"\u003c/p\u003e\n\n\u003cp\u003eYou will also need to answer questions. Your partner might ask you to confirm\ntheir understanding of the problem or whether or not they should handle certain\nedge cases. If you don't know the answer to a question, it's OK to say \"I don't\nknow\" or \"I'll let you decide.\" Sometimes the interviewer doesn't have the\nanswers.\u003c/p\u003e\n\n\u003cp\u003eNotice when your partner gets stuck and needs a nudge in the right direction.\nProvide helpful tips or hints, but don't give away the answer. Ideally, your\npartner will ask questions when they get stuck, but if you notice that they're\nstruggling with something for a little too long, don't be afraid to give a\nlittle nudge. You can also ask in advance if your partner would like a hint\nbefore providing advice.\u003c/p\u003e\n\n\u003cp\u003eWhen time is up, provide a constructive review of your partner's performance.\nSome areas to talk about include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eProblem explanation: did your partner explain the problem back to you in their\nown words and confirm their understanding before coding? Did they ask\nclarifying questions when necessary?\u003c/li\u003e\n\u003cli\u003eTesting: did your partner check their understanding against the given test\ncase/s? Did they write their own?\u003c/li\u003e\n\u003cli\u003ePseudocoding: did your partner explain what they were going to do out loud\nbefore coding and with pseudocode? Did they check their pseudocode against the\ntest cases?\u003c/li\u003e\n\u003cli\u003eSolution: did your partner solve the problem? Was their syntax correct? Did\nthey handle all of the test cases? Were variables and functions named\nappropriately? How readable was the code?\u003c/li\u003e\n\u003cli\u003eOpenness to feedback: Did they ask for feedback when necessary? Were they\nreceptive to your feedback?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eUltimately, it is more important for the interviewer to evaluate the\ninterviewee's communication during this exercise, so if time is an issue, focus\nyour review there rather than on the solution itself. When providing feedback,\nbe specific, so your partner has an opportunity to improve. Also structure your\nfeedback into two sections. For example, you might talk about what went well and\nthen what can be improved, rather than mixing them together.\u003c/p\u003e\n\n\u003ch2\u003eInstructions for Interviewee\u003c/h2\u003e\n\n\u003cp\u003eAs the interviewee, your job will be to solve the problem posed by your partner.\nThe Interviewer instructions above explain which areas you should focus on in\norder to ace your interview. The content in the Welcome section of this course\nwill also help, so make sure you read it before attempting your first whiteboard\nchallenge.\u003c/p\u003e\n\n\u003cp\u003eHere are some general tips:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCommunication is key: explain the problem and your approach to the solution\u003c/li\u003e\n\u003cli\u003eAssume you haven't been given all of the information, such as all of the\ninputs you need to account for\u003c/li\u003e\n\u003cli\u003eAsk for help when you need it and be receptive to feedback\u003c/li\u003e\n\u003cli\u003eDon't be afraid to admit when you know there's a better way to do something,\ne.g. \"I know I'm brute forcing this solution and there's a more efficient way,\nbut I want to solve it first and then optimize once I know I can solve it.\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen time is up, provide a constructive review for your interviewer. Some areas\nto talk about include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDid the interviewer communicate clearly? Could you understand the challenge\nand did they answer your questions in a manner that you could understand?\u003c/li\u003e\n\u003cli\u003eDid they give you time to solve the problem or explore a possible solution\nbefore providing feedback? In other words, were they patient?\u003c/li\u003e\n\u003cli\u003eWas their feedback helpful?\u003c/li\u003e\n\u003c/ul\u003e","exportId":"whiteboard-and-calculate-big-o"}]},{"id":49421,"name":"Week 10","status":"unlocked","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g4b8ce712e110edacc24fad4983c3f54d","items":[{"id":484301,"title":"Days 1 to 2: Create a Queue Class Using Nodes","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"queue-with-nodes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/queue-with-nodes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/queue-with-nodes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/queue-with-nodes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eImplement a common methods of a queue class using nodes\u003c/li\u003e\n\u003cli\u003eIdentify the runtime benefits of using nodes for a queue\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003ePreviously, we created a \u003ccode\u003eQueue\u003c/code\u003e class using an array as the underlying data\nstructure. For this challenge we'll recreate the \u003ccode\u003eQueue\u003c/code\u003e class but with nodes\ninstead, similar to a linked list. We'll then calculate the time complexity\nusing Big O notation for each of our \u003ccode\u003eQueue\u003c/code\u003e class methods, so we can see how\nthis change affects the runtime.\u003c/p\u003e\n\n\u003ch2\u003eRefresher: What Is a Queue?\u003c/h2\u003e\n\n\u003cp\u003eA queue is a data structure where items are processed in first-in-first-out\norder (FIFO). It has two ends: a front and a rear. The front is where items are\ndequeued from first, while items at the rear are handled last. Items are added\nto the rear of the queue. A queue operates a lot like a queue at the checkout of\na grocery store. Customers join at the end of the line and are served at the\nfront of the line.\u003c/p\u003e\n\n\u003ch2\u003eImplement the Queue Class\u003c/h2\u003e\n\n\u003cp\u003eOur \u003ccode\u003eQueue\u003c/code\u003e class will track its front node and its rear node. We will assume\nthat nodes will be added to the queue one at a time. They will also be removed\none at a time. Each node will have two attributes: \u003ccode\u003edata\u003c/code\u003e, which tracks the\nvalue the node stores, and \u003ccode\u003enext\u003c/code\u003e, which points to the next node in the queue.\nIn Ruby, the next attribute will be called \u003ccode\u003enext_node\u003c/code\u003e, since next is a reserved\nkeyword and we'd prefer to not use confusing syntax.\u003c/p\u003e\n\n\u003cp\u003eLet's implement the following methods for the Queue class:\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eenqueue(data)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eenqueue\u003c/code\u003e adds a node to the back of the queue using the provided data.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003equeue = new Queue()\n\nqueue.enqueue(\"first\")\nqueue.front\n=\u0026gt; Node, data: \"first\", next: nil\n\nqueue.rear\n=\u0026gt; Node, data: \"first\", next: nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003edequeue\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003edequeue\u003c/code\u003e removes the node at the front of the queue and returns it. Don't worry\nif \u003ccode\u003edequeue\u003c/code\u003e is called on an empty queue. It's OK for it to return the default\nreturn value, such as \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003equeue = new Queue()\n\nqueue.enqueue(\"first\")\nqueue.dequeue()\n=\u0026gt; Node, data: \"first\", next: nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003epeek\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003epeek\u003c/code\u003e returns the node at the front of the queue without removing it. If the\nqueue is empty, use the default return value, e.g. \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003equeue = new Queue()\n\nqueue.enqueue(\"first\")\nqueue.peek()\n=\u0026gt; Node, data: \"first\", next: nil\n\nqueue.front\n=\u0026gt; Node, data: \"first\", next: nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003eisEmpty\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eisEmpty\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if the queue is empty, otherwise \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003equeue = new Queue()\n\nqueue.isEmpty()\n=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003esize\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003esize\u003c/code\u003e returns the number of nodes currently in the queue.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003equeue = new Queue()\nqueue.size()\n=\u0026gt; 0\n\nqueue.enqueue(\"first\")\nqueue.size()\n=\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003esearch(target)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003esearch\u003c/code\u003e returns an Integer representing how far the target node is from the\nfront of the queue. If the node is not in the queue, return \u003ccode\u003e-1\u003c/code\u003e. Example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e// queue = 1, 2, 3, 4, 5 \u0026lt;- rear\n\nqueue.search(5) =\u0026gt; 4\nqueue.search(4) =\u0026gt; 3\nqueue.search(6) =\u0026gt; -1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eCalculate Time Complexity\u003c/h2\u003e\n\n\u003cp\u003eWhen you are done implementing the class, determine the time complexity for the\nfollowing methods and compare that to the time complexity for when an Array is\nused as the underlying data structure:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eenqueue\u003c/code\u003e: Time complexity when using an Array is O(1)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edequeue\u003c/code\u003e: Time complexity when using an Array is O(n)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003epeek\u003c/code\u003e: Time complexity when using an Array is O(1)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003esearch\u003c/code\u003e: Time complexity when using an Array is O(n)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g456e6eb64c30953ad25ac4fb412d3aa3"},{"id":484303,"title":"Days 3 to 5: Least Recently Used (LRU) Cache","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"lru-cache\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/lru-cache/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/lru-cache\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/lru-cache/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the characteristics of a Least Recently Used (LRU) Cache\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a LRU Cache class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eA Least Recently Used (LRU) Cache is a data structure that organizes items in\norder of use or access from most recently accessed to least recently accessed.\nIt has a fixed length or is allowed to take up a maximum amount of space in\nmemory, i.e. there is a limit to the number of items it contains. You can think\nof it as being similar to items in a kitchen cabinet: the items you use most\noften will likely be easy to see and within reach when you open the cupboard.\nThe items you use less often will be behind those items, and the items you use\nleast may be completely out of reach.\u003c/p\u003e\n\n\u003ch2\u003eWhy Use an LRU Cache?\u003c/h2\u003e\n\n\u003cp\u003eThe short story is that it's faster to read data from a cache (such as on the\nRAM) than it is to read it from a database or hard disk. Since there is a limit\nto how much data we can cache, we have to come up with a system to determine\nwhich data stays and which data gets evicted from the cache. With an LRU cache,\nwe evict the least recently used data once the cache is full. If you'd like the\nlong story, carry on reading this section.\u003c/p\u003e\n\n\u003cp\u003eLet's say we have a website where users can access many different stories. Our\nwebsite gets a lot of traffic, and each visit results in a request to the\ndatabase for a story. The responses to these requests are becoming slower and\nslower since accessing the database is expensive. We look at which stories our\nusers are accessing most often and notice that there are 10 stories that most\nusers access and those specific stories shift over time, i.e. the popular\nstories at 5PM differ from the popular stories at 10PM. This means we can cache\nthis data, or these stories, on the server. When we do this, requests for these\nstories will not result in database requests. Instead, they will be quickly\nretrieved directly from the server's memory.\u003c/p\u003e\n\n\u003cp\u003eWe decide to implement an LRU cache! When a user makes a request for a story, we\ncheck if it's in the cache. If it is, we respond with that story and reorder the\ndata in our cache to reflect that the story was the most recently accessed. If\nthe story isn't in the cache, we make the request to the database, and then\nplace the story in the correct place within the LRU cache. If the cache is full,\nwe also remove the least recently accessed story from it.\u003c/p\u003e\n\n\u003ch2\u003eTrade Offs\u003c/h2\u003e\n\n\u003cp\u003eThe typical design of an LRU cache allows for extremely fast access: checking if\nan item is in the cache is a constant time O(1) operation. Updating the cache is\nalso extremely fast: O(1).\u003c/p\u003e\n\n\u003cp\u003eHowever, the trade off is the amount of space required to store the data. An LRU\ncache often uses two data structures — a doubly linked list and hash map — to\nstore the data in the correct order. This means it takes up more space than\nusing a simpler data structure, such as an Array. Note that it is possible to\nimplement an LRU cache with different data structures.\u003c/p\u003e\n\n\u003ch2\u003eWhy Two Data Structures?\u003c/h2\u003e\n\n\u003cp\u003eThe LRU cache requires its data to be ordered. It also requires fast access and\nupdating (insertion and deletion). Let's say we used an Array, since it's\nordered. We only have fast access if we know the index of the element we're\nlooking for in the Array, and our program is unlikely to have that information.\nSimilarly, inserting elements at the front of an Array is an O(n) operation, so\nwe can't use an Array for an LRU cache.\u003c/p\u003e\n\n\u003cp\u003eWe could also think about using a hash/object, but hashes are not ordered, so we\nhave another problem here. However, they do provide O(1) access when you know\nthe key for the value you're looking for. It is also extremely fast to add and\nremove key-value pairs from a Hash. We could also think about using a doubly\nlinked list (a doubly linked lists contains nodes that point to the next node\nand previous node). Linked lists are ordered and they allow for fast insertion\nand deletion. However, finding a specific item takes O(n) time, since we must\ntraverse the list.\u003c/p\u003e\n\n\u003cp\u003eWhen we combine a hash with a doubly linked list, we get the best of both\nworlds: constant-time access, insertion, and deletion! (As long as we design\nour LRU cache properly, that is.)\u003c/p\u003e\n\n\u003ch2\u003eHow Do We Combine These Data Structures?\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/lru-cache/lru_cache.svg\" alt=\"LRU Cache\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIt's easier to think about how these data structures work together if we first\nset up some rules:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhen we check if an item is in the cache, we always check if it's in the hash\u003c/li\u003e\n\u003cli\u003eA key in the hash always points to a node in the doubly linked list\u003c/li\u003e\n\u003cli\u003eItems in the doubly linked list are always ordered from most recently used (at\nthe head) to least recently used (at the tail)\u003c/li\u003e\n\u003cli\u003eIf an item is being added to a cache that's full, the least recently used item\nis removed from both the hash and list (at the tail)\n\n\u003cul\u003e\n\u003cli\u003eThe list tells us which item was least recently used since it will always be\nat the tail\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIf an item is being retrieved from the cache, it is moved to the head of the\nlist and the hash remains unchanged\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's say we start with an empty cache. We want the recipe associated with an\nitem that has an ID of \"cake\". First, we check if \"cake\" is in the cache by\nasking the hash if it has a key of \"cake\". The cache is empty, so the data is\nretrieved from the database. Next, the LRU cache creates a new node, which\nstores the recipe. The node is added to the doubly linked list as its head and\ntail since the list contains only one item. Next, a key of \"cake\" is added to\nthe hash, and its value is set to the node that was just created. At the end of\nthis operation we have a list with a single node in it, and a hash with a key of\n\"cake\" pointing to that node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elru_cache.hash\n=\u0026gt; {\n  \"cake\": Node storing \"cake\"s recipe\n}\n\nlru_cache.list\n=\u0026gt; Doubly Linked List with head and tail both pointing to \"cake\" recipe Node\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow another user comes along asking for \"cake\". We check the cache's hash for\n\"cake\". It's there, so we retrieve its value and send it to the user. We don't\nneed to do anything else because \"cake\" is already the most recently accessed\nitem in the cache.\u003c/p\u003e\n\n\u003cp\u003eNext a user asks for \"cookies\". We check the hash, but it's not in there, so we\nretrieve the recipe from the database. Next, we create a node using the\n\"cookies\" data and set that node as the head of the doubly linked list, since\nit's the most recently accessed item. This means that \"cake\" is now the tail.\nLastly, we add a key of \"cookies\" to the hash and have it point to the node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elru_cache.hash\n=\u0026gt; {\n  \"cake\": Node storing \"cake\"s recipe,\n  \"cookies\": Node storing \"cookie\"s recipe\n}\n\nlru_cache.list\n=\u0026gt; Doubly Linked List with head pointing to \"cookies\" Node and tail pointing to \"cake\" Node\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's pretend our cache can only store two recipes. This means our cache is\nfull! A user comes along and asks for an omelette recipe. The LRU Cache's hash\ndoesn't have an \"omelette\" key, so the data is retrieved from the database. A\nnode is created using the omelette data. The cache goes to add it to the head of\nthe list, but the list is full, so it kicks out \"cake\", which is at the tail.\nThe omelette node is then added as the head of the list, and a key is created in\nthe hash which points to the omelette node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elru_cache.hash\n=\u0026gt; {\n  \"cookies\": Node storing \"cake\"s recipe,\n  \"omelette\": Node storing \"omelette\"s recipe\n}\n\nlru_cache.list\n=\u0026gt; Doubly Linked List with head pointing to \"omelette\" Node and tail pointing to \"cookies\" Node\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImplement an LRU Cache\u003c/h2\u003e\n\n\u003cp\u003eWe'll take this slow: first we'll create our Doubly Linked List class, and then\nwe'll move on to creating the LRU Cache. For the Doubly Linked List class, we'll\nonly worry about creating the methods required for our cache to work. Note that\nour tests will only check if the cache is functioning correctly. It'll be up to\nyou to test that the list is working correctly.\u003c/p\u003e\n\n\u003cp\u003eThe Node class has already been filled out. It contains four attributes: \u003ccode\u003edata\u003c/code\u003e,\nwhich stores some kind of value, \u003ccode\u003ekey\u003c/code\u003e, which stores the associated key name in\nthe hash, \u003ccode\u003enext\u003c/code\u003e/\u003ccode\u003enext_node\u003c/code\u003e, which points to the next node in the list, and\n\u003ccode\u003eprev\u003c/code\u003e/\u003ccode\u003eprev_node\u003c/code\u003e, which points to the previous node in the list.\u003c/p\u003e\n\n\u003ch3\u003eImplement the Doubly Linked List\u003c/h3\u003e\n\n\u003cp\u003eAs you implement each of these methods, make sure you're correctly updating each\nNode's \u003ccode\u003enext\u003c/code\u003e and \u003ccode\u003eprev\u003c/code\u003e attributes. Also keep in mind that each of these\noperations should take constant time: O(1).\u003c/p\u003e\n\n\u003cp\u003eYou may assume that only valid inputs will be provided to each method. For\nexample, if you're asked to move a node to the head of the list, it's guaranteed\nthat the argument will contain a node and that the node will be in the list\nalready.\u003c/p\u003e\n\n\u003ch4\u003e1. \u003ccode\u003eaddHead(node)\u003c/code\u003e / \u003ccode\u003eadd_head(node)\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003ePlace the given node at the head of the list. Do not remove the existing head if\nthere is one!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new DoublyLinkedList\nlist.add_head(node1)\nlist.head\n=\u0026gt; node1\n\nlist.add_head(node2)\nlist.head\n=\u0026gt; node2\n\nlist.head.next\n=\u0026gt; node1\n\nlist.tail\n=\u0026gt; node1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4\u003e2. \u003ccode\u003eremoveTail()\u003c/code\u003e / \u003ccode\u003eremove_tail\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eRemove the tail from the list and return it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new DoublyLinkedList\nlist.add_head(node1)\nlist.head\n=\u0026gt; node1\n\nlist.tail\n=\u0026gt; node1\n\nlist.remove_tail()\n=\u0026gt; node1\n\nlist.tail\n=\u0026gt; null or nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4\u003e3. \u003ccode\u003eremoveNode(node)\u003c/code\u003e / \u003ccode\u003eremove_node(node)\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eRemove the given node from the list and return it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new DoublyLinkedList\nlist.add_head(node1)\nlist.add_head(node2)\nlist.add_head(node3)\n// list is 3 -\u0026gt; 2 -\u0026gt; 1\n\nlist.remove_node(node2)\n=\u0026gt; node2\n// list is 3 -\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4\u003e4. \u003ccode\u003emoveNodeToHead(node)\u003c/code\u003e / \u003ccode\u003emove_node_to_head(node)\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eMove the given node to the head of the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new DoublyLinkedList\nlist.add_head(node1)\nlist.add_head(node2)\nlist.add_head(node3)\n// list is 3 -\u0026gt; 2 -\u0026gt; 1\n\nlist.move_node_to_head(node2)\n// list is 2 -\u0026gt; 3 -\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eImplement the LRU Cache\u003c/h3\u003e\n\n\u003cp\u003eNow that we have our list ready for use, we can implement the LRU Cache! Our\ncache will contain only two methods (one to get data and another to add it), but\nyou can add helper methods if you need to. The necessary attributes - \u003ccode\u003elimit\u003c/code\u003e,\n\u003ccode\u003esize\u003c/code\u003e, \u003ccode\u003ehash\u003c/code\u003e, and \u003ccode\u003elist\u003c/code\u003e - have already been added to the cache. The \u003ccode\u003elimit\u003c/code\u003e\nis set to a default value, which can be overridden when instantiating a new\ncache. It sets the maximum number of items allowed in the cache. The \u003ccode\u003esize\u003c/code\u003e\ntracks the total number of items currently in the cache. The \u003ccode\u003ehash\u003c/code\u003e and \u003ccode\u003elist\u003c/code\u003e\npoint to the hash/object and Doubly Linked List that store the cache's data.\u003c/p\u003e\n\n\u003cp\u003eAs you work on the cache, remember that you'll also need to determine when and\nwhere to update the \u003ccode\u003esize\u003c/code\u003e of the cache. Also keep in mind that our operations\nneed to run in constant time.\u003c/p\u003e\n\n\u003cp\u003eYou may assume that the methods will only be given valid arguments.\u003c/p\u003e\n\n\u003ch4\u003e1. \u003ccode\u003eget(key)\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eReturn the item from the cache using the given \u003ccode\u003ekey\u003c/code\u003e. If the item is in the\ncache, move it to the head of the list to denote that it is the most recently\naccessed item. If the item isn't in the cache, return \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elru_cache.get(\"potato\")\n=\u0026gt; Node with data associated with \"potato\"\n\nlru_cache.get(\"notato\")\n=\u0026gt; -1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4\u003e2. \u003ccode\u003eput(key, value)\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eAdd or update the item in the cache. If the key does not exist in the cache, add\nthe item to the cache. If the key is in the cache, update the item with the\nvalue. In any case, move the item to the head of the list to denote that it's\nthe most recently accessed item. If the cache is already full, remove the least\nrecently used item from the cache before adding the new item.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elru_cache = new LRUCache(3)\nlru_cache.put(\"cake\", \"cake recipe\")\n\nlru_cache.get(\"cake\")\n=\u0026gt; Node with data \"cake recipe\"\n\nlru_cache.put(\"cookies\", \"cookie recipe\")\nlru_cache.put(\"cake\", \"fixed cake recipe\")\nlru_cache.put(\"scones\", \"scone recipe\")\nlru_cache.put(\"smoothie\", \"smoothie recipe\")\n\nlru_cache.get(\"cake\")\n=\u0026gt; Node with data \"fixed cake recipe\"\n\nlru_cache.get(\"smoothie\")\n=\u0026gt; Node with data \"smoothie recipe\"\n\nlru_cache.get(\"cookies\")\n=\u0026gt; -1\n// cookies got kicked out when smoothie was added because the cache was full\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gd6c65108084433ccd407b586fa442920"}]},{"id":49423,"name":"Week 11","status":"unlocked","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"ge2442646dbc09fdc344f8cb07a5030b1","items":[{"id":484305,"title":"Day 1: What Is a Graph?","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"what-is-a-graph\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-graph/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-graph\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-graph/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the characteristics of a graph\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a graph\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIf you're familiar with trees, such as the binary tree, then we've got good news\nfor you! You're already familiar with graphs, because they're very similar!\u003c/p\u003e\n\n\u003cp\u003eA graph is a data structure that represents how different points or objects are\nconnected to one another. In the image below, we have a graph showing how\ndifferent people are connected. For example, we see that Anne is connected to\nBob, Bob is connected to Carl, and so on. We can also see that Diana is not\ndirectly connected to Elisa.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/what-is-a-graph/friends.jpg\" alt=\"friends network\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eWhy Use Graphs?\u003c/h2\u003e\n\n\u003cp\u003eGraphs can help us find the shortest distance between two points or determine if\ntwo points are even connected. Dijkstra's algorithm, for example, uses a graph\nto find the shortest distance between two points, and is still used today to\nfigure out how to get from point A to point B on a map. And Facebook uses a\ngraph database instead of a relational database because it performs better for\ntheir use case, which is all about representing relationships between people,\nplaces, and other things.\u003c/p\u003e\n\n\u003cp\u003eThere are other use cases for graphs, but we'll let you Google those.\u003c/p\u003e\n\n\u003ch2\u003eKey Terms\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eNode / vertex: A point on the graph, similar to a node in a tree\u003c/li\u003e\n\u003cli\u003eEdge: A connection or path between two points, which we can visualize as a\nline connecting two nodes, such as the line/edge from Anne to Bob in the image\nat the top of this README\u003c/li\u003e\n\u003cli\u003eAdjacency: Two nodes or vertices are adjacent if they are connected by an edge\n(e.g. Anne and Bob are adjacent)\u003c/li\u003e\n\u003cli\u003ePath: A sequence of edges between two points, similar to plotting a route from\nyour favorite bakery to your home (a path from Anne to Carl: Anne -\u0026gt; Bob -\u0026gt;\nCarl)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eTypes of Graphs\u003c/h2\u003e\n\n\u003cp\u003eThere are several different types of graphs. We'll mention a few here:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUndirected graph: The edges do not point in any specific direction (e.g. Anne\ncan point to Bob and Bob can point back to Anne)\u003c/li\u003e\n\u003cli\u003eDirected graph: Each edge is uni-directional (similar to a Linked List, e.g.\nAnne can point to Bob, but Bob cannot point back to Anne)\u003c/li\u003e\n\u003cli\u003eWeighted graph: Each edge has a cost associated with it (e.g. if Elisa wants\nto talk to Diana, she can ask Carl or Anne to make that connection, but if\nElisa's relationship with Carl is on the rocks, she might weight that more\nheavily than going through Anne, with whom she is best friends)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou don't need to memorize all of this, nor will we be building all of these\ngraphs. We just want you to be aware of them in case you decide to look further\ninto graphs (there are more though!). For example, if you wanted to learn more\nabout Dijkstra's algorithm, you might want to look into weighted graphs. We'll\nbe focusing on undirected graphs.\u003c/p\u003e\n\n\u003ch2\u003eHow to Represent a Graph\u003c/h2\u003e\n\n\u003cp\u003eWe can use a number of different underlying data structures to create a graph.\nFor example, we can build a graph from a tree data structure, similar to a\nLinked List or Binary Tree. Or we can use a hash (object in JS, dictionary in\nPython...) or a multi-dimensional array as the underlying data structure. In\nthis challenge, we'll be creating our own Graph class using a hash/object as the\nunderlying data structure. The key will be to maintain the rules of the graph,\nor as we prefer to say its \"graphiness\".\u003c/p\u003e\n\n\u003cp\u003eWe suggest you read more about the different methods for representing a graph.\nTry Googling \"adjacency matrix\" to get yourself started.\u003c/p\u003e\n\n\u003ch2\u003eOur Graph\u003c/h2\u003e\n\n\u003cp\u003eToday we'll be creating a Graph class that uses a hash/object as the underlying\ndata structure. It'll be an undirected graph consisting of adjacency lists. In\nother words, each key in the hash/object will have a value that is a set. Each\nset will be a list of adjacent nodes. Let's take another look at our friends\nimage and then see what it might look like as a graph:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/what-is-a-graph/friends.jpg\" alt=\"friends network\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e{\n  Anne: [Bob, Elisa, Diana],\n  Bob: [Anne, Diana, Carl],\n  Elisa: [Anne, Carl],\n  Carl: [Bob, Elisa, Diana],\n  Diana: [Anne, Bob, Carl]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImplement a Graph Class\u003c/h2\u003e\n\n\u003cp\u003eLet's see if we can gain a better understanding of graphs by building a Graph class.\u003c/p\u003e\n\n\u003cp\u003eBefore we dive in, let's set up some rules:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eEvery vertex in the graph has a corresponding key in the Hash/object being\nused to store the graph\u003c/li\u003e\n\u003cli\u003eAll of a vertex's adjacent vertices are listed in an adjacency list stored as\nthe value for that key: \u003ccode\u003e{ a: {\"b\", \"c\", \"d\"} }\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eAll values in an adjacency list are unique - there can be no repeats\u003c/li\u003e\n\u003cli\u003eThe graph consists only of vertices that are connected to other vertices, e.g.\nthere cannot be a key with an empty adjacency list unless there is only one\nvertex in the entire graph\n\n\u003cul\u003e\n\u003cli\u003eThis means we are making a connected graph: one in which there is a path\nfrom any vertex to another vertex. Be aware that it is possible to make a\ndisconnected graph.\u003c/li\u003e\n\u003cli\u003eOK: \u003ccode\u003e{ a: {} }\u003c/code\u003e or \u003ccode\u003e{ a: { \"b\" }, b: { \"a\" } }\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eNot OK: \u003ccode\u003e{ a: {}, b: {}, c: {} }\u003c/code\u003e or \u003ccode\u003e{ a: { \"c\" }, b: {}, c: { \"a\" } }\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e1. Initialize a New Object: \u003ccode\u003einitialize(paths)\u003c/code\u003e / \u003ccode\u003econstructor(paths)\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eA user should provide an array of paths when instantiating a new object from the\nGraph class. We'll take care of the array in the next step. For now, simply\naccept it as an argument and set an instance variable called \u003ccode\u003egraph\u003c/code\u003e to an empty\nHash / object. \u003ccode\u003egraph\u003c/code\u003e should be readable on an object instantiated from the\nclass.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003egraph = new Graph(paths)\ngraph.graph\n=\u0026gt; {}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e2. Create the Graph from the Array\u003c/h3\u003e\n\n\u003cp\u003eWhen a new Graph object is instantiated, it will be initialized using an array\nof paths. We need to convert this list of paths to a valid graph. A valid graph\ncontains every vertex as a key, and every adjacent vertex as a value in a set\nthat's associated with that key.\u003c/p\u003e\n\n\u003cp\u003eThe list of paths is a two-dimensional array, and you may assume that it's\nalways valid. Each path contains a list of connected vertices in the order in\nwhich they're connected, i.e. there is an edge between elements that are next to\none another in a list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[[\"a\", \"b\", \"c\"], [\"b\", \"d\"]]\n// a is adjacent to b\n// b is adjacent to a, c and d\n// c is adjacent to b\n// d is adjacent to b\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003epaths = [[\"a\", \"b\", \"c\"], [\"b\", \"d\"]]\ngraph = new Graph(paths)\ngraph.graph\n=\u0026gt; {\n  a: { \"b\" },\n  b: { \"a\", \"c\", \"d\" },\n  c: { \"b\" },\n  d: { \"b\" }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eQuestion: Why do you think we used a set instead of an array to store the\nadjacency lists?\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you've got that working, determine what the worst-case time complexity (Big\nO) is for converting the array of paths to a graph.\u003c/p\u003e\n\n\u003ch3\u003e3. \u003ccode\u003eis_adjacent(vertex_a, vertex_b)\u003c/code\u003e / \u003ccode\u003eisAdjacent(vertexA, vertexB)\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eReturns \u003ccode\u003etrue\u003c/code\u003e if two vertices are adjacent, i.e. they're connected by an edge.\nOtherwise it returns \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003epaths = [[\"a\", \"b\", \"c\"], [\"b\", \"d\"]]\ngraph = new Graph(paths)\n\ngraph.is_adjacent(\"a\", \"b\")\n=\u0026gt; true\n\ngraph.is_adjacent(\"a\", \"c\")\n=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce you've got that working, determine the worst-case time complexity (Big O)\nfor determining if two vertices are adjacent.\u003c/p\u003e\n\n\u003ch3\u003e4. \u003ccode\u003eadd_vertex(vertex, array)\u003c/code\u003e / \u003ccode\u003eaddVertex(vertex, array)\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd a new vertex to the graph along with its adjacency list. This means that the\nadjacency lists for existing vertices will also need to be updated.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003epaths = [[\"a\", \"b\", \"c\"], [\"b\", \"d\"]]\ngraph = new Graph(paths)\n\ngraph.add_vertex(\"e\", [\"a\", \"d\"])\ngraph.graph\n=\u0026gt; {\n  a: { \"b\", \"e\" },\n  b: { \"a\", \"c\", \"d\" },\n  c: { \"b\" },\n  d: { \"b\", \"e\" },\n  e: { \"a\", \"d\" }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce you've got that working, determine the worst-case time complexity (Big O)\nfor adding a vertex.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g33eeb88ff0ded86d640efd7740876f91"},{"id":484307,"title":"Days 2 to 3: Depth-First Graph Traversal","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"graph-dfs\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/graph-dfs/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/graph-dfs\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/graph-dfs/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse depth-first traversal to find a path between vertices in a graph\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/graph-dfs/fork_road.jpg\" alt=\"fork in the road\"\u003e\u003c/p\u003e\n\n\u003cp\u003eFor this challenge, we'll be determining whether there is a path from vertex A to\nvertex B in a graph. We'll do this using depth-first traversal, which is\ntypically a recursive process. During a depth-first traversal, we explore a path\ncompletely before going down another path. It's like exploring a fork in a road\non foot: you walk all the way down one side of the fork, then walk back up to\nwhere you started, and then go down the other side before walking back up again.\u003c/p\u003e\n\n\u003ch2\u003eOur Graph\u003c/h2\u003e\n\n\u003cp\u003eFor this challenge, we'll be using a \u003cstrong\u003edirected disconnected graph\u003c/strong\u003e stored in a\nhash/object where each key maps to an \u003cstrong\u003eadjacency list\u003c/strong\u003e. Let's break down that\nword jumble:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eDirected graph\u003c/strong\u003e: Starting at any vertex, we can travel in only one direction,\ne.g. we can go from vertex A to vertex B but not from B to A. This is similar\nto a Linked List. The difference, however, is that we can connect any two\nvertices we like, e.g. A -\u0026gt; B -\u0026gt; C -\u0026gt; A, and a vertex may be connected to many\nother vertices.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eDisconnected graph\u003c/strong\u003e: It is possible that certain vertices might be\nunreachable from another vertex. E.g. we can go from A to B, but there is no\npath from A to C.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eAdjacency list\u003c/strong\u003e: A list of vertices that share an edge with a given vertex,\ni.e. there is a direct connection from the given vertex to every vertex in the\nadjacency list.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/graph-dfs/graph.jpg\" alt=\"friends graph\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003egraph = {\n  jan: [\"john\", \"jambaby\"],\n  john: [\"carl\"],\n  jambaby: [],\n  carl: [\"jambaby\"],\n  dave: []\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn this graph, \u003ccode\u003ejan\u003c/code\u003e can travel to \u003ccode\u003ecarl\u003c/code\u003e via \u003ccode\u003ejohn\u003c/code\u003e, but \u003ccode\u003ejambaby\u003c/code\u003e can't visit\nanyone and neither can \u003ccode\u003edave\u003c/code\u003e. Similarly, no one can visit \u003ccode\u003edave\u003c/code\u003e, who's just\nfloating in space all by their lonesome. Sorry \u003ccode\u003edave\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eImplement isPath(graph, vertexA, vertexB) / is_path(graph, vertex_a, vertex_b)\u003c/h2\u003e\n\n\u003cp\u003eYour method will be given a graph stored in a hash/object. Each key represents a\nvertex in the graph, and each value will be a list of adjacent vertices stored\nin an array. The method will also be passed two vertices. Your job is to\ndetermine whether there is a path between them. If there is, return \u003ccode\u003etrue\u003c/code\u003e,\notherwise \u003ccode\u003efalse\u003c/code\u003e. The vertices given will always be in the graph, and the graph\nwill always be valid and contain data.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003egraph = {\n  jan: [\"john\", \"jambaby\"],\n  john: [\"carl\"],\n  jambaby: [],\n  carl: [\"jambaby\"],\n  dave: []\n}\n\nis_path(graph, \"jan\", \"carl\")\n=\u0026gt; true\n\nis_path(graph, \"jan\", \"dave\")\n=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gab78c8c3c4b59323ff237d84dcef8b8e"},{"id":484309,"title":"Days 4 to 5: Breadth-first Graph Traversal","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"find_distance\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/find_distance/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find_distance\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find_distance/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse breadth-first traversal to the find distance between vertices in a graph\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/find-distance/graph.jpg\" alt=\"Friends graph\"\u003e\u003c/p\u003e\n\n\u003cp\u003eFor this challenge we are going to find the length of the shortest distance\nbetween two friends (or vertices, rather, which represent friends). To achieve\nthis we'll need to perform a breadth-first search (BFS). Unlike depth-first\nsearch (DFS), which travels all the way down a path, a BFS considers all\nadjacent vertices on each iteration. If we were to do a BFS on the friends graph\nto find the shortest distance from \u003ccode\u003ejan\u003c/code\u003e to \u003ccode\u003ecarl\u003c/code\u003e, it might check the friends\nlike so:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIs \u003ccode\u003ejohn\u003c/code\u003e == \u003ccode\u003ecarl\u003c/code\u003e?\u003c/li\u003e\n\u003cli\u003eIs \u003ccode\u003ejambaby\u003c/code\u003e == \u003ccode\u003ecarl\u003c/code\u003e?\u003c/li\u003e\n\u003cli\u003eIs \u003ccode\u003ecarl\u003c/code\u003e == \u003ccode\u003ecarl\u003c/code\u003e?\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn other words, the algorithm checks the adjacent vertices first (the closest\nones to the starting vertex), and then checks the vertices adjacent to those.\nSince it always checks the closest vertices first, and the furthest last, it's\nperfect for finding the shortest distance between two vertices!\u003c/p\u003e\n\n\u003cp\u003eYou should know that this type of search can also help us find the shortest path\nbetween two points!\u003c/p\u003e\n\n\u003ch2\u003efind_distance(graph, vertex_a, vertex_b) / findDistance(graph, vertexA, vertexB)\u003c/h2\u003e\n\n\u003cp\u003eUse BFS to return the shortest distance from vertex A to B. If there is no path,\nreturn -1. The graph and vertices will always be valid. The graph will always\ncontain vertices and vertices A and B will always be in the graph. We will be\nusing a directed disconnected graph.\u003c/p\u003e\n\n\u003cp\u003eIf you are asked to find the distance from a vertex back to itself, i.e. a\ncycle, return the distance of the cycle, rather than 0. Be aware that there\nmight not be a cycle.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003egraph = {\n  jan: [\"john\", \"jambaby\"],\n  john: [\"carl\"],\n  jambaby: [],\n  carl: [\"jambaby\"],\n  dave: []\n}\n\nfind_distance(graph, \"jan\", \"carl\")\n=\u0026gt; 2\n\nfind_distance(graph, \"dave\", \"carl\")\n=\u0026gt; -1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eHint: A BFS is normally implemented as an iterative algorithm that uses a queue\nto track which vertices to visit next. Be careful of cycles!\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g645220525fe3987c6bcf5bdfd1e64adf"}]},{"id":49424,"name":"Week 12","status":"unlocked","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g293ce05678d0c7f3d4b9213cffbc1b25","items":[{"id":484313,"title":"Days 1 to 2: Convert an HTML Table to a Graph","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"table-to-graph\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/table-to-graph/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/table-to-graph\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/table-to-graph/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild a graph from an HTML string\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eFor this challenge, you'll be provided with a string of HTML representing a\ntable of friends. You'll need to convert the table to an undirected graph. The\nfinal graph may be disconnected, i.e. there might not be a path from each person\nto every other person. The string will always contain a valid HTML table with\nentries in it, and the table will always have the same format: a header row\nfollowed by rows which contain the friends data, with two cells per row.\u003c/p\u003e\n\n\u003cp\u003eNote that the returned graph is a Hash/Object and the adjacency lists are\narrays. Also, although the table stored in the string in the example below is\nspaced with carriage returns, the string provided to your function will not be.\nInstead, it'll always be a continuous string like so: \u003ccode\u003e\"\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;...\"\u003c/code\u003e.\nSpacing is shown below to help you understand how the data is represented in the\ntable.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efriends = \"\u0026lt;table\u0026gt;\n  \u0026lt;tr\u0026gt;\n    \u0026lt;th\u0026gt;Person\u0026lt;/th\u0026gt;\n    \u0026lt;th\u0026gt;Friends\u0026lt;/th\u0026gt;\n  \u0026lt;/tr\u0026gt;\n  \u0026lt;tr\u0026gt;\n    \u0026lt;td\u0026gt;Fred\u0026lt;/td\u0026gt;\n    \u0026lt;td\u0026gt;Jane, Carol, Anesh, Xi\u0026lt;/td\u0026gt;\n  \u0026lt;/tr\u0026gt;\n  \u0026lt;tr\u0026gt;\n    \u0026lt;td\u0026gt;Carol\u0026lt;/td\u0026gt;\n    \u0026lt;td\u0026gt;Fred, Anesh, Janelle\u0026lt;/td\u0026gt;\n  \u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\"\n\ntable_to_graph(friends)\n=\u0026gt; {\n  \"Fred\": [\"Jane\", \"Carol\", \"Anesh\", \"Xi\"],\n  \"Jane\": [\"Fred\"],\n  \"Carol\": [\"Fred\", \"Anesh\", \"Janelle\"],\n  \"Anesh\": [\"Fred\", \"Carol\"],\n  \"Xi\": [\"Fred\"],\n  \"Janelle\": [\"Carol\"]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eFork and then clone me!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g6a8be5f1f744dd13b0d125e6b9021b63"}]},{"id":49425,"name":"Phase 5 Pairing Exercises","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g64b6e31241a2f5f1fca6973ebab8a815","items":[{"id":484316,"title":"Code Comparison","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dsa-code-comparison\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-code-comparison\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-code-comparison/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice code review\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eFor this activity, you and your partner will each choose a problem that you have\nboth completed from any Phase. Either in person or over video chat with\nscreensharing:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain your solutions to each other\u003c/li\u003e\n\u003cli\u003ePoint out the differences in how you approached solving the problem\u003c/li\u003e\n\u003cli\u003eDiscuss at least one part of your partner's solution that you liked and have\nlearned from\n\n\u003cul\u003e\n\u003cli\u003eDid your partner do something you didn't even think of?\u003c/li\u003e\n\u003cli\u003eIs there something about the way they code that jumps out to you? For\nexample, is their code extremely readable without comments?\u003c/li\u003e\n\u003cli\u003eIs their solution more efficient, e.g. better time complexity or uses less memory?\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eDiscuss at least one part of your partner's solution which you think can be\nimproved and why\n\n\u003cul\u003e\n\u003cli\u003eIs the solution difficult to understand without heavy commenting?\u003c/li\u003e\n\u003cli\u003eDoes it contain redundant/unused code?\u003c/li\u003e\n\u003cli\u003eShould helper methods have been used?\u003c/li\u003e\n\u003cli\u003eCould it easily be made more efficient? For example, were the best data\nstructures used to solve the problem?\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"code-comparison"},{"id":484318,"title":"Whiteboard and Calculate Big O","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dsa-whiteboard-and-calculate-big-o\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-whiteboard-and-calculate-big-o\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-whiteboard-and-calculate-big-o/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithms in a technical interview setting\u003c/li\u003e\n\u003cli\u003eIdentify the Big O time complexity of an algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eFor this activity, you and your partner will each choose a problem and solve it\nin front of one another, and you will also calculate the time complexity for the\nsolution. You may select a problem you have already solved or a problem you have\nnot yet solved during this Phase. You may complete this activity using an actual\nwhiteboard, if available, or in the IDE of your choosing, such as VS Code or an\nonline REPL.\u003c/p\u003e\n\n\u003cp\u003eKeep in mind that these challenges tend to make people nervous, so remember to\nalways be kind, patient, and encouraging. Also be aware that nerves can cause\npeople to come up with some pretty weird solutions to problems, so remember to\nbring your empathy with you!\u003c/p\u003e\n\n\u003cp\u003ePlan to spend 15 minutes in each role. This means you and/or your partner might\nnot have enough time to finish the solution, and that's OK. If you can\nreasonably spend more time on this, you can, but do put a time limit on it. Be\nsure to calculate Big O for time complexity even if your solution isn't\ncomplete. If you can, try to reason about and discuss what Big O would be if you\nhad completed it based on your pseudocode.\u003c/p\u003e\n\n\u003ch2\u003eInstructions for Interviewer\u003c/h2\u003e\n\n\u003cp\u003eAs the interviewer your job will be to first present the problem. Explain the\nchallenge to your partner and provide some example test cases. You are not\nexpected to provide every possible test case or edge case. Instead, provide just\nenough detail for the interviewee to understand the problem and ask clarifying\nquestions. Example: \"For this challenge, your function will accept a single\nstring as input and return it in reverse. So if it were to receive 'cat', it\nwould return 'tac'.\"\u003c/p\u003e\n\n\u003cp\u003eYou will also need to answer questions. Your partner might ask you to confirm\ntheir understanding of the problem or whether or not they should handle certain\nedge cases. If you don't know the answer to a question, it's OK to say \"I don't\nknow\" or \"I'll let you decide.\" Sometimes the interviewer doesn't have the\nanswers.\u003c/p\u003e\n\n\u003cp\u003eNotice when your partner gets stuck and needs a nudge in the right direction.\nProvide helpful tips or hints, but don't give away the answer. Ideally, your\npartner will ask questions when they get stuck, but if you notice that they're\nstruggling with something for a little too long, don't be afraid to give a\nlittle nudge. You can also ask in advance if your partner would like a hint\nbefore providing advice.\u003c/p\u003e\n\n\u003cp\u003eWhen time is up, provide a constructive review of your partner's performance.\nSome areas to talk about include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eProblem explanation: did your partner explain the problem back to you in their\nown words and confirm their understanding before coding? Did they ask\nclarifying questions when necessary?\u003c/li\u003e\n\u003cli\u003eTesting: did your partner check their understanding against the given test\ncase/s? Did they write their own?\u003c/li\u003e\n\u003cli\u003ePseudocoding: did your partner explain what they were going to do out loud\nbefore coding and with pseudocode? Did they check their pseudocode against the\ntest cases?\u003c/li\u003e\n\u003cli\u003eSolution: did your partner solve the problem? Was their syntax correct? Did\nthey handle all of the test cases? Were variables and functions named\nappropriately? How readable was the code?\u003c/li\u003e\n\u003cli\u003eOpenness to feedback: Did they ask for feedback when necessary? Were they\nreceptive to your feedback?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eUltimately, it is more important for the interviewer to evaluate the\ninterviewee's communication during this exercise, so if time is an issue, focus\nyour review there rather than on the solution itself. When providing feedback,\nbe specific, so your partner has an opportunity to improve. Also structure your\nfeedback into two sections. For example, you might talk about what went well and\nthen what can be improved, rather than mixing them together.\u003c/p\u003e\n\n\u003ch2\u003eInstructions for Interviewee\u003c/h2\u003e\n\n\u003cp\u003eAs the interviewee, your job will be to solve the problem posed by your partner.\nThe Interviewer instructions above explain which areas you should focus on in\norder to ace your interview. The content in the Welcome section of this course\nwill also help, so make sure you read it before attempting your first whiteboard\nchallenge.\u003c/p\u003e\n\n\u003cp\u003eHere are some general tips:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCommunication is key: explain the problem and your approach to the solution\u003c/li\u003e\n\u003cli\u003eAssume you haven't been given all of the information, such as all of the\ninputs you need to account for\u003c/li\u003e\n\u003cli\u003eAsk for help when you need it and be receptive to feedback\u003c/li\u003e\n\u003cli\u003eDon't be afraid to admit when you know there's a better way to do something,\ne.g. \"I know I'm brute forcing this solution and there's a more efficient way,\nbut I want to solve it first and then optimize once I know I can solve it.\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen time is up, provide a constructive review for your interviewer. Some areas\nto talk about include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDid the interviewer communicate clearly? Could you understand the challenge\nand did they answer your questions in a manner that you could understand?\u003c/li\u003e\n\u003cli\u003eDid they give you time to solve the problem or explore a possible solution\nbefore providing feedback? In other words, were they patient?\u003c/li\u003e\n\u003cli\u003eWas their feedback helpful?\u003c/li\u003e\n\u003c/ul\u003e","exportId":"whiteboard-and-calculate-big-o"}]},{"id":49426,"name":"Week 13","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"ga390bacadfa459e0b61d962eebb9a80e","items":[{"id":484321,"title":"Day 1-2: Dynamic Programming","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dynamic-programming\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/dynamic-programming/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dynamic-programming\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dynamic-programming/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine \"dynamic programming\"\u003c/li\u003e\n\u003cli\u003eUse dynamic programming to solve an algorithm problem\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eDynamic Programming\u003c/h2\u003e\n\n\u003cp\u003eDynamic Programming (DP) is an algorithmic technique for solving an optimization\nproblem by breaking it down into simpler subproblems and utilizing the fact that\nthe optimal solution to the overall problem depends upon the optimal solution to\nits subproblems.\u003c/p\u003e\n\n\u003ch2\u003eTask\u003c/h2\u003e\n\n\u003cp\u003eRevisit the Fibonacci series. Go back to your old solutions (iterative and\nrecursive). If the iterative solution keeps a whole array of values, modify it\nto only keep track of the data it needs. Next, modify the recursive solution to\ncount the number of stack frames. Copy this solution and modify it to use cached\nvalues to avoid repeating recursive calls with the same value. Benchmark each\nversion and compare.\u003c/p\u003e\n\n\u003cp\u003eFind the nth element in the Fibonacci series. The Fibonacci sequence starts with\na 0 followed by a 1. After that, every value is the sum of the two values\npreceding it. Here are the first seven values as an example: 0, 1, 1, 2, 3, 5, 8.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: 0\nOutput: 0\n\nInput: 2\nOutput: 1\n\nInput: 10\nOutput: 55\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g195cc7652235fbe68057033f94d145d2"},{"id":484322,"title":"Day 3-5: Add Two Numbers - List Nodes","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Add-Two-Numbers-List-Nodes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/Add-Two-Numbers-List-Nodes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Add-Two-Numbers-List-Nodes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Add-Two-Numbers-List-Nodes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice working with Linked Lists\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou are given two non-empty linked lists representing two non-negative integers.\nThe digits are stored in reverse order, and each of their nodes contains a\nsingle digit. Add the two numbers and return the sum as a linked list.\u003c/p\u003e\n\n\u003cp\u003eYou may assume the two numbers do not contain any leading zero, except the\nnumber 0 itself.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/add-two-numbers/example.png\" alt=\"example\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eExample 1\u003c/h3\u003e\n\n\u003cp\u003eInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807\u003c/p\u003e\n\n\u003ch3\u003eExample 2\u003c/h3\u003e\n\n\u003cp\u003eInput: l1 = [0], l2 = [0]\nOutput: [0]\u003c/p\u003e\n\n\u003ch3\u003eExample 3\u003c/h3\u003e\n\n\u003cp\u003eInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\u003c/p\u003e\n\n\u003ch3\u003eConstraints\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe number of nodes in each linked list is in the range\n\u003ccode\u003e[1, 100]- 0 \u0026lt;= Node.val \u0026lt;= 9\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eIt is guaranteed that the list represents a number that does not have leading\nzeros\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g8792be3feb25e06b0cdc28ac492364fd"}]},{"id":49428,"name":"Week 14","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g80929a51ee1d338e07925c436268efaf","items":[{"id":484325,"title":"Day 1-2: Longest Substring Without Repeating Characters","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Longest-Substring-Without-Repeating-Characters\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/Longest-Substring-Without-Repeating-Characters/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Longest-Substring-Without-Repeating-Characters\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Longest-Substring-Without-Repeating-Characters/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, find the length of the longest substring without repeating\ncharacters.\u003c/p\u003e\n\n\u003ch3\u003eExample 1\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: s = \"abcabcbb\"\nOutput: 3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eExplanation: The answer is \u003ccode\u003e\"abc\"\u003c/code\u003e, with the length of 3.\u003c/p\u003e\n\n\u003ch3\u003eExample 2\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: s = \"pwwkew\"\nOutput: 3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eExplanation: The answer is \u003ccode\u003e\"wke\"\u003c/code\u003e, with the length of 3. Notice that the answer\nmust be a substring, \u003ccode\u003e\"pwke\"\u003c/code\u003e is a subsequence and not a substring.\u003c/p\u003e\n\n\u003ch3\u003eExample 3\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: s = \"\"\nOutput: 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eBONUS\u003c/strong\u003e: For students who did not achieve O(n) on longest substring, refactor\nsolution until achieved.\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gc9cda0d7d69cc5d71cda0d4c9f3f605a"},{"id":484327,"title":"Day 3-5: Validate Binary Search Tree","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Validate-BST\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/Validate-BST/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Validate-BST\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Validate-BST/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven the root of a binary tree, determine if it is a valid binary search tree\n(BST).\u003c/p\u003e\n\n\u003cp\u003eA valid BST is defined as follows:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe left subtree of a node contains only nodes with keys less than the node's\nkey.\u003c/li\u003e\n\u003cli\u003eThe right subtree of a node contains only nodes with keys greater than the\nnode's key.\u003c/li\u003e\n\u003cli\u003eBoth the left and right subtrees must also be binary search trees.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eExample 1\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/Validate-BST/example-1.png\" alt=\"example-1\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: root = [2,1,3]\nOutput: true\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eExample 2\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/Validate-BST/example-2.png\" alt=\"example-2\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: root = [5,1,4,null,null,3,6]\nOutput: false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eExplanation: The root node's value is 5 but its right child's value is 4.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g6682209e910ab6058267098df21974de"}]},{"id":49429,"name":"Week 15","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gd80d783a542ba2fb227a43453f0af3f4","items":[{"id":484330,"title":"Week 15 Algo Practices","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Week-15-algo-practices\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Week-15-algo-practices\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Week-15-algo-practices/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eHere are some hand-picked algorithms to practice with:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://leetcode.com/problems/maximum-subarray/\"\u003eMaximum Subarray\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003eFirst just solve it however possible. BONUS: Use DP to solve. Calculate Big-O.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://leetcode.com/problems/house-robber/\"\u003eHouse Robber\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003eFirst just solve it however possible. BONUS: Use DP to solve. Calculate Big-O.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://leetcode.com/problems/is-subsequence/\"\u003eIs Subsequence\u003c/a\u003e \n\n\u003cul\u003e\n\u003cli\u003eSolve however possible, then aim for O(n). Calculate Big-O.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://leetcode.com/problems/unique-paths-iii/\"\u003eUnique Paths\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://leetcode.com/problems/super-egg-drop/\"\u003eEgg Dropping Problem\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"ge5d618acdd77816c21d43ffd1722bf93"}]}],"pages":[{"exportId":"a-note-on-testing","title":"A Note on Testing","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"note-on-testing\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/note-on-testing\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/note-on-testing/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse tests to understand your algorithm and discover test cases\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eWhen To Run Tests\u003c/h2\u003e\n\n\u003cp\u003eIf we have made a test suite available for a problem, please refrain from\nlooking at or running those tests until you have:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ePassed the tests given in the README\u003c/li\u003e\n\u003cli\u003ePassed the tests you wrote yourself\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis will give you a chance to think through the problem and write your own test\ncases, which is a skill you'll need when interviewing.\u003c/p\u003e\n\n\u003cp\u003eIn some interview settings, you won't have tests provided to confirm that your\nalgorithm meets the specifications. It's left to you and your conversation with\nthe interviewer to uncover potential edge cases that your algorithm may need to\ncover, and to find ways to verify your work on your own.\u003c/p\u003e\n\n\u003cp\u003eAfter you run our tests, you might notice that you missed some test cases: this\nis a good thing - it's a chance for you to learn and grow as a programmer. You\nwon't always think of all of the necessary test cases, but as time goes by,\nyou'll get better and better at thinking of all of the possible inputs that need\nto be solved for before a solution can be considered complete.\u003c/p\u003e","frontPage":false},{"exportId":"day-4-work-out-big-o-quiz-part-2","title":"Day 4: Work Out Big O Quiz Part 2","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"big-o-quiz-part-2\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-quiz-part-2\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-quiz-part-2/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIn this quiz, we'll calculate the time and space complexity for two of the algorithm challenges from Phase 1. After this quiz, we encourage you to look at your own solutions for the same problems and calculate Big O for them too.\u003c/p\u003e  \u003col\u003e \u003cli\u003eMultiple-choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time and space complexity for the following code. We've included both JS and Ruby for the same function.\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e // Assume function is always called with a positive number or 0  function recursiveCount(num = 0) {   if (num \u0026gt;= 10) {     return;   }    console.log(num);   recursiveCount(num + 1); } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e # Assume function is always called with a positive number or 0  def recursive_count(num = 0)   return if num \u0026gt;= 10    puts num   recursive_count(num + 1) end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eTime: O(1), Space: O(1)  \u003cul\u003e \u003cli\u003eLook at you answering questions like some kind of brilliant brain wizard! The base case never lets the value of \u003ccode\u003enum\u003c/code\u003e go over 10. This means that any time this function runs, it'll recurse at most 10 times adding up to 10 frames to the stack in memory. It runs in constant space and constant time!\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTime: O(n), Space: O(1)  \u003cul\u003e \u003cli\u003eAlmost. It does use constant space since the number of frames has an upper limit of 10. However, it does not use linear time. Since we're assuming the value of \u003ccode\u003enum\u003c/code\u003e will only be 0 or higher, what is the runtime if \u003ccode\u003enum\u003c/code\u003e is 100 versus 1?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTime: O(n), Space: O(n)  \u003cul\u003e \u003cli\u003eNot quite. This procedure doesn't use linear time or space. Assuming that \u003ccode\u003enum\u003c/code\u003e is always 0 or higher, how many frames at most will be on the stack? Think about what happnes when \u003ccode\u003enum\u003c/code\u003e is 0 versus 100.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eDon't worry. With time and practice, it'll start to sink in.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMultiple-choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time and space complexity for the following code. We've included both JS and Ruby for the same function.\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e function recursiveSearch(arr, target) {   if (arr.length === 0) {     return false;   }    if (arr[0] === target) {     return true;   }    return recursiveSearch(arr.slice(1), target); } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def recursive_search(arr, target)   return false if arr.empty?   return true if arr.first == target    recursive_search(arr[1..-1], target) end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eTime: O(n), Space: O(n)  \u003cul\u003e \u003cli\u003eExactly! The number of frames placed on the stack is equal to the length of the array, so this function runs in linear time and space. Remember, in the worst case, this procedure will recurse until the array is empty, and it will then start returning up the stack. The maximum runtime is also linear, because the total number of frames will at most be the length of the array.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTime: O(n\u003csup\u003e2\u003c/sup\u003e), Space: O(n)  \u003cul\u003e \u003cli\u003eNot quite. It will use linear space, but it won't use quadratic time. Think about how many times the algorithm will recurse in the worst case - when the target isn't in the array.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTime: O(1), Space: O(1)  \u003cul\u003e \u003cli\u003eNot really. This algorithm doesn't use constant space or time. Imagine the input array is \u003ccode\u003e[1, 2, 3]\u003c/code\u003e and the target is \u003ccode\u003e4\u003c/code\u003e. How many frames will be placed on the stack? How many recursive calls in total will be made? \u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eDon't worry. With time and practice, it'll start to sink in.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"algorithmic-problem-solving","title":"Algorithmic Problem Solving","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"algorithmic-problem-solving\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/algorithmic-problem-solving\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/algorithmic-problem-solving/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDevelop a process for solving algorithm problems\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eAn algorithm is just a procedure that solves a problem. If you're wondering if\nthat's any different from the work you've already been doing, we've got good\nnews: It's not!\u003c/p\u003e\n\n\u003cp\u003eIn this reading, we'll go over the importance of solving such problems and how\nto approach coming up with solutions.\u003c/p\u003e\n\n\u003ch2\u003eWhy Solve Algorithm Problems?\u003c/h2\u003e\n\n\u003cp\u003eWorking through these challenges will not only help you during the technical\ninterview process, it will also help you become a better programmer. Learning\nhow to break apart a problem into pieces you can understand and then code a\nsolution for is a vital skill, as is learning to think about the different types\nof inputs - or test cases - your solution must account for.\u003c/p\u003e\n\n\u003cp\u003eAs you grow as a developer, you'll find yourself leaning on these skills more\nand more, especially as your work becomes more challenging. These skills will\ntruly help you in any and every project you take on.\u003c/p\u003e\n\n\u003ch2\u003eHow to Solve a Problem\u003c/h2\u003e\n\n\u003cp\u003eTwo mistakes many programmers make are to jump into code too fast or to start\nthinking about code optimization too early. Both of these mistakes can greatly\nincrease the amount of time it takes to solve a problem and increase\nfrustration. To avoid this, here are the steps we recommend taking:\u003c/p\u003e\n\n\u003ch3\u003e1. Spend Time Understanding the Problem\u003c/h3\u003e\n\n\u003cp\u003eBefore you dive into solving the problem, take the time to read it and describe\nit in your own words. You might find it useful to rewrite the problem before\nmoving on.\u003c/p\u003e\n\n\u003cp\u003eIf you have been given test cases, look at each one, apply your understanding of\nthe problem to them to determine what the answer is, and then check if your\nanswer matches the actual answer (e.g. work it out on paper or in your head, no\ncode necessary here). If your answer doesn't match, you need to spend more time\nunderstanding the problem.\u003c/p\u003e\n\n\u003ch3\u003e2. Write Your Own Test Cases\u003c/h3\u003e\n\n\u003cp\u003eNow that you understand the problem and why the answers to the test cases are\nwhat they are, you're ready to write your own test cases! We are not\nrecommending that you write test suites in Rspec or Jest. Instead, you simply\nprint the result of calling your solution method and compare it to the answer\nyou expected.\u003c/p\u003e\n\n\u003cp\u003eBe aware that algorithm problem descriptions rarely provide all of the test\ncases you need to account for, so it's incredibly important that you also come\nup with your own. This is true when using online platforms, such as Leetcode and\nHackerRank, as well as during interviews.\u003c/p\u003e\n\n\u003ch3\u003e3. Pseudocode\u003c/h3\u003e\n\n\u003cp\u003eRemember how we asked you to check your understanding of the problem by going\nthrough the test cases and then writing your own tests? Congratulations! This\nmeans that on some level, you know how to solve the problem. Before you start\ncoding, write pseudocode, which is just a plain description of how to solve the\nproblem. For example, the pseudocode for copying only numbers from one array to\nanother might look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003einitialize empty array called result\n\niterate over each item in the input array:\n  if element is a number:\n    push item onto result\n\nreturn result\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that different people write pseudocode differently. The key is to make it\neasy to understand yourself and explain to others - this is the map to the code\nyou're about to write! I often paste my pseudocode into my workspace as\ncomments, and then code each piece alongside the matching comment.\u003c/p\u003e\n\n\u003cp\u003eYou can also test this procedure against the test cases before writing any code.\nValidating and rewriting pseudocode will likely save you time. You might also\nwish to think about additional solutions: there's always more than one way to\nsolve a problem.\u003c/p\u003e\n\n\u003ch3\u003e4. Code!\u003c/h3\u003e\n\n\u003cp\u003eNow that you have a map, convert it to code!\u003c/p\u003e\n\n\u003cp\u003eAt this point, the goal is to make it work: pass those test cases! If you're\nhaving a hard time getting all of the test cases working, check that your\npseudocode actually solves for all of those cases and then check that your code\ndoes what the pseudocode says it should.\u003c/p\u003e\n\n\u003ch3\u003e5. Make It Clean and Readable\u003c/h3\u003e\n\n\u003cp\u003eOnce your solution is well, a solution, it's time to refactor your code so that\nit's easy to read, not just for you but also for others. Use well-named\nvariables and convert blocks of code to methods when necessary. If you find any\nunneeded or redundant code, delete it.\u003c/p\u003e\n\n\u003cp\u003eDon't forget to test your code again!\u003c/p\u003e\n\n\u003ch3\u003e6. Optimize?\u003c/h3\u003e\n\n\u003cp\u003eDon't optimize your code for time or space complexity (e.g. how long it takes to\nrun or how much memory it's using) unless you absolutely need to. There are\nthree major situations that call for optimization:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe solution is hanging on certain test cases, and therefore cannot pass since\nit's taking too long\u003c/li\u003e\n\u003cli\u003eYou were asked to do so\u003c/li\u003e\n\u003cli\u003eYou think it would be fun to try\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe hope these steps help you solve the problems you're about to encounter.\nRemember, they can be applied to all types of problems, including building web\napps. Don't be afraid to spend more time thinking and planning than coding. Take\nit from those of us who have been coding for years: we often spend more time\nthinking, talking, and writing than we do coding.\u003c/p\u003e\n\n\u003cp\u003eBefore we go, we'd like to leave you with some final tips:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eTalk to yourself while you code: think out loud\u003c/li\u003e\n\u003cli\u003eConsider recording your screen and voice as you solve a problem so you can\nreview your performance\u003c/li\u003e\n\u003cli\u003eTake your time and be patient with yourself!\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"day-1-time-complexity-quiz","title":"Day 1: Time Complexity Quiz","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"time-complexity-quiz\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/time-complexity-quiz\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/time-complexity-quiz/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003col\u003e \u003cli\u003eMultiple-choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following code. We've included both JS and Ruby for the same function.\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e function logLetter(string) {   for (const letter of string) {     console.log(letter);   } } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def log_letter(string)   string.chars.each { |letter| puts letter } end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(n)  \u003cul\u003e \u003cli\u003eCorrect! The runtime directly correlates to the length of the string. The loop is the weakest link and the number of iterations depends on the string's length.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(1)  \u003cul\u003e \u003cli\u003eNot quite. The function doesn't run in constant time - its runtime will change for different string lengths.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(n\u003csup\u003e2\u003c/sup\u003e)  \u003cul\u003e \u003cli\u003eNot quite. This is a lot slower than our function. Note that the function doesn't contain a nested loop or other markers that would indicate quadractic time.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(log n)  \u003cul\u003e \u003cli\u003eNot quite. Our function is slower than this.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eThat's OK! With study and practice, you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMultiple choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following code. We've included both JS and Ruby for the same function.\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e function findIndexOfElement(array, target) {   return array.indexOf(target); } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def find_index_of_element(array, target)   array.index(target) end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(n)  \u003cul\u003e \u003cli\u003eCorrect! The runtime directly correlates to the length of the array. The array method that searches for the element will look through the entire array in the worst case.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(1)  \u003cul\u003e \u003cli\u003eNot quite. The function doesn't run in constant time - its runtime will change for different array lengths.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(n\u003csup\u003e2\u003c/sup\u003e)  \u003cul\u003e \u003cli\u003eNot quite. This is a lot slower than our function. Note that the function doesn't contain a nested loop or other markers that would indicate quadractic time.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(log n)  \u003cul\u003e \u003cli\u003eNot quite. Our function is slower than this.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eThat's OK! With study and practice, you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMultiple Choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following code. We've included both JS and Ruby for the same function.\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e function badCounting(array) {   let count = 0;      array.forEach((value, idx) =\u0026gt; {     array.forEach((testValue, testIdx) =\u0026gt; {       if (testIdx !== idx \u0026amp;\u0026amp; value === testValue) {         ++count;       }     });   });    return count / 2; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def bad_counting(array)   count = 0    array.each_with_index do |value, idx|     array.each_with_index do |testValue, testIdx|       if testIdx != idx \u0026amp;\u0026amp; testValue == value         count += 1       end     end   end    count end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(n\u003csup\u003e2\u003c/sup\u003e)  \u003cul\u003e \u003cli\u003ePerfect! There is a nested loop in this code, and it iterates over the entire array for every single element in the input array.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(n)  \u003cul\u003e \u003cli\u003eNot quite. This function is a lot slower than this. How many total iterations will occur for an array of 3 items.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(1)  \u003cul\u003e \u003cli\u003eNot quite. The function doesn't run in constant time - its runtime will change for different array lengths.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(log n)  \u003cul\u003e \u003cli\u003eNot quite. Our function is slower than this.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eThat's OK! With study and practice, you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"day-2-big-o-stack-quiz","title":"Day 2: Big O Stack Quiz","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"big-o-stack-quiz\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-stack-quiz\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-stack-quiz/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIn this quiz we'll ask you to calculate the time complexity for several of the Stack class methods. Remember that we used an Array as the underlying data structure for our class. If you don't know the time complexity for an Array method, you may need to Google.\u003c/p\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e peek() {   return this.stack[this.size() - 1]; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def peek   @stack.last end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003eCorrect! Peeking at the last item takes constant time. An Array is the underlying data structure, and accessing an element by its index is always done in constant time. For the JS example, getting the size is also constant, so Big O is the same.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(n): Linear time  \u003cul\u003e \u003cli\u003eNot quite. Keep in mind that for linear time operations, the amount of time depends on the size of the input. In this case, it would then depend on the size of the stack. However, we used an Array as the underlying data structure. What's Big O for accessing an Array element by index?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(log n): Logarithmic time  \u003cul\u003e \u003cli\u003eNot quite. Keep in mind that for logarithmic time operations, the input gets divided as it's operated upon. In this case, it would then depend on the size of the stack. However, we used an Array as the underlying data structure. What's Big O for accessing an Array element by index?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e search(target) {   for (let i = -1; i \u0026gt;= -this.size(); --i) {     if (this.stack[this.size() + i] === target) {       return Math.abs(i) - 1;     }   }    return -1; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def search(target)   @stack.each_with_index do |item, idx|     return size - idx - 1 if item == target   end    -1 end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(n): Linear time  \u003cul\u003e \u003cli\u003eCorrect! In the worst case, we'll have to traverse the whole stack, so the runtime is directly proportional to the number of items in the stack.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003eNot quite. What if the stack has many items and the target isn't in the stack? How will that affect the runtime?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(log n): Logarithmic time  \u003cul\u003e \u003cli\u003eNot quite. Keep in mind that for logarithmic time operations, the input gets divided as it's operated upon. Notice that the method iterates through the items in the stack.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e isFull() {   return this.size() === this.limit; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def isFull?   size === @limit end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003eYes! Getting the size of the stack takes constant time because it calls \u003ccode\u003elength\u003c/code\u003e upon the underlying array. Getting the \u003ccode\u003elimit\u003c/code\u003e and comparing it to the size also takes constant time.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(n): Linear time  \u003cul\u003e \u003cli\u003eNot quite. What is Big O for getting the length of an Array or accessing an attribute on an object? What is Big O for comparison operations, such as checking for equality?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"day-5-big-o-review-quiz","title":"Day 5: Big-O Review Quiz","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"big-o-review-quiz\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-review-quiz\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-review-quiz/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWhen calculating Big O, we calculate for the worst case, focus on the weakest link, and drop the coefficients.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eTrue  \u003cul\u003e \u003cli\u003eYes! Big O cares about what will happen in the worst case scenario and simplifies its notation by dropping coefficients.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eFalse  \u003cul\u003e \u003cli\u003eNot quite. Which part do you think is not true?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know.  \u003cul\u003e \u003cli\u003eDon't worry. With time and practice, it'll start to sink in.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWhat is the difference between calculating time complexity versus space complexity for recursive procedures?\u003c/p\u003e  \u003cul\u003e \u003cli\u003eTime complexity compares the input size to the total number of stack frames over time. Space complexity compares the largest number of frames that will be on the stack in one moment of time to the input size.  \u003cul\u003e \u003cli\u003eCorrect! Time complexity is interested in all of the stack frames, while space complexity asks how deep will it go?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eSpace complexity compares the input size to the total number of stack frames over time. Time complexity compares the largest number of frames that will be on the stack in one moment of time to the input size.  \u003cul\u003e \u003cli\u003eNot quite. Think about it this way: if you want to know how long it takes to get somewhere, you need to count up all of the minutes it takes to get there. If you're picking up and dropping off passengers along the way, you need to think about the largest number of passengers that will be in your car at any time, rather than the total number of passengers during the whole trip, to determine who you can pick up when.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eThere is no difference. They are both calculated in the same way.  \u003cul\u003e \u003cli\u003eNot quite. There is a difference. You may wish to study some more.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know.  \u003cul\u003e \u003cli\u003eDon't worry. With time and practice, it'll start to sink in.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eLogarithmic time O(log n) is slower than linear time O(n).\u003c/p\u003e  \u003cul\u003e \u003cli\u003eFalse  \u003cul\u003e \u003cli\u003eCorrect! Logarithmic time is faster than linear time.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTrue  \u003cul\u003e \u003cli\u003eNot quite. Keep in mind that an algorithm might be logarithmic if it operates on subsets of the input, e.g. the input is divided on each operation, therefore reducing the total amount of work to be done.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know.  \u003cul\u003e \u003cli\u003eDon't worry. With time and practice, it'll start to sink in.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time and space complexity for the following code. We've included both JS and Ruby for the same function.\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e function bigSum(arr) {     let total = 0;      function add(depth = 0) {     if (depth === 2) {         return;     }          arr.forEach(num =\u0026gt; {         total += num;       add(depth + 1);     });   }      add();      return total; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def big_sum(arr, depth = 0, total = 0)   return total if (depth == 2)    arr.each do |num|     total += num     total = big_sum(arr, depth + 1, total)   end    total end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eTime: O(n\u003csup\u003e2\u003c/sup\u003e), Space: O(n)  \u003cul\u003e \u003cli\u003eCorrect! This code is similar to a loop within a loop where iterating over one element results in iterating over all of the elements again. This means it runs in quadratic time since the number of stack frames will equal the size of the input squared. The space is linear because the number of frames on the stack when it's at its deepest is proportional to the input size: specifically there will be \u003ccode\u003en\u003c/code\u003e frames on the stack at the deepest layer.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTime: O(n\u003csup\u003e2\u003c/sup\u003e), Space: O(n\u003csup\u003e2\u003c/sup\u003e)  \u003cul\u003e \u003cli\u003eNot quite. This code is similar to a loop within a loop where iterating over one element results in iterating over all of the elements again. This means it runs in quadratic time since the number of stack frames will equal the size of the input squared. However, the space required is not quadratic. What is the largest number of frames that will be on the stack if the array has 2 elements versus 3 elements. Remember, frames get popped from the stack as recursive methods start returning.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTime: O(n), Space: O(n)  \u003cul\u003e \u003cli\u003eNot quite. The space is linear because the number of frames on the stack when it's at its deepest is proportional to the input size: specifically there will be \u003ccode\u003en\u003c/code\u003e frames on the stack at the deepest layer. However, the time is not linear. What is the total number of stack frames over time if the array length is 2 versus 4?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know.  \u003cul\u003e \u003cli\u003eDon't worry. With time and practice, it'll start to sink in.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time and space complexity for the following code. We've included both JS and Ruby for the same function.\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e function balancingParentheses(string) {   let missing = 0;   let openings = 0;    for (let i = 0; i \u0026lt; string.length; ++i) {     if (string[i] === '(') {       ++openings;       continue;     }      if (openings \u0026gt; 0) {       --openings;     } else {       ++missing;     }   }    return missing + openings; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def balancing_parentheses(string)   missing = 0   openings = 0    string.chars.each do |char|     if char == '('       openings += 1       next     end      if openings \u0026gt; 0        openings -= 1     else       missing += 1     end   end    missing + openings end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eTime: O(n), Space: O(n)  \u003cul\u003e \u003cli\u003eYes! The weakest links for time and space are the same thing: the input array. The algorithm must iterate over the entire array and it also has the potential to take up the most space. So both time and space are linear.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTime: O(n), Space: O(1)  \u003cul\u003e \u003cli\u003eNot quite. The time complexity is linear, since the algorithm iterates over the entire array. It may seem like the space is constant because all of the additionally stored data is constant (integer variables). However, we have to consider the space taken by the input itself, which will scale linearly with the input.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTime: O(n), Space: O(log n)  \u003cul\u003e \u003cli\u003eNot quite. The time complexity is linear, since the algorithm iterates over the entire array. For space complexity: what's the weakest link and how will the amount of space it requires change with the length of the input? Keep in mind that we must consider the amount of space taken up by the input also.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know.  \u003cul\u003e \u003cli\u003eDon't worry. With time and practice, it'll start to sink in.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"day-2-big-o-linked-list-quiz","title":"Day 2: Big O Linked List Quiz","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"big-o-linked-list-quiz\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-linked-list-quiz\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-linked-list-quiz/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIn this quiz we'll ask you to calculate the time complexity for several of the methods declared inside the LinkedList class.\u003c/p\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e print() {   this.iterate(node =\u0026gt; console.log(node.value)); } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def print   iterate { |node| puts node.value } end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(n): Linear time  \u003cul\u003e \u003cli\u003eCorrect! The number of Nodes in the Linked List determines how many values are printed, so this method runs in linear time.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003eNot quite. How many times will the values be printed to the console?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e addFirst(node) {   node.next = this.head;   this.head = node; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def add_first(node)   node.next_node = @head   @head = node end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003eCorrect! There are two operations here that both run in constant time, so Big O is O(1).\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(2): Constant time  \u003cul\u003e \u003cli\u003eNot quite. Remember that we need to simplify our notation, so constant time is always expressed as O(1).\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(log n): Logarithmic time  \u003cul\u003e \u003cli\u003eNot quite. Keep in mind that for logarithmic time operations, the input gets divided as it's operated upon. Here we're just setting the \u003ccode\u003ehead\u003c/code\u003e attribute to a new value and the \u003ccode\u003enext\u003c/code\u003e attribute also.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e removeFirst() {   const oldHead = this.head;    if (this.head !== null) {     this.head = this.head.next;   }    return oldHead; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def remove_first   old_head = @head   @head = @head.next_node unless @head.nil?   old_head end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003eYes! Updating attributes runs in constant time! How does this compare to calling \u003ccode\u003eshift\u003c/code\u003e on an Array?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(n): Linear time  \u003cul\u003e \u003cli\u003eNot quite. What is Big O for accessing an attribute on an object?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e remove(idx) {   if (idx === 0) {     return this.removeFirst();   }    let oldNode = null;    this.iterate((node, count) =\u0026gt; {     if (count === idx - 1) {       oldNode = node.next;       node.next = node.next.next;        return true;     }   });     return oldNode; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def remove(idx)   if idx.zero?     return remove_first   end    iterate do |node, count|     if count == idx - 1       old_node = node.next_node       node.next_node = node.next_node.next_node       return old_node     end   end end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(n): Linear time  \u003cul\u003e \u003cli\u003eYes! Iterating over the list to find the correct location is the weakest link and depends on the provided index. Inserting the node and updating the \u003ccode\u003enext\u003c/code\u003e pointers is a constant time operation, so iteration wins the Battle of the Big O, giving us linear time.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003eNot quite. What is Big O for iterating until the correct location is found?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"welcome-to-technical-interview-preparation","title":"Welcome to Technical Interview Preparation","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"welcome-to-technical-interview-prep\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-to-technical-interview-prep\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-to-technical-interview-prep/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain the technical interview process\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\u003cem\u003ePlease note that completion of this content is not required for graduation or\nmoving to the next Phase. It is optional. Please prioritize the required\ncoursework.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eIn addition to preparing a portfolio of awesome projects to show off to your\nfuture employer, you'll also need to be prepared for technical interviews. In\nthis part of the course, we'll help you prepare by asking you to solve a series\nof problems on algorithms and/or data structures. You may find some problems\neasy and others incredibly difficult. Don't worry - this is normal. It takes\ntime to get used to solving these types of problems.\u003c/p\u003e\n\n\u003cp\u003eBefore we get into how to approach progressing through this section, let's talk\nabout the two types of technical interviews.\u003c/p\u003e\n\n\u003ch2\u003eTwo Types of Technical Interviews\u003c/h2\u003e\n\n\u003cp\u003eYour technical interview may be held asynchronously or synchronously. During an\nasynchronous technical interview, you may be asked to solve algorithmic problems\nin a timed environment by yourself. For a synchronous interview, you will likely\nbe asked to whiteboard and solve the problem in front of your interviewer.\u003c/p\u003e\n\n\u003cp\u003eAsync technical interviews typically require candidates to problem solve alone.\nOnce the solution is submitted, the hiring team will review your solution and\ndetermine whether you should move forward in the hiring process. At this point,\nthey'll likely require that most or all problems be solved and will also\nconsider the quality of the solution/s.\u003c/p\u003e\n\n\u003cp\u003eDuring synchronous interviews, the interviewer is likely looking to see how you:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWork in a team\u003c/li\u003e\n\u003cli\u003eHandle feedback\u003c/li\u003e\n\u003cli\u003eTalk technically\u003c/li\u003e\n\u003cli\u003eHandle obstacles\u003c/li\u003e\n\u003cli\u003eApproach solving a problem / think\u003c/li\u003e\n\u003cli\u003eEvaluate different approaches to solving a problem and make decisions\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAt this stage, you may be able to move forward in the hiring process if you\ndemonstrate good communication skills, logical thinking, perseverance, calm\nunder pressure, and graciousness towards your interviewer's feedback even if you\nare unable to solve the problem. Asking good questions to fully understand the\nproblem or get unstuck are normally welcome. Interviewers also typically expect\nyou to come up with your own test cases to ensure the problem is actually\nsolved. This portion of the interview might require you to largely solve the\nproblem alone on a whiteboard or IDE, or through pair programming where the\ninterviewer is either the driver or navigator. Many interviewers are forgiving\nof syntax errors, and they generally don't expect you to have every piece of the\ncore language memorized.\u003c/p\u003e\n\n\u003cp\u003eDuring this portion of the course, we will be preparing you for both types of\ninterviews, so it's important to take the time to solve as many problems as you\ncan alone and to complete the paired assignments, if applicable.\u003c/p\u003e\n\n\u003ch2\u003eHow to Progress Through This Section\u003c/h2\u003e\n\n\u003cp\u003eWe recommend approaching these problems in order by yourself since each problem\nincreases in difficulty. For a problem that is meant to be solved on the same\nday, work on it for 30 minutes. If you can't solve it in 30 minutes, work on\nsomething else, and then come back to it and give yourself up to 30 more\nminutes. For problems that are meant to be solved over the course of several\ndays, set aside 30 to 60 minutes each day to work on them. If you reach the time\nlimit and have not solved the problem, look at our solution or someone else's\nand take time to understand why it works. Some days, due to your workload, you\nmay need to set a shorter time limit; we recommend a minimum of 20 minutes\ntotal.\u003c/p\u003e\n\n\u003cp\u003eIf you fall behind, e.g. you didn't solve Week 1 Day 2's problem on time, keep\nin mind that we usually have bonus problems and spare time available in Week 3\nof any Phase. You can always use this time to catch up on problems you missed.\nDon't worry if you don't finish all of the problems before the next Phase, you\ncan always come back to them when you have time or even after graduation.\u003c/p\u003e\n\n\u003cp\u003eFor any type of problem, if you were able to pass most of the test cases but\njust can't quite solve a couple of the edge cases, consider looking for a\nsolution to compare yours to. If we provide a solution, you can compare it to\nours, but you can also ask other students and search the Internet. Take the time\nto understand why the solutions work and consider working on your solution until\nit works given what you've learned.\u003c/p\u003e\n\n\u003ch2\u003eSome Things to Keep in Mind\u003c/h2\u003e\n\n\u003cp\u003eYou may struggle with some or many of these problems. Be patient with yourself\nand trust that with time and practice, you'll improve. You'll be amazed at how\nmuch you progress with each week or month!\u003c/p\u003e\n\n\u003cp\u003eIf you look at others' solutions, be aware that shorter doesn't mean better. Aim\nfor a solution that makes sense to you, which you can also explain to others.\nThree lines of easy-to-understand code is better than one line of confusing\ncode.\u003c/p\u003e\n\n\u003cp\u003eIf you use an online platform that provides information on how fast your code\nruns or how well it utilizes memory, take that information with a giant grain of\nsalt. Many of those platforms do not tell you how they arrive at those results,\nand you may find that the results vary greatly even when running the same code.\nYou might also find that someone with a similar solution to yours has wildly\ndifferent performance results - an indication that the platform isn't\ncalculating results correctly.\u003c/p\u003e\n\n\u003cp\u003eLastly, try not to compare yourself to others at this point. Everyone progresses\nat a different pace, and that's OK. The key is to keep trying while taking care\nof yourself mentally and physically.\u003c/p\u003e","frontPage":false},{"exportId":"welcome","title":"Welcome","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"welcome-to-algorithms-and-data-structures-inperson\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/welcome-to-algorithms-and-data-structures-inperson/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-to-algorithms-and-data-structures-inperson\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-to-algorithms-and-data-structures-inperson/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003cp\u003eWelcome to algorithms and data structures! In an effort to better prepare you for technical interviews and increase your confidence, we’ve assembled a list of readings and challenges for you to work through daily. Please note that this content is optional. You don’t need to complete it to progress through each Phase or graduate. You should, however, plan on attempting all of the activities in week 1 at the very least during a Phase. This will allow you to pair program and start honing your interviewing skills.\u003c/p\u003e\n\u003cp\u003eWe recommend going through the content in order. Always set a time limit, so you don’t spend too long on a single problem. Remember, your core coursework comes first! You can always work on this when you have free time or even after you graduate.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Content in this Data Structures and Algorithms course is not supported by the Pair with a Coach team.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eAccess the content by clicking Modules in the nav bar on the left.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eGood luck and happy coding! You’ve got this!\u003c/p\u003e","frontPage":true},{"exportId":"day-2-introduction-to-space-complexity","title":"Day 2: Introduction to Space Complexity","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"intro-to-space-complexity\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-space-complexity\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-space-complexity/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCalculate space complexity using Big O notation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSpace complexity measures how much working memory an algorithm requires.\nSpecifically it measures how the space requirements grow as the input grows.\nSound familiar? If this reminds you of time complexity, you're correct! We use\nthe same Big O notation to describe how much space a procedure needs in the\nworst case.\u003c/p\u003e\n\n\u003cp\u003eJust like time complexity, we calculate space complexity when we're considering\ncompeting solutions or when we have specific space requirements we must meet. In\ngame development, for example, engineers are often allocated upper limits for\nhow much space each process may use, such as running the audio engine or\nrendering certain types of effects.\u003c/p\u003e\n\n\u003cp\u003eIf you're still struggling with the concept of time complexity, you might want\nto take 15 minutes to research Big O and get more comfortable with it before\nmoving forward. Here are two resources you might wish to read:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.interviewcake.com/article/java/big-o-notation-time-and-space-complexity\"\u003eInterview Cake: Big O Notation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/\"\u003eRob Bell: A Beginner's Guide to Big O Notation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eRefresher\u003c/h2\u003e\n\n\u003cp\u003eThe important things to remember when calculating time complexity are the same\nfor space complexity:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCalculate for the worst case\u003c/li\u003e\n\u003cli\u003eFocus on the weakest link (the part that will take up the most space)\u003c/li\u003e\n\u003cli\u003eIgnore the other details\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eCommon Notations\u003c/h3\u003e\n\n\u003cp\u003eHere are some of the commonly used Big O values, though there are more, in order\nfrom most desirable to least desirable:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eConstant O(1): The amount of space required never changes, regardless of the\ninput\u003c/li\u003e\n\u003cli\u003eLogarithmic O(log n): As the size of the input increases exponentially, the\namount of space required grows linearly\u003c/li\u003e\n\u003cli\u003eLinear O(n): The amount of space required is equal to the size of the input\u003c/li\u003e\n\u003cli\u003eQuadratic O(n\u003csup\u003e2\u003c/sup\u003e): The amount of space required is the square of the\ninput\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCalculating Space Complexity\u003c/h2\u003e\n\n\u003cp\u003eWhen we calculate space complexity, we consider the size of the input as well as\nthe extra space we're allocating for the algorithm to complete successfully.\nLet's take a look at some examples to see what this means.\u003c/p\u003e\n\n\u003ch3\u003eConstant Space O(1)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction add(x, y):\n  return x + y\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis function adds two numbers and returns the result. The inputs will be\nintegers, and the return value will also be an integer. It doesn't matter what\nthose integers are, the space requirements will always be the same for any given\ninputs.\u003c/p\u003e\n\n\u003ch3\u003eLogarithmic Space O(log n)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e/* for sorted arrays only */\n\nfunction binary_search(array, target):\n  if array is empty:\n    return false\n\n  middle = array[array length / 2]\n\n  if middle == target:\n    return true\n\n  if middle \u0026lt; target:\n    return binary_search(left half of array)\n  else:\n    return binary_search(right half of array)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe function above is recursive and requires logarithmic space: as the input\nsize grows exponentially, the space required grows linearly.\u003c/p\u003e\n\n\u003cp\u003eEach time it recurses it cuts the input array in half. If you recall from the\ntime complexity reading, an algorithm \u003cem\u003emight\u003c/em\u003e take O(log n) runtime if the input\nis consistently being divided. The same is true for space complexity.\u003c/p\u003e\n\n\u003cp\u003eSince the above method is recursive, we can think of the space in terms of the\nnumber of stack frames required for any input. If the target value isn't in the\ninput array, the number of frames will be as follows:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eInput Length\u003c/th\u003e\n\u003cth\u003eFrames\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e10\u003c/td\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003ch3\u003eLinear Space O(n)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction sum_array(array):\n  sum = 0\n\n  iterate over array:\n    sum = sum + array element\n\n  return sum\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis procedure stores an integer variable and requires an input array to run. If\nwe were to code this fully using a \u003ccode\u003efor\u003c/code\u003e or \u003ccode\u003ewhile\u003c/code\u003e loop, we'd also have to\nstore another variable for the iteration (the one commonly known as \u003ccode\u003ei\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eThe integer variables, such as \u003ccode\u003esum\u003c/code\u003e and \u003ccode\u003ei\u003c/code\u003e would require constant space, since\nthey'll only ever store a single integer each. The input array, however, will\nhave varying space requirements because its length is not fixed. The function\ncould be called with an array that's empty or contains 1,000 elements.\nTherefore, this procedure requires O(n) space: the input array is the weakest\nlink!\u003c/p\u003e\n\n\u003ch3\u003eQuadratic Space O(n\u003csup\u003e2\u003c/sup\u003e)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e/* a really useless function */\n\nfunction quadratic_recurse(num):\n  total_times = num * num\n\n  function recurse(count):\n    if count == total_times:\n      return\n\n    recurse(count + 1)\n\n  recurse(0)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis function is recursive and requires quadratic space. Once again, we can\nthink of the required space in terms of total stack frames. If the input number\nis 1, 1 stack frame is required. If the input is 2, 4 stack frames, and if the\ninput is 4, 16 stack frames are required.\u003c/p\u003e\n\n\u003ch2\u003eRecursive Gotcha\u003c/h2\u003e\n\n\u003cp\u003eWhen thinking about the space complexity of a recursive function, we need to\nconsider how deep the recursion will go in the worst case. In other words, we\naren't interested in the total number of stack frames over time, but rather, the\ndeepest depth or the largest number of frames that will be on the stack at any\ngiven time. Keep in mind that the stack grows and shrinks as recursive calls are\nmade and then begin returning. A recursive call increases the stack, while\nhitting a return statement reduces its size.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction big_sum(array):\n  total = 0\n\n  function add(count):\n    if count == array length:\n      return\n\n    iterate over each element in array:\n      total = total + element\n      add(count + 1)\n\n  add(0)\n  return total\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe above function adds array length number of frames to the stack for every\nelement in the input array. Let's say the input array is \u003ccode\u003e[1, 2]\u003c/code\u003e. \u003ccode\u003eadd\u003c/code\u003e will\nrecurse with a \u003ccode\u003ecount\u003c/code\u003e of 1, and will then recurse again with a \u003ccode\u003ecount\u003c/code\u003e of 2, so\ntwo frames are on the stack. At this point the \u003ccode\u003ecount\u003c/code\u003e equals the array length,\nso the frame will be popped from the stack, reducing its size. As it turns out,\nthe largest number of frames on the stack (or the deepest depth), equals O(n) -\ni.e. the length fo the input array - for this function.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe can use Big O notation to represent the space complexity of an algorithm,\nsimilar to how we use it for time complexity. To calculate the space complexity,\nwe must consider all of the data required for the algorithm to run. We can then\npinpoint the weakest link with the worst case in mind and use that to determine\nBig O. And don't forget, we have to consider how much space the input requires!\u003c/p\u003e\n\n\u003ch2\u003eFurther Resources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.baeldung.com/cs/space-complexity\"\u003eUnderstanding Space Complexity\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.studytonight.com/data-structures/space-complexity-of-algorithms#\"\u003eSpace Complexity of Algorithms\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"day-4-underneath-hashes","title":"Day 4: Underneath Hashes","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"hash-table\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/hash-table\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/hash-table/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain how programming languages implement hashes\u003c/li\u003e\n\u003cli\u003eIdentify the runtime complexity of common hash methods in Big O notation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eNow it's time to formally introduce you to the hash. When we talk about hashes\nin this lesson, we're referring to the general data structure known as a \u003ccode\u003eHash\u003c/code\u003e\nin Ruby, as an \u003ccode\u003eObject\u003c/code\u003e in JavaScript, a \u003ccode\u003eDictionary\u003c/code\u003e in Python, and so on.\nJust about every language has an implementation of this data structure!\u003c/p\u003e\n\n\u003cp\u003eHashes are used for storing key-value pairs. This allows for quick retrieval of\ndata — the Big O for accessing a value in a hash is constant time: O(1). But how\ndoes it work under the hood?\u003c/p\u003e\n\n\u003ch2\u003eHash Functions\u003c/h2\u003e\n\n\u003cp\u003eFor a hash to work, we use a \u003cstrong\u003ehash function\u003c/strong\u003e to determine where in memory to\nstore information related to that key. Later, we use the same hash function to\ndetermine where to search for a given key.\u003c/p\u003e\n\n\u003cp\u003eOne way to think about how hashes relate to hash functions is thinking about how\nwe find a book in a library. We do this by telling a librarian the title and\nauthor of a book, and the librarian tells us precisely where to find the book.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3-us-west-2.amazonaws.com/curriculum-content/algorithms/dewey-decimal-arrangement.jpg\" alt=\"library book example\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn this analogy, our \u003cstrong\u003ekey\u003c/strong\u003e is the title and author of the book, which we can\nuse to determine the appropriate card catalog id. The card catalog id (which\ncomes from the Dewey Decimal System above — think of that as our \u003cstrong\u003ehash\nfunction\u003c/strong\u003e) tells us exactly where to find the book. If the book is there, we\nhave our book and all of the information inside. If nothing is there, there is\nno book.\u003c/p\u003e\n\n\u003cp\u003eLet's start by inserting some books into a hash table structure. We have the\nfollowing books: \u003cem\u003eThe Bible\u003c/em\u003e, \u003cem\u003eAlexander Hamilton\u003c/em\u003e, \u003cem\u003eIntroduction to Physics\u003c/em\u003e,\nand \u003cem\u003eWar and Peace\u003c/em\u003e. Based on our hash function, we store the books in the\nfollowing locations:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003cth style=\"text-align: center\"\u003eBook\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e000\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e100\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e200\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eThe Bible\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e300\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e400\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e500\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eIntroduction to Physics\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e600\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e700\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e800\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eWar and Peace\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e900\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eAlexander Hamilton\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eYou will see that while the Dewey Decimal System assigns us one of a range of\nnumbers, we adapt its formula to store each book at the lowest number possible\nfor each section. So based on that, The Bible is assigned 200, because it falls\nunder religion. Accordingly, we also assign Introduction to Physics number 500,\nWar and Peace 800 and Alexander Hamilton 900.\u003c/p\u003e\n\n\u003cp\u003eBecause we assigned each of our books according to this formula, when we\nretrieve a book, we do not need to look through every index to find our books.\nInstead, we just look at the place of the book based on the Dewey Decimal\nSystem.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/geroge-peabody-library-horizontal-large-gallery.jpg\" alt=\"A massive library\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can \u003cem\u003ealso\u003c/em\u003e use our formula to tell us both where to insert a book, as well as\nto know if a book exists in our collection. If someone asks us if \u003cem\u003eEloquent\nJavascript\u003c/em\u003e is in our hash table, we simply visit our index at location 600, see\nthat nothing is there, and can confidently reply that the book is not located\nthere.\u003c/p\u003e\n\n\u003cp\u003eWith a hash table, we look at the data in our key, run it through our hash\nfunction to determine where to place the element and associated data. Later, we\nalso use the information in the key, run it through our hash function to tell us\nwhere to retrieve this data. With this process, we achieve our goal of \u003cstrong\u003eO(n)\u003c/strong\u003e\n(constant time) for inserting and retrieving elements, irrespective of the\nnumber of elements in our collection.\u003c/p\u003e\n\n\u003ch3\u003eHash Table Collisions\u003c/h3\u003e\n\n\u003cp\u003eOur hash table currently looks like the following:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003cth style=\"text-align: center\"\u003eBook\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e000\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e100\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e200\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eThe Bible\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e300\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e400\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e500\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eIntroduction to Physics\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e600\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e700\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e800\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eWar and Peace\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e900\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003cem\u003eAlexander Hamilton\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eWhat happens if we need to store another book, this time \u003cem\u003eIntroduction to\nBiology\u003c/em\u003e? Well, our adapted Dewey Decimal System tells us to store the key at\nprecisely index 500. The only problem is that the slot is already filled. We\nhave just encountered a \u003cstrong\u003ecollision\u003c/strong\u003e. A collision is where our hash function\noutputs an index that is already assigned to another key in our hash table.\u003c/p\u003e\n\n\u003cp\u003eTo handle our collision, we apply a technique called \u003cem\u003eseparate chaining\u003c/em\u003e. With\nseparate chaining, each index points to a linked list. So in our example above\nwe could place both \u003cem\u003eIntroduction to Physics\u003c/em\u003e and \u003cem\u003eIntroduction to Biology\u003c/em\u003e in\nthe place linked list is located at index 500. Applying the separate chaining\ntechnique, our hash table looks like the following:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003cth style=\"text-align: center\"\u003eBook\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e000\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e100\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e200\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e[ \"\u003cem\u003eThe Bible\u003c/em\u003e\" ]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e300\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e400\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e500\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e[ \"\u003cem\u003eIntroduction to Physics\u003c/em\u003e\", \"\u003cem\u003eIntroduction to Biology\u003c/em\u003e\" ]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e600\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e700\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e800\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e[ \"\u003cem\u003eWar and Peace\u003c/em\u003e\" ]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e900\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e[ \"\u003cem\u003eAlexander Hamilton\u003c/em\u003e\" ]\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eIn the worst case scenario, all of our inserted elements collide, and we have to\ntraverse a linked list of length \u003ccode\u003en\u003c/code\u003e to retrieve an element, so we have \u003cstrong\u003eO(n)\u003c/strong\u003e\nruntime. However, on average collisions do not occur, so we achieve constant\ntime for lookup, insertion and deletion \u003cem\u003eon average\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003eIdentifying Good Hash Functions\u003c/h3\u003e\n\n\u003cp\u003eProgramming languages that implement hashes use a hash function that minimizes\nthe chance of a collision occurring. Some properties of a good hash function are:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eMakes use of all information provided by a given key to maximize the number\nof possible hash values. Note that the real Dewey Decimal System does a\nbetter job at this: different titles by different authors map to different\nvalues.\u003c/li\u003e\n\u003cli\u003eMaps similar keys to very different values - making collisions much less likely.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we learned about \u003cstrong\u003ehash tables\u003c/strong\u003e. Hash tables use a \u003cstrong\u003ehash\nfunction\u003c/strong\u003e to output a \u003cstrong\u003ehash value\u003c/strong\u003e. The hash value determines where to place\nthe element in memory. Because a hash function produces the same hash value for\na given element, it also gives us fast lookup time to retrieve an element.\u003c/p\u003e\n\n\u003cp\u003eWhen a hash function outputs the same hash value for two different elements, we\nhave a collision. We can resolve a collision by employing separate chaining\nwhere each hash value points to a linked list, and when there is a collision, we\nattach the element to the linked list.\u003c/p\u003e\n\n\u003cp\u003eBecause retrieving elements from a linked list is O(n), programming languages\nuse hash functions that avoid collisions as much as possible.\u003c/p\u003e\n\n\u003cp\u003eWhen you use a hash to solve an algorithm problem, it's useful to know how\nhashes work under the hood in order to understand their runtime. Here's a\nsummary of the Big O of common hash methods. While collisions can occur that may\nresult in worse performance than listed below, we can generalize the runtime as\nfollows:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMethod\u003c/th\u003e\n\u003cth\u003eBig O\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eAccess (looking for a value with a known key)\u003c/td\u003e\n\u003ctd\u003eO(1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSearch (looking for a value without a known key)\u003c/td\u003e\n\u003ctd\u003eO(n)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInsertion\u003c/td\u003e\n\u003ctd\u003eO(1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDeletion\u003c/td\u003e\n\u003ctd\u003eO(1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e","frontPage":false},{"exportId":"whiteboard-and-calculate-big-o","title":"Whiteboard and Calculate Big O","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dsa-whiteboard-and-calculate-big-o\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-whiteboard-and-calculate-big-o\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-whiteboard-and-calculate-big-o/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithms in a technical interview setting\u003c/li\u003e\n\u003cli\u003eIdentify the Big O time complexity of an algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eFor this activity, you and your partner will each choose a problem and solve it\nin front of one another, and you will also calculate the time complexity for the\nsolution. You may select a problem you have already solved or a problem you have\nnot yet solved during this Phase. You may complete this activity using an actual\nwhiteboard, if available, or in the IDE of your choosing, such as VS Code or an\nonline REPL.\u003c/p\u003e\n\n\u003cp\u003eKeep in mind that these challenges tend to make people nervous, so remember to\nalways be kind, patient, and encouraging. Also be aware that nerves can cause\npeople to come up with some pretty weird solutions to problems, so remember to\nbring your empathy with you!\u003c/p\u003e\n\n\u003cp\u003ePlan to spend 15 minutes in each role. This means you and/or your partner might\nnot have enough time to finish the solution, and that's OK. If you can\nreasonably spend more time on this, you can, but do put a time limit on it. Be\nsure to calculate Big O for time complexity even if your solution isn't\ncomplete. If you can, try to reason about and discuss what Big O would be if you\nhad completed it based on your pseudocode.\u003c/p\u003e\n\n\u003ch2\u003eInstructions for Interviewer\u003c/h2\u003e\n\n\u003cp\u003eAs the interviewer your job will be to first present the problem. Explain the\nchallenge to your partner and provide some example test cases. You are not\nexpected to provide every possible test case or edge case. Instead, provide just\nenough detail for the interviewee to understand the problem and ask clarifying\nquestions. Example: \"For this challenge, your function will accept a single\nstring as input and return it in reverse. So if it were to receive 'cat', it\nwould return 'tac'.\"\u003c/p\u003e\n\n\u003cp\u003eYou will also need to answer questions. Your partner might ask you to confirm\ntheir understanding of the problem or whether or not they should handle certain\nedge cases. If you don't know the answer to a question, it's OK to say \"I don't\nknow\" or \"I'll let you decide.\" Sometimes the interviewer doesn't have the\nanswers.\u003c/p\u003e\n\n\u003cp\u003eNotice when your partner gets stuck and needs a nudge in the right direction.\nProvide helpful tips or hints, but don't give away the answer. Ideally, your\npartner will ask questions when they get stuck, but if you notice that they're\nstruggling with something for a little too long, don't be afraid to give a\nlittle nudge. You can also ask in advance if your partner would like a hint\nbefore providing advice.\u003c/p\u003e\n\n\u003cp\u003eWhen time is up, provide a constructive review of your partner's performance.\nSome areas to talk about include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eProblem explanation: did your partner explain the problem back to you in their\nown words and confirm their understanding before coding? Did they ask\nclarifying questions when necessary?\u003c/li\u003e\n\u003cli\u003eTesting: did your partner check their understanding against the given test\ncase/s? Did they write their own?\u003c/li\u003e\n\u003cli\u003ePseudocoding: did your partner explain what they were going to do out loud\nbefore coding and with pseudocode? Did they check their pseudocode against the\ntest cases?\u003c/li\u003e\n\u003cli\u003eSolution: did your partner solve the problem? Was their syntax correct? Did\nthey handle all of the test cases? Were variables and functions named\nappropriately? How readable was the code?\u003c/li\u003e\n\u003cli\u003eOpenness to feedback: Did they ask for feedback when necessary? Were they\nreceptive to your feedback?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eUltimately, it is more important for the interviewer to evaluate the\ninterviewee's communication during this exercise, so if time is an issue, focus\nyour review there rather than on the solution itself. When providing feedback,\nbe specific, so your partner has an opportunity to improve. Also structure your\nfeedback into two sections. For example, you might talk about what went well and\nthen what can be improved, rather than mixing them together.\u003c/p\u003e\n\n\u003ch2\u003eInstructions for Interviewee\u003c/h2\u003e\n\n\u003cp\u003eAs the interviewee, your job will be to solve the problem posed by your partner.\nThe Interviewer instructions above explain which areas you should focus on in\norder to ace your interview. The content in the Welcome section of this course\nwill also help, so make sure you read it before attempting your first whiteboard\nchallenge.\u003c/p\u003e\n\n\u003cp\u003eHere are some general tips:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCommunication is key: explain the problem and your approach to the solution\u003c/li\u003e\n\u003cli\u003eAssume you haven't been given all of the information, such as all of the\ninputs you need to account for\u003c/li\u003e\n\u003cli\u003eAsk for help when you need it and be receptive to feedback\u003c/li\u003e\n\u003cli\u003eDon't be afraid to admit when you know there's a better way to do something,\ne.g. \"I know I'm brute forcing this solution and there's a more efficient way,\nbut I want to solve it first and then optimize once I know I can solve it.\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen time is up, provide a constructive review for your interviewer. Some areas\nto talk about include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDid the interviewer communicate clearly? Could you understand the challenge\nand did they answer your questions in a manner that you could understand?\u003c/li\u003e\n\u003cli\u003eDid they give you time to solve the problem or explore a possible solution\nbefore providing feedback? In other words, were they patient?\u003c/li\u003e\n\u003cli\u003eWas their feedback helpful?\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"whiteboard-big-o","title":"Whiteboard Big O","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dsa-whiteboard-big-o\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-whiteboard-big-o\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-whiteboard-big-o/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify the Big O time complexity of an algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe recommend completing this activity during weeks 2 or 3 of Phase 2. This way,\nyou will have had some practice calculating Big O before pairing off.\u003c/p\u003e\n\n\u003cp\u003eFor this activity, you and your partner will take turns calculating the time\ncomplexity using Big O notation for a problem you solved during Phase 1. Think\nof this exercise as being more collaborative and less formal than other\nwhiteboarding exercises. In other words, you and your partner should communicate\nfreely and work together to come up with the appropriate calculation.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou and your partner should each choose a different problem from Phase 1\u003c/li\u003e\n\u003cli\u003eShare your solution to the chosen problem either on a whiteboard or via a\nscreenshare\u003c/li\u003e\n\u003cli\u003eDetermine the time complexity for your solution\n\n\u003cul\u003e\n\u003cli\u003eExplain your thinking and work with your partner to come up with the answer\u003c/li\u003e\n\u003cli\u003eTake turns typing or whiteboarding\u003c/li\u003e\n\u003cli\u003ePlan to start the conversation and whiteboard/type when evaluating your\nown solution\u003c/li\u003e\n\u003cli\u003eRemember to use the correct notation, e.g. O(n) or O(1)\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"day-5-big-o-set-quiz","title":"Day 5: Big O Set Quiz","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"big-o-set-quiz\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-set-quiz\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-set-quiz/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIn this quiz we'll ask you to calculate the time complexity for several of the MySet class methods. Remember that we used a Hash/Object as the underlying data structure for our class. If you don't know the time complexity for a method, you may need to Google.\u003c/p\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e constructor(iterable) {   if (!(iterable === undefined ||      Array.isArray(iterable) ||      typeof iterable === 'string')) {       throw new Error('MySet only accepts iterables or nothing on initialization!');   }    this.data = {};    if (iterable) {     for (const el of iterable) {       this.data[el] = true;     }   } } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def initialize(iterable = nil)   raise 'MySet only accepts iterables or nothing on initialization!' unless      iterable.nil? || iterable.kind_of?(Array) || iterable.kind_of?(String)    @data = {}    unless iterable.nil?     items = iterable.kind_of?(String) ? iterable.split('') : iterable      items.each { |el| @data[el] = true }   end end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(n): Linear time  \u003cul\u003e \u003cli\u003eCorrect! The worst case is if an Array or String is provided as an argument. In that case, we iterate over the input and add each item to \u003ccode\u003edata\u003c/code\u003e, which is a linear-time operation.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003eNot quite. This would be true if the Array or String were always the same length, but an Array or String of any length could be provided.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e add(item) {   this.data[item] = true;   return this; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def add(item)   @data[item] = true   self end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003ePerfect! Accessing a value by key in a Hash/Object takes constant time, so does returning the instance.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(2): Constant time  \u003cul\u003e \u003cli\u003eNot quite. Remember that we have to simplify our notation, so constant time is always expressed as O(1), even if we perform many constant-time operations.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(n): Linear time  \u003cul\u003e \u003cli\u003eNot quite. You may wish to look up Big O for accessing values by key in a Hash.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e has(item) {   return !!this.data[item]; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def has(item)   !!@data[item] end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003eYes! Accessing a value by key takes constant time. \u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(n): Linear time  \u003cul\u003e \u003cli\u003eNot quite. What is Big O for accessing a value by key in a Hash or Object? \u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-recursion","title":"Introduction to Recursion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"introduction-to-recursion\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/introduction-to-recursion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/introduction-to-recursion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite recursive methods\u003c/li\u003e\n\u003cli\u003eDefine the \"base case\" of a recursive method\u003c/li\u003e\n\u003cli\u003eExplain the role of the call stack in a recursive method\u003c/li\u003e\n\u003cli\u003eIdentify when to use recursion to solve algorithm problems\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eA recursive method is defined as any method that calls itself.\u003c/p\u003e\n\n\u003cp\u003eTypically, recursion is used in a manner similar to a loop: a procedure is run\nover and over again until it reaches a stopping point. Recursive methods must\ncall themselves to be considered recursive.\u003c/p\u003e\n\n\u003cp\u003eWe can use recursion anywhere we use a loop, and vice versa. Sometimes, it's a\nlot easier to solve a problem using recursion, as opposed to a loop, and\nsometimes it's easier to use a loop. It takes time and practice to figure out\nwhen to choose one over the other.\u003c/p\u003e\n\n\u003cp\u003eHere is an example of a recursive method:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the above code, the method \u003ccode\u003etalk_to_myself\u003c/code\u003e is recursive because it calls\nitself. It, however, has a gigantic problem: there is no stopping point!\u003c/p\u003e\n\n\u003ch2\u003eBase Case/s (aka the stopping point/s)\u003c/h2\u003e\n\n\u003cp\u003eThe base case (or cases) tells the recursive method when to stop running. Base\ncases are often written using conditional statements (such as the \u003ccode\u003eif\u003c/code\u003e statement\nbelow), though they don't have to be (it depends on the method and what it needs\nto do).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice how the base case comes \u003cstrong\u003ebefore\u003c/strong\u003e the recursive call to the method. If\nthe base case came after, it would be unreachable and we'd have the same exact\nproblem as before: there would be no stopping point, and we'd hit a stack\noverflow.\u003c/p\u003e\n\n\u003ch2\u003eStack Overflow\u003c/h2\u003e\n\n\u003cp\u003eWhen we run a \u003ccode\u003ewhile\u003c/code\u003e loop where the terminating condition is never reached, we\nget an infinite loop. A stack overflow is similar. However, code that would\neventually terminate can also cause a stack overflow if it adds too many\n\u003cstrong\u003eframes\u003c/strong\u003e to the \u003cstrong\u003ecall stack\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003eframe\u003c/strong\u003e is like a snapshot of all of the variables and other necessary\ninformation required to finish running the process.\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003ecall stack\u003c/strong\u003e is a data structure that stores frames.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFrames are removed from the stack in last-in-first-out (LIFO) order, similar to\nhow we eat a stack of pancakes (the last pancake is put on the stack last, and\nwe eat that one first).\u003c/p\u003e\n\n\u003cp\u003eHere's a gif demonstrating how function calls are added and removed from the stack:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/intro-to-recursion/call-stack.gif\" alt=\"call stack demo\"\u003e\u003c/p\u003e\n\n\u003cp\u003eCalling a function adds it to the top of the call stack. When the function\nfinishes running (either because of an explicit or implicit return), it is\nremoved from the top of the stack. All the other functions below the top of the\nstack can't continue running until they make their way up to the top.\u003c/p\u003e\n\n\u003cp\u003eThis is why it's important that all recursive functions have a base case defined\nwith some condition that causes the function to return. Otherwise, we'll\ncontinually add more function calls to the stack with no way to stop!\u003c/p\u003e\n\n\u003ch2\u003eDepth-First Completion (LIFO)\u003c/h2\u003e\n\n\u003cp\u003eWith recursive methods, the last recursive call will complete its execution\nfirst. Once that completes, the second to last recursive call will complete, and\nso on until only the first call to the method remains. Let's go back to our\n\u003ccode\u003etalk_to_myself\u003c/code\u003e method and illustrate each frame:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003eInitial Call (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(4)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eRecursive Call 1 (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(2)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eRecursive Call 2 (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(1)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eRecursive Call 3 (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(0.5)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e=\u0026gt; Base case is hit because n \u0026lt;= 0.5, no more recursion!\u003c/li\u003e\n\u003cli\u003eRecursive Call 3 completes\u003c/li\u003e\n\u003cli\u003eRecursive Call 2 completes\u003c/li\u003e\n\u003cli\u003eRecursive Call 1 completes\u003c/li\u003e\n\u003cli\u003eInitial Call completes\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can walk through and visualize this process \u003ca href=\"https://pythontutor.com/visualize.html#code=def%20talk_to_myself%28n%29%0A%20%20return%20if%20n%20%3C%3D%200.5%0A%0A%20%20talk_to_myself%28n%20/%202%29%0Aend%0A%0Atalk_to_myself%284%29\u0026amp;cumulative=false\u0026amp;curInstr=0\u0026amp;heapPrimitives=nevernest\u0026amp;mode=display\u0026amp;origin=opt-frontend.js\u0026amp;py=ruby\u0026amp;rawInputLstJSON=%5B%5D\u0026amp;textReferences=false\"\u003ehere\u003c/a\u003e. The\nframes and their data are visualized on the right side of the screen and the\narrows on the left inside the IDE show you which line is being executed. Notice\nthat the arrow pauses on the recursive call if the base case is not hit. When a\nrecursive call finally completes execution and returns up the stack, the\nprevious call will then continue to run from that line onward (the line where\nthe recursion was triggered).\u003c/p\u003e\n\n\u003ch2\u003eDealing With Return Values\u003c/h2\u003e\n\n\u003cp\u003eLet's go back to our code example and modify it to return the string \u003ccode\u003e'done'\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e'done'\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# this is where our method pauses\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# it's also where our return values return to\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat one small change will cause the method to return the string \u003ccode\u003e'done'\u003c/code\u003e from\nevery recursive call and the initial call. But how?\u003c/p\u003e\n\n\u003cp\u003eLet's illustrate how using stack frames again:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eInitial Call (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(1)\u003c/code\u003e # pauses on the line of the recursive call\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eRecursive Call 1 (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(0.5)\u003c/code\u003e # pauses on the line of the recursive call\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e=\u0026gt; Base case is hit because \u003ccode\u003en \u0026lt;= 0.5\u003c/code\u003e, no more recursion! \u003ccode\u003e'done'\u003c/code\u003e is\nreturned to the previous frame\u003c/li\u003e\n\u003cli\u003eRecursive Call 1 receives \u003ccode\u003e'done'\u003c/code\u003e, and then returns \u003ccode\u003e'done'\u003c/code\u003e up the stack\u003c/li\u003e\n\u003cli\u003eInitial Call receives \u003ccode\u003e'done'\u003c/code\u003e, and then returns \u003ccode\u003e'done'\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBut what if we added a line of code after the recursive call? What would happen\nthen?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s1\"\u003e'done'\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# this is where our method pauses\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# it's also where our return values return to\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etalk_to_myself\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"sb\"\u003e`'The sheep goes baaaaaahhhh'`\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003eInitial Call (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(1)\u003c/code\u003e # pauses on the line of the recursive call\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eRecursive Call 1 (execution incomplete, paused on recursive call):\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etalk_to_myself(0.5)\u003c/code\u003e # pauses on the line of the recursive call\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e=\u0026gt; Base case is hit because n \u0026lt;= 0.5, no more recursion! \u003ccode\u003e'done'\u003c/code\u003e is returned to\nthe previous frame\u003c/li\u003e\n\u003cli\u003eRecursive Call 1 receives \u003ccode\u003e'done'\u003c/code\u003e and returns \u003ccode\u003e'The sheep goes baaaaaahhhh'\u003c/code\u003e up\nthe stack\u003c/li\u003e\n\u003cli\u003eInitial Call receives \u003ccode\u003e'The sheep goes baaaaaahhhh'\u003c/code\u003e, and then returns\n\u003ccode\u003e'The sheep goes baaaaaahhhh'\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can see a visualization of the code \u003ca href=\"https://pythontutor.com/visualize.html#code=def%20talk_to_myself%28n%29%0A%20%20return%20'done'%20if%20n%20%3C%3D%200.5%0A%0A%20%20%23%20this%20is%20where%20our%20method%20pauses%0A%20%20%23%20it's%20also%20where%20our%20return%20values%20return%20to%0A%20%20talk_to_myself%28n%20/%202%29%0A%20%20%60'The%20sheep%20goes%20baaaaaahhhh'%60%0Aend%0A%0Atalk_to_myself%281%29\u0026amp;cumulative=false\u0026amp;curInstr=0\u0026amp;heapPrimitives=nevernest\u0026amp;mode=display\u0026amp;origin=opt-frontend.js\u0026amp;py=ruby\u0026amp;rawInputLstJSON=%5B%5D\u0026amp;textReferences=false\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eDon't worry if this hasn't all sunk in yet. We'll get you started slowly. If you\nfind yourself having trouble with recursion, ask yourself these questions:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat is/are the base case/s? Many people add those first.\u003c/li\u003e\n\u003cli\u003eIf you're getting a stack overflow: Why isn't my base case being triggered?\u003c/li\u003e\n\u003cli\u003eWhat should the recursive call return? And how should I use that value?\n\n\u003cul\u003e\n\u003cli\u003eRemember the return value goes up the stack to the line where the recursive\ncall was made.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eWhat should the method return once it has completed execution?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can also try drawing out the frames to trace what's happening or use this\n\u003ca href=\"http://pythontutor.com/visualize.html#mode=edit\"\u003etool\u003c/a\u003e. Start small when\nmapping out what's happening, e.g. in the code examples above we used the values\n2 or 4, but never 20!\u003c/p\u003e","frontPage":false},{"exportId":"code-comparison","title":"Code Comparison","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dsa-code-comparison\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-code-comparison\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-code-comparison/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice code review\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eFor this activity, you and your partner will each choose a problem that you have\nboth completed from any Phase. Either in person or over video chat with\nscreensharing:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain your solutions to each other\u003c/li\u003e\n\u003cli\u003ePoint out the differences in how you approached solving the problem\u003c/li\u003e\n\u003cli\u003eDiscuss at least one part of your partner's solution that you liked and have\nlearned from\n\n\u003cul\u003e\n\u003cli\u003eDid your partner do something you didn't even think of?\u003c/li\u003e\n\u003cli\u003eIs there something about the way they code that jumps out to you? For\nexample, is their code extremely readable without comments?\u003c/li\u003e\n\u003cli\u003eIs their solution more efficient, e.g. better time complexity or uses less memory?\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eDiscuss at least one part of your partner's solution which you think can be\nimproved and why\n\n\u003cul\u003e\n\u003cli\u003eIs the solution difficult to understand without heavy commenting?\u003c/li\u003e\n\u003cli\u003eDoes it contain redundant/unused code?\u003c/li\u003e\n\u003cli\u003eShould helper methods have been used?\u003c/li\u003e\n\u003cli\u003eCould it easily be made more efficient? For example, were the best data\nstructures used to solve the problem?\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"problem-solving-tips","title":"Problem-Solving Tips","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"problem-solving-tips\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/problem-solving-tips\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/problem-solving-tips/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDevelop a set of questions to ask yourself when stuck on a problem\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eHow to Solve Problems and Get Unstuck\u003c/h2\u003e\n\n\u003cp\u003eIf you’re stuck, ask yourself these questions to see if they help you get unstuck:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHave I solved a similar problem before? How can I use that knowledge to solve\nthis one?\u003c/li\u003e\n\u003cli\u003eCan I break this problem down into smaller problems that are easier to solve?\u003c/li\u003e\n\u003cli\u003eWould it help to draw a picture or diagram of the problem?\u003c/li\u003e\n\u003cli\u003eWhich inputs might this method receive? Do my test cases cover the edge cases?\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eShould I draw a table that maps inputs to outputs? Your test cases will then\nmirror that table! The process of drawing the table might also reveal a\npattern, which you can then use to solve the problem.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eExample table for a problem where an Array of distinct values must be returned:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eInput\u003c/th\u003e\n\u003cth\u003eOutput\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e[1, 2, 2, 3]\u003c/td\u003e\n\u003ctd\u003e[1, 2, 3]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e[]\u003c/td\u003e\n\u003ctd\u003e[]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e[4]\u003c/td\u003e\n\u003ctd\u003e[4]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e[3, 2, 2, 10, 2, 7]\u003c/td\u003e\n\u003ctd\u003e[3, 2, 10, 7]\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDo I really understand the problem? You can prove this to yourself by solving\nit on paper without thinking about code.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCan I talk to someone about this and explain my thinking?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSometimes the act of talking to someone even if they don’t say anything\nhelps you get unstuck. It forces you to explain the problem in more\nunderstandable language.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhat information is available to me in this problem? What additional\ninformation can I derive?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you have experience writing or deriving mathematical equations, this is a\nsimilar process: list which variables and mathematical operations are\navailable and then the additional information that can be derived from that.\u003c/li\u003e\n\u003cli\u003eIf you have experience creating artwork, this is similar to the process of\nunderstanding what tools you have available to you and how you can use them,\ne.g. what colors are in my palette and how can I mix them? Or I have a\nstring, tape, and a pencil, and I need to draw a circle - how do I do that?\u003c/li\u003e\n\u003cli\u003eExample: For a problem where an Array of distinct values must be returned,\nsome of the information available includes: the Array itself, each element\nin the Array, its length, and the index of each item. You can find a list of\nArray operations available by looking at the documentation.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCan or should I create additional data to help me solve the problem? What do I\nneed to keep track of for my solution to work?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eConsider adding variables and ask yourself which data structures are\nrequired and how they might help.\u003c/li\u003e\n\u003cli\u003eExample: For a problem where an Array of distinct values must be returned,\nyou might think about using an additional Array or a Hash (aka POJO/Object\nin JavaScript or Dictionary in Python) or a Set.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHave I taken care of myself today? Do I need to eat? Am I hydrated? Am I\nrested? Do I need to move my body?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou’ll be surprised how much better your brain works after eating a good\nmeal, drinking water, resting and/or exercising! Don’t let yourself get\n\u003ca href=\"https://www.merriam-webster.com/dictionary/hangry\"\u003ehangry\u003c/a\u003e!\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"pair-programming","title":"Pair Programming","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dsa-pair-programming-phase-3\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-pair-programming-phase-3\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dsa-pair-programming-phase-3/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse pair programing to solve an algorithm problem\u003c/li\u003e\n\u003cli\u003ePractice pair programming techniques\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe recommend completing this exercise in weeks 2 or 3 of Phase 3.\u003c/p\u003e\n\n\u003cp\u003eFor this activity, you will pair up and complete a challenge from this Phase\npair-programming style! In other words, one of you will be the driver and the\nother will be the navigator, and then you will switch. Remember to be patient\nwith one another and to keep the lines of communication open. If one of you\nbecomes quiet for an extended period of time, ask a question to help keep things\nmoving.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eChoose a problem from this Phase that you were unable to solve, have not tried\nyet, or struggled with a lot\u003c/li\u003e\n\u003cli\u003eIf you are the navigator, you will guide the driver by doing the following:\n\n\u003cul\u003e\n\u003cli\u003eCommunicate in simple and small steps what code should be written\u003c/li\u003e\n\u003cli\u003eExplain why you're making those decisions\u003c/li\u003e\n\u003cli\u003eInform the driver when they're misunderstanding your directions or are\nmaking syntactical errors\u003c/li\u003e\n\u003cli\u003ePoint out any improvements that can be made to the code\u003c/li\u003e\n\u003cli\u003eIf time allows and problem has been solved, guide the driver through a\nrefactor to improve the code\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eIf you are the driver, you will write code according to the navigator's instructions:\n\n\u003cul\u003e\n\u003cli\u003eAsk questions when you don't understand the what or the why\u003c/li\u003e\n\u003cli\u003eIf you disagree with a decision, diplomatically state your disagreement and why\u003c/li\u003e\n\u003cli\u003eBe the typist\u003c/li\u003e\n\u003cli\u003eStay focused on the current task\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"day-4-big-o-queue-quiz","title":"Day 4: Big O Queue Quiz","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"big-o-queue-quiz\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-queue-quiz\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-queue-quiz/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIn this quiz we'll ask you to calculate the time complexity for several of the Queue class methods. Remember that we used an Array as the underlying data structure for our class. If you don't know the time complexity for an Array method, you may need to Google.\u003c/p\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e dequeue() {   return this.queue.shift(); } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def dequeue   @queue.shift end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(n): Linear time  \u003cul\u003e \u003cli\u003eCorrect! We're guessing you Googled this one or had a little knowledge nugget already tucked away in your brain. Removing an element from the front of the queue takes linear time because the Array must be re-indexed after the 0th element is removed.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003eNot quite. We suggest Googling the time complexity of calling shift on an Array. As it turns out, it's not quite as simple as just removing the element. Other work also occurs.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e search(target) {   return this.queue.indexOf(target); } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def search(target)   @queue.index(target) || -1 end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(n): Linear time  \u003cul\u003e \u003cli\u003eCorrect! In the worst case, we'll have to traverse the whole queue, so the runtime is directly proportional to the number of items in the queue.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003eNot quite. What if the queue has many items and the target isn't in it? How will that affect the runtime?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(log n): Logarithmic time  \u003cul\u003e \u003cli\u003eNot quite. Keep in mind that for logarithmic time operations, the input gets divided as it's operated upon. Notice that the method iterates through the items in the queue one by one.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time complexity for the following method:\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e size() {   return this.queue.length; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def size   @queue.length end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(1): Constant time  \u003cul\u003e \u003cli\u003eYes! Getting the size of the queue takes constant time because it calls \u003ccode\u003elength\u003c/code\u003e upon the underlying array. \u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(n): Linear time  \u003cul\u003e \u003cli\u003eNot quite. What is Big O for getting the length of an Array or accessing an attribute on an object? \u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eWith time and practice, it'll start to sink in. Keep studying and you'll get there.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"day-1-introduction-to-big-o-notation","title":"Day 1: Introduction to Big O Notation","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"intro-to-big-o\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-big-o\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-big-o/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine Big O notation\u003c/li\u003e\n\u003cli\u003eCalculate time and space complexity using Big O notation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's say we were trying to solve a problem and we weren't sure which solution\nto choose. We might think about which solution is easier to code or understand,\nbut we could also think about which solution runs faster. That last case is\nwhere Big O notation (calculating time complexity) comes in!\u003c/p\u003e\n\n\u003ch2\u003eWhat is Big O Notation?\u003c/h2\u003e\n\n\u003cp\u003eBig O notation describes the amount of time it takes for a procedure to run\nrelative to its input. For example, if the input is a string of one character:\nhow long will it take? If the input is 1,000 characters, how long then?\u003c/p\u003e\n\n\u003cp\u003eIt describes the runtime abstractly in terms of the input size and the number of\noperations that will occur, rather than milliseconds or other units of time.\nSpecifically, it describes the way in which the runtime grows as the input\ngrows. Here are some examples of what Big O notation looks like: O(n), O(1),\nO(n\u003csup\u003e2\u003c/sup\u003e). We'll get into what this means in a moment. For now, know that\nn refers to the size of the input or the input itself, e.g. the length of a\nstring or an array or a value itself, such as an integer.\u003c/p\u003e\n\n\u003ch2\u003eCalculate for the Worst Case\u003c/h2\u003e\n\n\u003cp\u003eBefore we get technical, let's use going to the grocery store as an analogy for\ncalculating time complexity.\u003c/p\u003e\n\n\u003ch3\u003eGrocery Store\u003c/h3\u003e\n\n\u003cp\u003eSo we're at the store looking for chocolate chips. The best case is that we walk\nin, and BAM, those chocolate chips are right there in front of us. The worst\ncase is that we end up walking up and down every single aisle, until finally we\nfind them. That last case is what we're interested in, and we could then\ndescribe our chocolate chip search in terms of the number of aisles in the\ngrocery store: O(aisles), because our search time grows as the number of aisles\ngrows. In other words, the amount of time it takes to find chocolatey morsels of\ngoodness depends on the number of aisles in the store.\u003c/p\u003e\n\n\u003cp\u003eIf there were 5 aisles, we could say O(5), but what if the grocery store added\nor removed aisles? We'd have to update our notation to the new value, e.g.\nO(20). This is why it's better to say O(aisles): it covers any number of aisles.\u003c/p\u003e\n\n\u003ch3\u003eFinding an Element in an Array\u003c/h3\u003e\n\n\u003cp\u003eLet's say we have an unsorted array of elements and our function needs to find\nand return a specific element. That element could be at the 0th index or it\ncould be at the last index or not in there at all, so we iterate over the array\nuntil we find it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction findElement(arr, target):\n  iterate over arr:\n    if element == target:\n      return true\n\n  return false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe're interested in the worst case, which is when the element is not in the\narray. In that case we must iterate over the entire array before returning\nfalse. We can refer to the number of elements as n, which means Big O for this\nfunction is O(n). The time it takes to run directly relates to the array's\nlength.\u003c/p\u003e\n\n\u003ch2\u003eCalculate for the Weakest Link\u003c/h2\u003e\n\n\u003cp\u003eBig O does not concern itself with every little detail in a procedure. Instead,\nit cares most about the part of the procedure that will take the longest. In\nother words, we find the part that will take the longest (the weakest link) and\ncalculate Big O for that part.\u003c/p\u003e\n\n\u003ch3\u003eGrocery Store\u003c/h3\u003e\n\n\u003cp\u003eLet's think back to our chocolate chip hunt. We discussed walking the aisles to\nsearch for those sweet nuggets, but we didn't talk about going to the store or\nwalking home. Let's pretend we live one minute away from the store, so walking\nthere always takes one minute. The time it takes to walk the aisles, on the\nother hand, depends on where the chocolate chips are. We don't need to concern\nourselves with the time it takes to walk because it's not the weakest link: it's\nalways the same amount of time. Walking the aisles is the weakest link because\nit has the potential to take up the most time.\u003c/p\u003e\n\n\u003ch3\u003eFinding a Duplicate Element in an Array\u003c/h3\u003e\n\n\u003cp\u003eLet's say we need to check if there's a duplicate of the 0th element in an array\nelsewhere in that same array. Our algorithm might look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction findDuplicate(arr):\n  zeroth_element = arr[0]\n\n  iterate over arr starting at index 1:\n    if element == zeroth_element:\n      return true\n\n  return false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe need not concern ourselves with the time it takes to grab the 0th element or\nreturn true or false - those tasks always take the same amount of time, and\ntherefore, are not the weakest link. The weakest link is the iteration over the\narray, which depends on the length of the array, so it has the potential to take\nup the most time. If the array is one element long: great, it'll be super fast.\nBut if it contains one million elements, that's going to take some time. Since\nthe amount of time directly correlates with the length of the array (which we\ncall n), Big O for this algorithm is O(n).\u003c/p\u003e\n\n\u003ch2\u003eDrop the Coefficients\u003c/h2\u003e\n\n\u003cp\u003eWhen calculating time complexity, we don't concern ourselves with coefficients\n(the numbers that come before variables in mathematics, e.g. 2n or 5x). Let's\nlook at a pseudocode example to see what this might look like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction find_lowest_and_highest(arr):\n  result = []\n  result \u0026lt;\u0026lt; iterate and find minimum in arr\n  result \u0026lt;\u0026lt; iterate and find maximum in arr\n\n  return result\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis code actually has two weakest links: iterating to find the maximum value\nand iterating to find the minimum value. Both of those procedures have a time\ncomplexity of O(n), since the minimum or maximum values could be at the end of\nthe array in the worst case. We could say that the time complexity of\nfind_lowest_and_highest is 2O(n), since the weakest link runs twice. However,\nBig O simply does not care about that, so we drop the coefficients and declare\nthat this function runs in O(n) time.\u003c/p\u003e\n\n\u003ch2\u003eCommon Time Complexities\u003c/h2\u003e\n\n\u003cp\u003eIt's a lot easier to calculate Big O if you know how the most common runtimes\nare defined. Please note that we aren't listing all of the possibilities here.\u003c/p\u003e\n\n\u003ch3\u003eConstant Time: O(1)\u003c/h3\u003e\n\n\u003cp\u003eConstant time is the best time! Algorithms or procedures that run in O(1) time\ntake the same amount of time to run regardless of the size of the input (like\nwalking to the store to get chocolate chips). Some examples of constant time\nprocedures include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMathematical operations, such as adding or subtracting numbers\u003c/li\u003e\n\u003cli\u003eAccessing an element in an array at a specific index, e.g. array[2]\u003c/li\u003e\n\u003cli\u003eAccessing a value in a Hash (Object in JS, Dictionary in Python) using a key\u003c/li\u003e\n\u003cli\u003eReturning a value\u003c/li\u003e\n\u003cli\u003ePrinting a value (e.g. to the console or command line)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAs an example, it doesn't matter if you're accessing the 2nd or 1,000th element\nin an array when you're accessing it by its index number - it'll take the same\namount of time either way!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction find_by_index(arr, index):\n  print arr[index]\n  return arr[index]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eLinear Time: O(n)\u003c/h3\u003e\n\n\u003cp\u003eLinear time is also good. The runtime for algorithms that run in O(n) time is\nproportional to the size of the input, e.g. 1 x input size or 3 x input size.\nEarlier we mentioned that finding an item in an array takes O(n) time because\nthe item could be at the very end or not in there at all, which means we must\niterate over the length of the array in the worst case. Some examples of linear\ntime procedures include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIterating over an array, e.g. to find a target value\u003c/li\u003e\n\u003cli\u003eIterating over a string\u003c/li\u003e\n\u003cli\u003ePrinting each character or element of an array or string, respectively, one by\none\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction say_hi_to_everyone(names):\n  iterate over names:\n    print \"hi \" + name\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eQuadratic Time: O(n\u003csup\u003e2\u003c/sup\u003e)\u003c/h3\u003e\n\n\u003cp\u003eQuadratic time is not good, but sometimes unavoidable. The runtime is defined as\nthe square of the input's size. For example, if we had a quadratic time\nalgorithm that took an array as an input: for an input of length 1, there would\nbe 1 operation, but for an input of length 10, there would be 100 operations.\nSome examples of algorithms that take quadratic time include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eBubble sort\u003c/li\u003e\n\u003cli\u003eSelection sort\u003c/li\u003e\n\u003cli\u003eInsertion sort\u003c/li\u003e\n\u003cli\u003eSome algorithms that contain a loop nested in another loop\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction nested_loop_quadratic_time(arr):\n  iterate over arr:\n    iterate over arr:\n      perform some operation\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the above example, the outer loop iterates over the entire input array. For\neach element in the input array, it then iterates over the entire array again.\nFor an array of length 2, there are 2 * 2 (or 4) operations, but for an array\nof length 10, there are 10 * 10 (or 100) operations.\u003c/p\u003e\n\n\u003ch3\u003eLogarithmic Time: O(log n)\u003c/h3\u003e\n\n\u003cp\u003eLogarithmic time is fantastic! It's not quite as good as constant time, but it\nis faster than linear time. If an algorithm runs in O(log n) time, time\nincreases linearly while the input increases exponentially. Let's pretend we\nhave some operation that takes 1 second to handle an input containing 10\nelements. When the input has 100 elements, that operation will take 2 seconds,\nand 1,000 elements will take 3 seconds! That's fast!\u003c/p\u003e\n\n\u003cp\u003eAn algorithm may be logarithmic if:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe weakest link always runs less than n times\u003c/li\u003e\n\u003cli\u003eEach time the input is operated upon, the size of the input is divided by some\nnumber\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAn example of an O(log n) algorithm is:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eBinary search\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction useless_log_n_loop(arr):\n  n = length of arr\n\n  while n \u0026gt; 0:\n    print arr[n]\n    n = n / 2\n    round down n to nearest integer\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eGraph of Common Time Complexities\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/Big-O-graph.png\" alt=\"Image of Big O Graph with Time vs Input\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eNeed to Know\u003c/h2\u003e\n\n\u003cp\u003eWhen we calculate Big O for a procedure, there are some runtimes we just need to\nknow (or look up). For example, it's important to know the runtime for accessing\nan element in an array or accessing a value in a Hash (aka Object or\nDictionary). Take some time to review this\n\u003ca href=\"https://www.bigocheatsheet.com/\"\u003eresource\u003c/a\u003e (bookmark it!), which includes the\nbest, average, and worst case time complexity for common operations and\nalgorithms. For now, the most important data structures to pay attention to are\narrays and hash tables.\u003c/p\u003e\n\n\u003ch2\u003eNote on Recursion\u003c/h2\u003e\n\n\u003cp\u003eWhen calculating Big O for recursive functions, we compare the total stack\nframes over time to the size of the input.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction count(stop_count, count = 0):\n  if count \u0026gt;= stop_count:\n    return 'done'\n\n  return count(stop_count, count + 1)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFor the above function the total number of frames added to the stack over time\nis directly proportional to the \u003ccode\u003estop_count\u003c/code\u003e, so Big O is O(n).\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCalculating Big O for a procedure can help you decide between several solutions\nor improve a solution you've already thought of. It takes time and practice to\nget used to Big O notation. In the coming days, we'll be asking you to calculate\nthe time complexity for problems you've already solved. We'll also show you our\nown calculations to help you along.\u003c/p\u003e","frontPage":false},{"exportId":"day-3-work-out-big-o-quiz-part-1","title":"Day 3: Work Out Big O Quiz Part 1","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"big-o-quiz-part-1\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-quiz-part-1\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/big-o-quiz-part-1/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIn this quiz, we'll calculate the time and space complexity for two of the algorithm challenges from Phase 1. After this quiz, we encourage you to look at your own solutions for the same problems and calculate Big O for them too.\u003c/p\u003e  \u003col\u003e \u003cli\u003eMultiple-choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time and space complexity for the following code. We've included both JS and Ruby for the same function.\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e function reverseString(str) {   let reversed = \"\";    for (let i = str.length - 1; i \u0026gt; -1; --i) {     reversed = reversed + str[i];   }    return reversed; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def reverse_string(str)   reversed_str = \"\"    str.chars.each do |char|     reversed_str = char + reversed_str   end    reversed_str end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eTime: O(n), Space: O(n)  \u003cul\u003e \u003cli\u003eCorrect! The runtime and space directly correlate to the length of the string. The reversed string and input will be the same length and the number of iterations over the string is also equal to the length of the string.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTime: O(1), Space: O(n)  \u003cul\u003e \u003cli\u003eNot quite. This procedure doesn't run in constant time. Take a look at how it iterates over the string. It does require linear space, however, since the reversed string will be of equal length to the input.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTime: O(n), Space: O(2n)  \u003cul\u003e \u003cli\u003eNot quite. It does run in linear time, since it iterates over each character once. However, if you recall from the readings, we always drop coefficients for Big O.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eDon't worry. With time and practice, it'll start to sink in.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMultiple-choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the time and space complexity for the following code. We've included both JS and Ruby for the same function.\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e function fibonacci(num) {   if (num \u0026lt; 2) {     return num;   }    let lastTwo = [0, 1];    for (let i = 0; i \u0026lt; num - 1; ++i) {     const sum = lastTwo[0] + lastTwo[1];     lastTwo = [lastTwo[1], sum];   }    return lastTwo[1]; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def fibonacci(num)   last_two = [0, 1]    return last_two[num] if num \u0026lt; 2    i = num - 1    while i \u0026gt; 0     sum = last_two[0] + last_two[1]     last_two = [last_two[1], sum]     i -= 1   end    last_two.last end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eTime: O(n), Space: O(1)  \u003cul\u003e \u003cli\u003eErr Mehrr Gerrd! You got it!! Time complexity is O(n) because the number of iterations through the while loop is directly proportional to the input value \u003ccode\u003enum\u003c/code\u003e, and that's the weakest link. The space complexity is constant. It doesn't matter if \u003ccode\u003en\u003c/code\u003e is 0 or 100, this algorithm always relies on the same amount of data: an integer input, an array with two elements, and a variable to track the iterations. \u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTime: O(n), Space: O(n)  \u003cul\u003e \u003cli\u003eNot quite. The time complexity is linear because the number of iterations through the while loop is directly proportional to the input value \u003ccode\u003enum\u003c/code\u003e. However, the amount of space used doesn't change with the input size. Think about what this algorithm stores if the input is 2 versus 10.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTime: O(1), Space: O(2n)  \u003cul\u003e \u003cli\u003eNot quite. Take a look at the while loop. How many iterations will occur if \u003ccode\u003enum\u003c/code\u003e is 3 versus 5? Also think about what's being stored as the input grows. Is the amount of space required changing? Does the array (\u003ccode\u003elastTwo\u003c/code\u003e, \u003ccode\u003elast_two\u003c/code\u003e) ever change in length?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eDon't worry. With time and practice, it'll start to sink in.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"day-2-space-complexity-quiz","title":"Day 2: Space Complexity Quiz","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"space-complexity-quiz\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/space-complexity-quiz\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/space-complexity-quiz/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003col\u003e \u003cli\u003eMultiple-choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the space complexity for the following code. We've included both JS and Ruby for the same function.\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e function shallowCopy(array) {   const copy = [];    array.forEach(el =\u0026gt; {     copy.push(el);   }); }  return copy; \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def shallow_copy(array)   copy = []    array.each { |el| copy \u0026lt;\u0026lt; el }    copy end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(n)  \u003cul\u003e \u003cli\u003eCorrect! The input array is the weakest link and the space required grows proportionally with the size of the array.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(1)  \u003cul\u003e \u003cli\u003eNot quite. This means that the required space would be the same regardless of the length of the array, which is not the case. The input array could be of any length.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(2n)  \u003cul\u003e \u003cli\u003eAlmost. Remember that for Big O notation, we drop the coefficients.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(n\u003csup\u003e2\u003c/sup\u003e)  \u003cul\u003e \u003cli\u003eNot quite. The space required does not grow at this high of a rate.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eTake some time to study and practice. You'll get there!\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMultiple-choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the space complexity for the following code. We've included both JS and Ruby for the same function.\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e // inputs will be integers  function speakTotal(a, b) {   const total = a + b;    return `${a} + ${b} is ${total}`; } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e # inputs will be integers  def speak_total(a, b)   total = a + b    \"#{a} + #{b} is #{total}\" end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(1)  \u003cul\u003e \u003cli\u003eExactly! It doesn't matter which integers \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e are, the space required for this function never grows.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(n)  \u003cul\u003e \u003cli\u003eNot quite. Is there a difference in the required space if \u003ccode\u003ea\u003c/code\u003e is 5 and \u003ccode\u003eb\u003c/code\u003e is 10, or \u003ccode\u003ea\u003c/code\u003e is 20 and \u003ccode\u003eb\u003c/code\u003e is 30?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(3)  \u003cul\u003e \u003cli\u003eNot quite. Remember, we need to simplify our answer for Big O. Which of the common notations is the better choice?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eTake some time to study and practice. You'll get there!\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMultiple-choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eCalculate the space complexity for the following code. We've included both JS and Ruby for the same function.\u003c/p\u003e  \u003ch3\u003eJavaScript\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e function makeExtras(string) {     const charArray = string.split('');   const extrasArray = [];      for (let i = 0; i \u0026lt; string.length; ++i) {     for (const char of string) {         extrasArray.push(char);     }   }      return extrasArray.join(''); } \u003c/code\u003e \u003c/pre\u003e  \u003ch3\u003eRuby\u003c/h3\u003e  \u003cpre\u003e \u003ccode\u003e def make_extras(string)   extras_string = ''    string.length.times do     string.chars { |char| extras_string += char }   end    extras_string end \u003c/code\u003e \u003c/pre\u003e  \u003cul\u003e \u003cli\u003eO(n\u003csup\u003e2\u003c/sup\u003e)  \u003cul\u003e \u003cli\u003eWhoooo! The returned string is the weakest link and its final size is the square of the input.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(n)  \u003cul\u003e \u003cli\u003eNot quite. How long is the returned string if the input is 1 character? What if the input is 3 characters?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eO(log n)  \u003cul\u003e \u003cli\u003eNot quite. This algorithm is definitely going to need more space. The input is never being divided here.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eTake some time to study and practice. You'll get there!\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"day-3-underneath-arrays","title":"Day 3: Underneath Arrays","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"arrays-underneath\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/arrays-underneath\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/arrays-underneath/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain how programming languages implement arrays\u003c/li\u003e\n\u003cli\u003eIdentify the runtime complexity of common array methods in Big O notation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhile you may be familiar with arrays, chances are you have not considered what\nhappens when our computer either manipulates an array by adding or removing\nelements, or retrieves information from an array. In this lesson, we'll discuss\nwhat happens when we retrieve or manipulate data in an array.\u003c/p\u003e\n\n\u003cp\u003eUnderstanding how familiar data structures work under the hood will give you a\nbetter sense of what's happening at a low level, as well as some clues as to how\nto determine the Big O of algorithms that use these data structures.\u003c/p\u003e\n\n\u003ch2\u003eArrays Under the Hood\u003c/h2\u003e\n\n\u003cp\u003eWhen we initialize an array in a programming language, the language allocates\nspace in memory for your array, and then points that starting variable to that\naddress in memory. Then the program assigns a fixed amount of memory for each\u003cbr\u003e\nelement.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/objects-tenElementArray.gif\" alt=\"ten element array\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's say my array say starts at memory address 100. Assume that the programming\nlanguage allocates eight bits of memory for each element in the array, and that\nit allocates enough space for ten elements evenly spaced in memory.\u003c/p\u003e\n\n\u003cp\u003eNow, let's try to think through how a computer program retrieves an element at a\nspecific index.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003emyAarr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ea\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyAarr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ea\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen we initialize the array and assign the letter \u003ccode\u003e\"a\"\u003c/code\u003e as the first element,\nthe programming language assigns the letter \u003ccode\u003e\"a\"\u003c/code\u003e to a specific space in memory.\nIn our example, address 100. So then, when we call \u003ccode\u003emyArr[0]\u003c/code\u003e all the program\nhas to do is go to address 100, and retrieve the element.\u003c/p\u003e\n\n\u003cp\u003eSo now, what do you think happens if we call \u003ccode\u003emyArr[3]\u003c/code\u003e, to return what is in\nthat slot. If the \u003ccode\u003emyArr\u003c/code\u003e begins at address 100, and we allocate eight bits of\nspace for each, what address does the program go to to retrieve the element at\nindex 3?\u003c/p\u003e\n\n\u003cp\u003eIs there a formula that we can come up with for retrieval? Yep!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e100 + 3 * 8 = 124\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOur programming language knows that if eight bits are allocated to each element,\nand then to retrieve an element at a specific index, the program simply visits\nan address by using the following formula:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ememoryLocationOfElement = arrayStartAddress + indexNumber * bitAllocation\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eManipulating Array Elements\u003c/h3\u003e\n\n\u003cp\u003eNow that we talked about retrieving elements from an array, let's talk about\nremoving elements from an array.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e48\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 9\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// [1, 24, 48]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePerforming an operation like \u003ccode\u003epop\u003c/code\u003e is fairly simple. Let's assume that our array\nbegins at memory address 100:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ememory address\u003c/th\u003e\n\u003cth\u003e100\u003c/th\u003e\n\u003cth\u003e108\u003c/th\u003e\n\u003cth\u003e116\u003c/th\u003e\n\u003cth\u003e124\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr.pop\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003eX\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eRemoving from the end of the array is not so bad. But removing an element from\nthe beginning involves a lot more:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ememory address\u003c/th\u003e\n\u003cth\u003e100\u003c/th\u003e\n\u003cth\u003e108\u003c/th\u003e\n\u003cth\u003e116\u003c/th\u003e\n\u003cth\u003e124\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr.shift\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003eX\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eLooking at the chart above, shifting involves moving \u003cstrong\u003eevery\u003c/strong\u003e remaining element\nto a new space in memory. The cost is equal to the number of elements in the\narray. So the time complexity of shifting is Big O(n). Adding elements to the\nbeginning of the array also will cost Big O(n), as every subsequent element would\nhave to move to different spot in memory:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ememory address\u003c/th\u003e\n\u003cth\u003e100\u003c/th\u003e\n\u003cth\u003e108\u003c/th\u003e\n\u003cth\u003e116\u003c/th\u003e\n\u003cth\u003e124\u003c/th\u003e\n\u003cth\u003e132\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003eX\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr.unshift(5)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eSo \u003ccode\u003eunshift\u003c/code\u003e is Big O(n) and \u003ccode\u003eshift\u003c/code\u003e is Big O(n). However, \u003ccode\u003epop\u003c/code\u003e and accessing\nelements using their index positions take the same amount of time regardless the\nsize of the array. That is, the time complexity is Big O(1), meaning that the\ncost of the operation does not depend on the number of elements in the array.\u003c/p\u003e\n\n\u003ch3\u003eArray Size\u003c/h3\u003e\n\n\u003cp\u003eRemember that to retrieve information from an array, we simply need to apply the\nformula \u003ccode\u003estartingAddress + index * bitAllocation\u003c/code\u003e and go to the corresponding\naddress. One problem that occurs with having all of these contiguous elements\nis that we must allocate a specific amount of space — say enough space for six\nelements. What happens when we want to add an seventh element?\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ememory address\u003c/th\u003e\n\u003cth\u003e100\u003c/th\u003e\n\u003cth\u003e108\u003c/th\u003e\n\u003cth\u003e116\u003c/th\u003e\n\u003cth\u003e124\u003c/th\u003e\n\u003cth\u003e132\u003c/th\u003e\n\u003cth\u003e140\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003e32\u003c/td\u003e\n\u003ctd\u003esong.mp3\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr.push(5)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003e32\u003c/td\u003e\n\u003ctd\u003esong.mp3\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eDo you see our problem? We want to push another element, but something else is\non those eight bits. If we move our new element to a different location, our\nformula for retrieving elements no longer works. Instead, we copy our array into\na new location in memory where there is enough space. However, notice that the\ncost of doing this is Big O(n), as we must incur a cost for each element we copy\nover.\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003enew memory address\u003c/th\u003e\n\u003cth\u003e300\u003c/th\u003e\n\u003cth\u003e308\u003c/th\u003e\n\u003cth\u003e316\u003c/th\u003e\n\u003cth\u003e324\u003c/th\u003e\n\u003cth\u003e332\u003c/th\u003e\n\u003cth\u003e340\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003e32\u003c/td\u003e\n\u003ctd\u003eX\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003earr.push(5)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e48\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003e32\u003c/td\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003ch3\u003eSummary\u003c/h3\u003e\n\n\u003cp\u003eWe saw in this section that some of the strengths and weaknesses of using an\narray. Retrieving elements by index and adding elements to the end of the array\nhas a time complexity of Big O(1), while adding or removing elements at the\nbeginning of an array is Big O(n). We also saw that because operations in our\narray rely on using neighboring locations in memory, we can run out of space.\u003c/p\u003e\n\n\u003cp\u003eHere's a summary of the Big O of common array methods:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMethod\u003c/th\u003e\n\u003cth\u003eBig O\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eAccess\u003c/td\u003e\n\u003ctd\u003eO(1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSearch\u003c/td\u003e\n\u003ctd\u003eO(n)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInsertion (end)\u003c/td\u003e\n\u003ctd\u003eO(1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInsertion (beginning)\u003c/td\u003e\n\u003ctd\u003eO(n)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDeletion (end)\u003c/td\u003e\n\u003ctd\u003eO(1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDeletion (beginning)\u003c/td\u003e\n\u003ctd\u003eO(n)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eFor problems that rely on adding or removing elements from the beginning, you're\nbetter off using a linked list, as we saw in a previous lesson. Arrays are quick\nfor accessing elements when you know their index position, and for adding and\nremoving items from the end.\u003c/p\u003e","frontPage":false},{"exportId":"day-5-data-structure-quiz","title":"Day 5: Data Structure Quiz","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"data-structure-quiz\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/data-structure-quiz\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/data-structure-quiz/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIn this quiz we'll present different programming scenarios that can be solved with several different data structures. Your job will be to choose the best one for the job based on the requirements! Pull from your Big O knowledge! Assume all answer options are valid choices (no trick questions), and that all of the necessary information about the scenario has been presented to you.\u003c/p\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eOur business handles online orders on a first-come-first-serve basis, just like a queue at the checkout of a brick-and-mortar store. We get a lot of orders and every time we go to remove one from the queue, the system responds really slowly. Adding new orders usually happens pretty quickly though. We rarely search for a specific order from a customer.\u003c/p\u003e  \u003cp\u003eWhat should we do? How should we implement the Queue class that holds all of the orders? \u003c/p\u003e  \u003cul\u003e \u003cli\u003eUse a Linked List that tracks both its head Node and tail Node as the underlying data structure  \u003cul\u003e \u003cli\u003eWhoa! Look at you go! The business stated that they rarely search for a specific order, and that they process them in the order they come in. Mostly, orders are removed from the front of the Queue and added to the end of the Queue. This means we should optimize for fast insertion at the rear and fast removal from the front. If we track both the head and tail of the Linked List, we'll get constant time insertion at at the rear and constant time removal at the front!\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eUse an Array as the underlying data structure  \u003cul\u003e \u003cli\u003eNot quite. The business stated that they get a lot of orders, so they need to optimize for adding orders to the rear of the queue and removing them from the front. Calling \u003ccode\u003eshift\u003c/code\u003e on an Array is a linear time procedure. Adding orders to the rear is constant time, except for when the Array must be moved in memory - then it's linear time. There's a less timely solution here.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eUse a Hash as the underlying data structure  \u003cul\u003e \u003cli\u003eNot quite. The business cares about the order in which the orders arrive. A Hash is not a good data structure to choose when order matters.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eKeep on studying. With time and practice, it'll start to sink in.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWe need to write an algorithm that returns \u003ccode\u003etrue\u003c/code\u003e if there are any repeating elements in the input Array and \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e  \u003cpre\u003e \u003ccode\u003e Input: [1, 2, 3] Output: false  Input: [1, 2, 1] Output: true \u003c/code\u003e \u003c/pre\u003e  \u003cp\u003eHere is our pseudocode solution:\u003c/p\u003e  \u003cpre\u003e \u003ccode\u003e function hasRepeating(array):   initialize variable seen    iterate over array:     if element in seen:       return true          add element to seen    return false \u003c/code\u003e \u003c/pre\u003e  \u003cp\u003eWhich data structure should we use for the variable called \u003ccode\u003eseen\u003c/code\u003e?\u003c/p\u003e  \u003cul\u003e \u003cli\u003eSet  \u003cul\u003e \u003cli\u003eYes! A Set stores only unique values and has O(1) lookup time. This will make it really fast to check if the element has already been seen.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eArray  \u003cul\u003e \u003cli\u003eNot quite. There's a faster choice here. Finding the element in an Array will take O(n) linear time in the worst case, since we have to iterate over the entire Array every time we check if a value has been seen or not.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eLinked List  \u003cul\u003e \u003cli\u003eNot quite. There's a faster choice here. Finding the element in a Linked List will take O(n) linear time in the worst case, since we have to iterate over the entire list every time we check if a value has been seen or not.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eKeep on studying. With time and practice, it'll start to sink in.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003col\u003e \u003cli\u003eMult choice\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWe are writing an algorithm to find the most frequently occurring String in an Array of Strings.\u003c/p\u003e  \u003cpre\u003e \u003ccode\u003e Input: ['cat', 'dog', 'bat', 'cat', 'dog', 'cat'] Output: 'cat' \u003c/code\u003e \u003c/pre\u003e  \u003cp\u003eHere is our pseudocode:\u003c/p\u003e  \u003cpre\u003e \u003ccode\u003e function findMostFrequentString(array):   initialize variable string_frequencies    iterate over array:     if string not in string_frequencies:       add string to string_frequencies with count of 1     else:       increment count for string in string_frequencies by 1    most_frequent = find string with highest count in string_frequencies   return most_frequent \u003c/code\u003e \u003c/pre\u003e  \u003cp\u003eWhich data structure should we use for \u003ccode\u003estring_frequencies\u003c/code\u003e?\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHash  \u003cul\u003e \u003cli\u003ePerfect! A Hash allows for constant time access using keys. In this case, the string will be the key and the count will be the value. This will make incrementing the counts very fast!\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e2-dimensional Array  \u003cul\u003e \u003cli\u003eNot quite. We could use a 2-dimensional Array where each string is stored in its own Array alongside a count (\u003ccode\u003e[[\"cat\", 1], [\"dog\", 3]]\u003c/code\u003e), but that would mean that every time we go to increment the count for a String, we'd be performing a linear-time operation.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eI don't know  \u003cul\u003e \u003cli\u003eKeep on studying. With time and practice, it'll start to sink in.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false}],"assignments":[{"exportId":"gd627626029a605dc3c535cf91cf9240a","title":"Bonus 1: Balancing Parentheses","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"balancing-parentheses\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/balancing-parentheses/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/balancing-parentheses\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/balancing-parentheses/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFor parentheses to be considered balanced, there must an opening parenthesis\nfollowed by a matching closing parenthesis. Given a string containing only\nparentheses, return the number of additional parentheses needed for the string\nto be considered balanced. The input string will have a minimum length of 1.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: '(()())'\nOutput: 0\n\nInput: '()))'\nOutput: 2\n\nInput: ')'\nOutput: 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb37a47f898667f852997345e5295be15","title":"Bonus 2: Roman Numeral to Integer","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"roman-numeral-to-integer\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/roman-numeral-to-integer/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/roman-numeral-to-integer\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/roman-numeral-to-integer/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eConvert the provided Roman numeral (a String) to an Integer. For more\ninformation on Roman numerals, please go to\n\u003ca href=\"https://www.mathsisfun.com/roman-numerals.html\"\u003eMath Is Fun\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe String input will always consist of uppercase letters with a minimum length\nof 1. We will only be covering numbers below 4000, so you can safely ignore the\n\"Really Big Numbers\" section on the Math is Fun page we linked to.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: 'I'\nOutput: 1\n\nInput: 'IX'\nOutput: 9\n\nInput: 'CDII'\nOutput: 402\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga84de738c1b3c12adadbe67376e0060d","title":"Bonus 3: Rotate Array Clockwise","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rotate-array-clockwise\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rotate-array-clockwise/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rotate-array-clockwise\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rotate-array-clockwise/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven an input Array, rotate \u003ccode\u003ek\u003c/code\u003e units clockwise, i.e. shift the values\nrightward \u003ccode\u003ek\u003c/code\u003e units.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ek\u003c/code\u003e is an integer that is greater than or equal to 0.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [1, 2, 3, 4], 1\nOutput: [4, 1, 2, 3]\n\nInput: [1, 2, 3], 2\nOutput: [2, 3, 1]\n\nInput: [1, 2, 3], 3\nOutput: [1, 2, 3]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gaf7c78bdc8f6ef8463786a6fbe6d643e","title":"Bonus 4: Distinct Pair Sum","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"distinct-pair-sum\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/distinct-pair-sum/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/distinct-pair-sum\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/distinct-pair-sum/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven an input array and a target value \u003ccode\u003ek\u003c/code\u003e, return all distinct pairs of\n\u003cstrong\u003econsecutive numbers\u003c/strong\u003e that add up to \u003ccode\u003ek\u003c/code\u003e. A pair is distinct if no other pair\ncontains the same numbers.\u003c/p\u003e\n\n\u003cp\u003eThe order of the pairs and order of the values in each pair does not matter,\ne.g. we consider \u003ccode\u003e[[2, 8], [7, 3]]\u003c/code\u003e to be the same as \u003ccode\u003e[[3, 7], [8, 2]]\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [0, 1, 1, 2, 0, 1, 1], 2\nOutput: [[1, 1], [2, 0]]\n\nInput: [3, 4, 2, 1, 5, 2, 8, 2], 10\nOutput: [[2, 8]]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gda91a8140529158aa03b199220990642","title":"Bonus 5: Consecutive Substrings","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"consecutive-substrings\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/consecutive-substrings/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/consecutive-substrings\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/consecutive-substrings/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven a string, return all consecutive substrings within that string consisting\nof at least one character. Substrings should be returned in the order in which\nthey appear.\u003c/p\u003e\n\n\u003cp\u003eNote than in the string \u003ccode\u003e'abc'\u003c/code\u003e, \u003ccode\u003e'ac'\u003c/code\u003e is not a consecutive substring.\u003c/p\u003e\n\n\u003cp\u003eThe input string will have a length of 0 or more.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: 'abc'\nOutput: ['a', 'ab', 'abc', 'b', 'bc', 'c']\n\nInput: 'a'\nOutput: ['a']\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g7249e650693bc806b832a709c81fa29b","title":"Bonus Algorithm: Recursive Reverse a String","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"recursive-string-reverse\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/recursive-string-reverse/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/recursive-string-reverse\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/recursive-string-reverse/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithm problems using recursion\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFor this task, you'll need to reverse a string...\u003cstrong\u003erecursively\u003c/strong\u003e! Your method\nwill receive one argument, a string, and be expected to output that string with\nits letters in reverse order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: \"hi\"\nOutput: \"ih\"\n\nInput: \"catbaby\"\nOutput: \"ybabtac\"\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eDo not call any type of built-in reverse method!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g348acf77fc52fc7948ef62ce1da45e10","title":"Bonus: Build a Doubly Linked List","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"doubly-linked-list\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/doubly-linked-list/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/doubly-linked-list\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/doubly-linked-list/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a doubly linked list data structure\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a doubly linked list class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eToday we'll be implementing a \u003cstrong\u003edoubly linked list\u003c/strong\u003e. A doubly linked list is\nlike a singly-linked list, except it has an extra attribute on each node: a\n\u003ccode\u003eprev\u003c/code\u003e pointer that points to the previous node.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/doubly-linked-list/linked_list.png\" alt=\"Linked List\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eImplement a Doubly Linked List\u003c/h2\u003e\n\n\u003cp\u003eFor this challenge, assume that only one node is added at a time, including upon\ninitialization of a new list.\u003c/p\u003e\n\n\u003ch3\u003e1. Modify the \u003ccode\u003eNode\u003c/code\u003e Class\u003c/h3\u003e\n\n\u003cp\u003eEach node should have a pointer called \u003ccode\u003eprev\u003c/code\u003e that points to the node that comes\nbefore it. If no node comes before it, it should be a falsy value, such as\n\u003ccode\u003enull\u003c/code\u003e in JS or \u003ccode\u003enil\u003c/code\u003e in Ruby.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003enode = new Node('first')\nnode.prev\n=\u0026gt; nil or null\n\nnode.prev = new Node('zeroth')\nnode.prev\n=\u0026gt; Node with value 'zeroth'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e2. Modify the \u003ccode\u003eLinkedList\u003c/code\u003e Class\u003c/h3\u003e\n\n\u003cp\u003eLook through the methods and determine which need to be modified in order to\nensure that a node's \u003ccode\u003eprev\u003c/code\u003e attribute always points to the correct Node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new LinkedList\nlist.add_first(new Node('zeroth'))\nlist.head\n=\u0026gt; Node with value 'zeroth'\nlist.head.prev\n=\u0026gt; nil or null\n\nlist.add_first(new Node('less than zero'))\nlist.head\n=\u0026gt; Node with value 'less than zero'\nlist.head.next\n=\u0026gt; Node with value 'zeroth'\nlist.head.next.prev\n=\u0026gt; Node with value 'less than zero'\n\nlist.remove_first\nlist.head\n=\u0026gt; Node with value 'zeroth'\nlist.head.prev\n=\u0026gt; nil or null\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included code from the original\n\u003ccode\u003eLinkedList\u003c/code\u003e implementation. You may also copy and paste your own.\u003c/p\u003e\n\n\u003cp\u003eWe've also included the original \u003ccode\u003eLinkedList\u003c/code\u003e tests, so you can ensure that your\ncode still functions correctly.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g5a806e28efc70b3c62c4125d6eecf9c7","title":"Bonus: Modify the Linked List to Track Tail and Size","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"linked-list-with-tail-and-size\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/linked-list-with-tail-and-size/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/linked-list-with-tail-and-size\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/linked-list-with-tail-and-size/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eImplement a common methods of a linked list class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eToday, we'll be modifying the \u003ccode\u003eLinkedList\u003c/code\u003e class we created earlier to track its\n\u003ccode\u003etail\u003c/code\u003e and \u003ccode\u003esize\u003c/code\u003e. You can use your solution or ours as starter code. We've\nincluded ours in the starter files if you wish to use it.\u003c/p\u003e\n\n\u003cp\u003eNote that this is a pretty strange implementation of a linked list and there are\nthose who would say: \"Ermahgerd! What have you done?!\" We're trying to stretch\nour skills here: that's what we've done!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/linked-list-with-tail-and-size/linked_list.png\" alt=\"Linked List\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eRefresher on Linked Lists\u003c/h2\u003e\n\n\u003cp\u003eA \u003cstrong\u003elinked list\u003c/strong\u003e is a data structure consisting of \u003cstrong\u003enodes\u003c/strong\u003e. The \u003ccode\u003ehead\u003c/code\u003e node\ndenotes the start of the list. Each node has two attributes: \u003ccode\u003evalue\u003c/code\u003e and \u003ccode\u003enext\u003c/code\u003e.\n\u003ccode\u003evalue\u003c/code\u003e stores the data we might be interested in retrieving, while \u003ccode\u003enext\u003c/code\u003e\npoints to the next node in the list. The last node, called the \u003ccode\u003etail\u003c/code\u003e, in the\nlist points to nothing (e.g. \u003ccode\u003enext\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e), and that's how we know it's the\nend!\u003c/p\u003e\n\n\u003cp\u003eWe can use another class called \u003ccode\u003eLinkedList\u003c/code\u003e to track the \u003ccode\u003ehead\u003c/code\u003e of the list.\u003c/p\u003e\n\n\u003ch2\u003eModify the \u003ccode\u003eLinkedList\u003c/code\u003e Class\u003c/h2\u003e\n\n\u003cp\u003eWe'll be tracking the \u003ccode\u003etail\u003c/code\u003e and \u003ccode\u003esize\u003c/code\u003e of the list. There are a number of ways\nto implement these features with varying time complexities. Create helper\nmethods if needed. Make sure you can explain to yourself and others why you\nchose the approach you took.\u003c/p\u003e\n\n\u003cp\u003eFor any method, such as adding or removing a Node, assume that only valid inputs\nwill be provided, such as valid indices.\u003c/p\u003e\n\n\u003cp\u003eAlso make the following assumptions:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUpon initialization of a new list, a user might provide a node that is already\nconnected to other nodes, i.e. the \u003ccode\u003ehead\u003c/code\u003e node being provided has a \u003ccode\u003enext\u003c/code\u003e\nattribute that points to another node, and that node might point to another\nnode.\u003c/li\u003e\n\u003cli\u003eAny time a node is added via any other method, such as \u003ccode\u003eadd_first\u003c/code\u003e or\n\u003ccode\u003einsert\u003c/code\u003e, that node is not yet connected to any other nodes, i.e. its \u003ccode\u003enext\u003c/code\u003e\nvalue is \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e or some other falsy value.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAs you modify the class, think about what the time complexity is for any methods\nyou add or modify.\u003c/p\u003e\n\n\u003cp\u003eWe've included all of the original tests in the test suites to ensure all of the\nmethods continue to work as expected as you modify them.\u003c/p\u003e\n\n\u003ch3\u003e1. Track the \u003ccode\u003etail\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd an attribute to \u003ccode\u003eLinkedList\u003c/code\u003e called \u003ccode\u003etail\u003c/code\u003e. When an empty list is\ninitialized, \u003ccode\u003etail\u003c/code\u003e should be a falsy value, such as \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e. As nodes\nare added and removed, the \u003ccode\u003etail\u003c/code\u003e should be updated to reflect the current\n\u003ccode\u003etail\u003c/code\u003e. Think about which methods in the class may affect the \u003ccode\u003etail\u003c/code\u003e of the\nlist.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new LinkedList\nlist.tail\n=\u0026gt; null or nil\n\nnode = new Node('it meee')\nlist.add_first(node)\nlist.tail\n=\u0026gt; Node with value 'it meee'\n\nlist.remove_first\n=\u0026gt; Node with value 'it meee'\nlist.tail\n=\u0026gt; null or nil\n\nanother_list = new LinkedList(node)\nanother_list.tail\n=\u0026gt; Node with value 'it meee'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e2. Track the \u003ccode\u003esize\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd an attribute to \u003ccode\u003eLinkedList\u003c/code\u003e called \u003ccode\u003esize\u003c/code\u003e. When an empty list is\ninitialized, \u003ccode\u003esize\u003c/code\u003e should be \u003ccode\u003e0\u003c/code\u003e. As nodes are added and removed, the \u003ccode\u003esize\u003c/code\u003e\nshould be updated to reflect the current \u003ccode\u003esize\u003c/code\u003e. Think about which methods in\nthe class may affect the \u003ccode\u003esize\u003c/code\u003e of the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new LinkedList\nlist.size\n=\u0026gt; 0\n\nnode = new Node('it meee')\nlist.add_first(node)\nlist.size\n=\u0026gt; 1\n\nlist.remove_first\n=\u0026gt; Node with value 'it meee'\nlist.size\n=\u0026gt; 0\n\nlist.add_first(node)\nlist.add_first(new Node('it not meee'))\nlist.size\n=\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e3. Super Bonus Refactor\u003c/h3\u003e\n\n\u003cp\u003eOnce you can track the \u003ccode\u003etail\u003c/code\u003e and \u003ccode\u003esize\u003c/code\u003e successfully, go through the\n\u003ccode\u003eLinkedList\u003c/code\u003e methods and see if you can refactor any to be more time-efficient.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, and explain your solution, and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb86b85a980e1df187ebf73998b76ca99","title":"Bonus: Quicksort","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"quicksort\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/quicksort/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/quicksort\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/quicksort/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the quicksort algorithm and its advantages/disadvantages\u003c/li\u003e\n\u003cli\u003eImplement the quicksort algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eQuicksort is an efficient divide and conquer algorithm for sorting data. It can\nsort in place, i.e. it does not require us to push data to a new data structure,\nand it's typically implemented as a recursive algorithm. Note that there are a\nnumber of ways to implement a quicksort.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/quicksort/quick_sort_partition_animation.gif\" alt=\"quicksort animation\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow Does Quicksort Work?\u003c/h2\u003e\n\n\u003cp\u003eThe quicksort algorithm requires us to choose a pivot element in the array. The\npivot can be at any point, such as the start, middle, or end. Next, we sort all\nof the elements that are less than the pivot to the left of the pivot, and all\nof the elements that are greater than the pivot to the right. Once this is done,\nthe pivot is at the correct location. We then repeat this process on the left\nand right sides until the whole list is sorted.\u003c/p\u003e\n\n\u003cp\u003eIn the diagram below, notice how the number 4, which is the pivot, is sorted to\nthe correct location before the recursive call is made (branching denotes the\nrecursive calls). First, we check if 1 is more than 4. It isn't so we move to\nthe next value: 7. 7 is more than 4, so it is swapped with the element before 4\n(which is 5), and 4 is then swapped with 7. This continues until every element\nbefore the pivot has been evaluated.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/quicksort/quicksort_diagram.png\" alt=\"diagram of quicksort in action\"\u003e\u003c/p\u003e\n\n\u003ch2\u003ePerformance\u003c/h2\u003e\n\n\u003cp\u003eIn the worst case, quicksort runs in quadratic time: O(n^2). This will happen\nwhen we choose the rightmost element as the pivot for an already sorted list.\nThe average run time, however, is logarithmic: O(n log n).\u003c/p\u003e\n\n\u003cp\u003eWe can improve the performance of our quicksort algorithm by choosing the middle\nelement as the pivot instead. We can potentially gain further improvements by\nsampling three or more elements and choosing the median as the pivot. However,\nchoosing too many elements for sampling will likely degrade performance, so it\nreally is a balancing act.\u003c/p\u003e\n\n\u003ch2\u003eImplement Quicksort\u003c/h2\u003e\n\n\u003cp\u003eWe'll implement the quicksort algorithm in two parts. First we'll make the\nhelper function that sorts elements to the right or left of the pivot. Once\nthat's working, we'll work on the main function that calls the helper function.\nOur tests will test the main function. It'll be up to you to ensure the helper\nfunction works.\u003c/p\u003e\n\n\u003ch3\u003e1. \u003ccode\u003epartition(array, low, high)\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe helper method \u003ccode\u003epartition\u003c/code\u003e takes three arguments: the \u003ccode\u003earray\u003c/code\u003e to operate\nupon, and a \u003ccode\u003elow\u003c/code\u003e and a \u003ccode\u003ehigh\u003c/code\u003e, which are integers denoting which portion of the\narray requires sorting. It returns the final index of the pivot element and\nperforms the following operations:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eChoose the rightmost element as the pivot\u003c/li\u003e\n\u003cli\u003eDeclare a variable called \u003ccode\u003epivotIndex\u003c/code\u003e or \u003ccode\u003epivot_index\u003c/code\u003e and set it equal to\nthe value of \u003ccode\u003ehigh\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eIterate over the array starting at the \u003ccode\u003elow\u003c/code\u003e index and ending at the \u003ccode\u003epivotIndex\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf an element to the left of the pivot is less than or equal to the pivot, continue\u003c/li\u003e\n\u003cli\u003eIf an element to the left of the pivot is greater than the pivot:\n\n\u003cul\u003e\n\u003cli\u003eSwap it with the element just before the pivot, and then swap the pivot\nwith that element (i.e. the pivot will now be at its original index - 1)\u003c/li\u003e\n\u003cli\u003eDecrement the \u003ccode\u003epivotIndex\u003c/code\u003e, since the pivot has been moved to the left by\none place\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIf an element is equal to the pivot, leave it in place\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eReturn the \u003ccode\u003epivotIndex\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eYour function should sort the array in place. This means you should not be\ncreating a new array at any point. You'll also need to decide how to best\niterate over the array. Think about which element needs to be compared to the\npivot at any given time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003earray = [3, 2, 1, 4]\npartition(array, 0, 3)\n=\u0026gt; 3\n// array = [3, 2, 1, 4]\n\narray = [3, 2, 1, 2]\npartition(array, 0, 3)\n=\u0026gt; 2\n// array = [1, 2, 2, 3]\n\narray = [2, -10, 7, 0, 1, 3]\npartition(array, 0, 5)\n=\u0026gt; 4\n// array = [2, -10, 1, 0, 3, 7]\n\narray = [2, -10, 7, 0, 1, 3]\npartition(array, 1, 3)\n=\u0026gt; 2\n// array = [2, -10, 0, 7, 1, 3]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo determine whether your function is working, check if all elements lower than\nthe pivot are to the pivot's left, while all elements greater than the pivot are\nto its right. Be sure to look at the correct subset of the array when using\nvalues other than 0 and the array's length - 1 as the \u003ccode\u003elow\u003c/code\u003e and \u003ccode\u003ehigh\u003c/code\u003e. Finally,\nthe method will return the final index of the pivot element.\u003c/p\u003e\n\n\u003ch3\u003e2. \u003ccode\u003equicksort(array, low, high)\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThis is the main method that returns a sorted array. Once again, it sorts the\narray in place - it does not create any new arrays. It achieves this by\npartitioning the array using the helper method from earlier, and then\nrecursively processing all elements to the left of the pivot and all elements to\nthe right of the pivot. The steps are:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIf \u003ccode\u003elow\u003c/code\u003e is less than \u003ccode\u003ehigh\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003ePartition the array using the \u003ccode\u003elow\u003c/code\u003e and \u003ccode\u003ehigh\u003c/code\u003e values\u003c/li\u003e\n\u003cli\u003eStore the result of calling \u003ccode\u003epartition\u003c/code\u003e in a variable (recall that the\nresult is the final index of the pivot)\u003c/li\u003e\n\u003cli\u003eRecurse with the left side of the array (use \u003ccode\u003elow\u003c/code\u003e and \u003ccode\u003ehigh\u003c/code\u003e to specify\nthe starting and stopping points)\u003c/li\u003e\n\u003cli\u003eRecurse with the right side of the array (use \u003ccode\u003elow\u003c/code\u003e and \u003ccode\u003ehigh\u003c/code\u003e to specify\nthe starting and stopping points)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eElse return the array\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003earr = [3, 2, 1, 4]\nquicksort(arr, 0, 3)\n=\u0026gt; [1, 2, 3, 4]\n\narr = [1, 2, 2, 3, 4]\nquicksort(arr, 0, 4)\n=\u0026gt; [1, 2, 2, 3, 4]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eBonus: Reduce the Number of Swaps\u003c/h3\u003e\n\n\u003cp\u003eOur algorithm for \u003ccode\u003epartition\u003c/code\u003e always performs two swaps when a number higher\nthan the pivot is encountered. Can you modify the algorithm so that it performs\nonly one swap in this case? It should then perform one final swap to put the\npivot in the correct location before returning the pivot index. Take a look at\nthe gif at the top of this README if you need to see it in action.\u003c/p\u003e\n\n\u003ch3\u003eSuper Bonus: Choose the Middle Element as the Pivot\u003c/h3\u003e\n\n\u003cp\u003eCan you modify the algorithm to use the middle element as the pivot? There's\nmore than one way to achieve this functionality! What about using the median of\nseveral values? Or a random element?\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g195cc7652235fbe68057033f94d145d2","title":"Day 1-2: Dynamic Programming","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dynamic-programming\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/dynamic-programming/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dynamic-programming\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dynamic-programming/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine \"dynamic programming\"\u003c/li\u003e\n\u003cli\u003eUse dynamic programming to solve an algorithm problem\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eDynamic Programming\u003c/h2\u003e\n\n\u003cp\u003eDynamic Programming (DP) is an algorithmic technique for solving an optimization\nproblem by breaking it down into simpler subproblems and utilizing the fact that\nthe optimal solution to the overall problem depends upon the optimal solution to\nits subproblems.\u003c/p\u003e\n\n\u003ch2\u003eTask\u003c/h2\u003e\n\n\u003cp\u003eRevisit the Fibonacci series. Go back to your old solutions (iterative and\nrecursive). If the iterative solution keeps a whole array of values, modify it\nto only keep track of the data it needs. Next, modify the recursive solution to\ncount the number of stack frames. Copy this solution and modify it to use cached\nvalues to avoid repeating recursive calls with the same value. Benchmark each\nversion and compare.\u003c/p\u003e\n\n\u003cp\u003eFind the nth element in the Fibonacci series. The Fibonacci sequence starts with\na 0 followed by a 1. After that, every value is the sum of the two values\npreceding it. Here are the first seven values as an example: 0, 1, 1, 2, 3, 5, 8.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: 0\nOutput: 0\n\nInput: 2\nOutput: 1\n\nInput: 10\nOutput: 55\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc9cda0d7d69cc5d71cda0d4c9f3f605a","title":"Day 1-2: Longest Substring Without Repeating Characters","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Longest-Substring-Without-Repeating-Characters\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/Longest-Substring-Without-Repeating-Characters/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Longest-Substring-Without-Repeating-Characters\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Longest-Substring-Without-Repeating-Characters/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, find the length of the longest substring without repeating\ncharacters.\u003c/p\u003e\n\n\u003ch3\u003eExample 1\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: s = \"abcabcbb\"\nOutput: 3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eExplanation: The answer is \u003ccode\u003e\"abc\"\u003c/code\u003e, with the length of 3.\u003c/p\u003e\n\n\u003ch3\u003eExample 2\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: s = \"pwwkew\"\nOutput: 3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eExplanation: The answer is \u003ccode\u003e\"wke\"\u003c/code\u003e, with the length of 3. Notice that the answer\nmust be a substring, \u003ccode\u003e\"pwke\"\u003c/code\u003e is a subsequence and not a substring.\u003c/p\u003e\n\n\u003ch3\u003eExample 3\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: s = \"\"\nOutput: 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eBONUS\u003c/strong\u003e: For students who did not achieve O(n) on longest substring, refactor\nsolution until achieved.\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb6c38b468c3468830b270708f90a320d","title":"Day 1: Recursive Counting","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"recursive-count\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/recursive-count/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/recursive-count\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/recursive-count/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e\u003cstrong\u003eFork and then clone me!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's ease into recursion. For this challenge, we'd like you to convert the following while loop that counts to a recursive method that counts. We've included while loops for Ruby and JS below. Your method is successful if it prints numbers 0-9. Remember: it must call itself!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you get a stack overflow, just breathe. We all get them - the trick is to get used to them and carry on solving the problem.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some languages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding:\u003c/h2\u003e\n\n\u003cp\u003eYou may wish to optionally write pseudocode and an explanation of your solution for this problem.\u003c/p\u003e\n\n\u003cp\u003eFeel free to run our tests whenever you like.\u003c/p\u003e\n\n\u003ch2\u003eHow to run your code\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g887ec7d570de2d11348bbd705dae4278","title":"Day 1: Reverse a String","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"reverse-string\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/reverse-string/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/reverse-string\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/reverse-string/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFor this task, you'll need to write a method that reverses a string. Your method\nwill receive one argument, a string, and be expected to output that string with\nits letters in reverse order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: \"hi\"\nOutput: \"ih\"\n\nInput: \"catbaby\"\nOutput: \"ybabtac\"\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eDo not call any type of built-in reverse method!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003ePlease solve the problem using iteration.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g33eeb88ff0ded86d640efd7740876f91","title":"Day 1: What Is a Graph?","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"what-is-a-graph\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-graph/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-graph\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-graph/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the characteristics of a graph\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a graph\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIf you're familiar with trees, such as the binary tree, then we've got good news\nfor you! You're already familiar with graphs, because they're very similar!\u003c/p\u003e\n\n\u003cp\u003eA graph is a data structure that represents how different points or objects are\nconnected to one another. In the image below, we have a graph showing how\ndifferent people are connected. For example, we see that Anne is connected to\nBob, Bob is connected to Carl, and so on. We can also see that Diana is not\ndirectly connected to Elisa.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/what-is-a-graph/friends.jpg\" alt=\"friends network\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eWhy Use Graphs?\u003c/h2\u003e\n\n\u003cp\u003eGraphs can help us find the shortest distance between two points or determine if\ntwo points are even connected. Dijkstra's algorithm, for example, uses a graph\nto find the shortest distance between two points, and is still used today to\nfigure out how to get from point A to point B on a map. And Facebook uses a\ngraph database instead of a relational database because it performs better for\ntheir use case, which is all about representing relationships between people,\nplaces, and other things.\u003c/p\u003e\n\n\u003cp\u003eThere are other use cases for graphs, but we'll let you Google those.\u003c/p\u003e\n\n\u003ch2\u003eKey Terms\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eNode / vertex: A point on the graph, similar to a node in a tree\u003c/li\u003e\n\u003cli\u003eEdge: A connection or path between two points, which we can visualize as a\nline connecting two nodes, such as the line/edge from Anne to Bob in the image\nat the top of this README\u003c/li\u003e\n\u003cli\u003eAdjacency: Two nodes or vertices are adjacent if they are connected by an edge\n(e.g. Anne and Bob are adjacent)\u003c/li\u003e\n\u003cli\u003ePath: A sequence of edges between two points, similar to plotting a route from\nyour favorite bakery to your home (a path from Anne to Carl: Anne -\u0026gt; Bob -\u0026gt;\nCarl)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eTypes of Graphs\u003c/h2\u003e\n\n\u003cp\u003eThere are several different types of graphs. We'll mention a few here:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUndirected graph: The edges do not point in any specific direction (e.g. Anne\ncan point to Bob and Bob can point back to Anne)\u003c/li\u003e\n\u003cli\u003eDirected graph: Each edge is uni-directional (similar to a Linked List, e.g.\nAnne can point to Bob, but Bob cannot point back to Anne)\u003c/li\u003e\n\u003cli\u003eWeighted graph: Each edge has a cost associated with it (e.g. if Elisa wants\nto talk to Diana, she can ask Carl or Anne to make that connection, but if\nElisa's relationship with Carl is on the rocks, she might weight that more\nheavily than going through Anne, with whom she is best friends)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou don't need to memorize all of this, nor will we be building all of these\ngraphs. We just want you to be aware of them in case you decide to look further\ninto graphs (there are more though!). For example, if you wanted to learn more\nabout Dijkstra's algorithm, you might want to look into weighted graphs. We'll\nbe focusing on undirected graphs.\u003c/p\u003e\n\n\u003ch2\u003eHow to Represent a Graph\u003c/h2\u003e\n\n\u003cp\u003eWe can use a number of different underlying data structures to create a graph.\nFor example, we can build a graph from a tree data structure, similar to a\nLinked List or Binary Tree. Or we can use a hash (object in JS, dictionary in\nPython...) or a multi-dimensional array as the underlying data structure. In\nthis challenge, we'll be creating our own Graph class using a hash/object as the\nunderlying data structure. The key will be to maintain the rules of the graph,\nor as we prefer to say its \"graphiness\".\u003c/p\u003e\n\n\u003cp\u003eWe suggest you read more about the different methods for representing a graph.\nTry Googling \"adjacency matrix\" to get yourself started.\u003c/p\u003e\n\n\u003ch2\u003eOur Graph\u003c/h2\u003e\n\n\u003cp\u003eToday we'll be creating a Graph class that uses a hash/object as the underlying\ndata structure. It'll be an undirected graph consisting of adjacency lists. In\nother words, each key in the hash/object will have a value that is a set. Each\nset will be a list of adjacent nodes. Let's take another look at our friends\nimage and then see what it might look like as a graph:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/what-is-a-graph/friends.jpg\" alt=\"friends network\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e{\n  Anne: [Bob, Elisa, Diana],\n  Bob: [Anne, Diana, Carl],\n  Elisa: [Anne, Carl],\n  Carl: [Bob, Elisa, Diana],\n  Diana: [Anne, Bob, Carl]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImplement a Graph Class\u003c/h2\u003e\n\n\u003cp\u003eLet's see if we can gain a better understanding of graphs by building a Graph class.\u003c/p\u003e\n\n\u003cp\u003eBefore we dive in, let's set up some rules:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eEvery vertex in the graph has a corresponding key in the Hash/object being\nused to store the graph\u003c/li\u003e\n\u003cli\u003eAll of a vertex's adjacent vertices are listed in an adjacency list stored as\nthe value for that key: \u003ccode\u003e{ a: {\"b\", \"c\", \"d\"} }\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eAll values in an adjacency list are unique - there can be no repeats\u003c/li\u003e\n\u003cli\u003eThe graph consists only of vertices that are connected to other vertices, e.g.\nthere cannot be a key with an empty adjacency list unless there is only one\nvertex in the entire graph\n\n\u003cul\u003e\n\u003cli\u003eThis means we are making a connected graph: one in which there is a path\nfrom any vertex to another vertex. Be aware that it is possible to make a\ndisconnected graph.\u003c/li\u003e\n\u003cli\u003eOK: \u003ccode\u003e{ a: {} }\u003c/code\u003e or \u003ccode\u003e{ a: { \"b\" }, b: { \"a\" } }\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eNot OK: \u003ccode\u003e{ a: {}, b: {}, c: {} }\u003c/code\u003e or \u003ccode\u003e{ a: { \"c\" }, b: {}, c: { \"a\" } }\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e1. Initialize a New Object: \u003ccode\u003einitialize(paths)\u003c/code\u003e / \u003ccode\u003econstructor(paths)\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eA user should provide an array of paths when instantiating a new object from the\nGraph class. We'll take care of the array in the next step. For now, simply\naccept it as an argument and set an instance variable called \u003ccode\u003egraph\u003c/code\u003e to an empty\nHash / object. \u003ccode\u003egraph\u003c/code\u003e should be readable on an object instantiated from the\nclass.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003egraph = new Graph(paths)\ngraph.graph\n=\u0026gt; {}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e2. Create the Graph from the Array\u003c/h3\u003e\n\n\u003cp\u003eWhen a new Graph object is instantiated, it will be initialized using an array\nof paths. We need to convert this list of paths to a valid graph. A valid graph\ncontains every vertex as a key, and every adjacent vertex as a value in a set\nthat's associated with that key.\u003c/p\u003e\n\n\u003cp\u003eThe list of paths is a two-dimensional array, and you may assume that it's\nalways valid. Each path contains a list of connected vertices in the order in\nwhich they're connected, i.e. there is an edge between elements that are next to\none another in a list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[[\"a\", \"b\", \"c\"], [\"b\", \"d\"]]\n// a is adjacent to b\n// b is adjacent to a, c and d\n// c is adjacent to b\n// d is adjacent to b\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003epaths = [[\"a\", \"b\", \"c\"], [\"b\", \"d\"]]\ngraph = new Graph(paths)\ngraph.graph\n=\u0026gt; {\n  a: { \"b\" },\n  b: { \"a\", \"c\", \"d\" },\n  c: { \"b\" },\n  d: { \"b\" }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eQuestion: Why do you think we used a set instead of an array to store the\nadjacency lists?\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you've got that working, determine what the worst-case time complexity (Big\nO) is for converting the array of paths to a graph.\u003c/p\u003e\n\n\u003ch3\u003e3. \u003ccode\u003eis_adjacent(vertex_a, vertex_b)\u003c/code\u003e / \u003ccode\u003eisAdjacent(vertexA, vertexB)\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eReturns \u003ccode\u003etrue\u003c/code\u003e if two vertices are adjacent, i.e. they're connected by an edge.\nOtherwise it returns \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003epaths = [[\"a\", \"b\", \"c\"], [\"b\", \"d\"]]\ngraph = new Graph(paths)\n\ngraph.is_adjacent(\"a\", \"b\")\n=\u0026gt; true\n\ngraph.is_adjacent(\"a\", \"c\")\n=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce you've got that working, determine the worst-case time complexity (Big O)\nfor determining if two vertices are adjacent.\u003c/p\u003e\n\n\u003ch3\u003e4. \u003ccode\u003eadd_vertex(vertex, array)\u003c/code\u003e / \u003ccode\u003eaddVertex(vertex, array)\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd a new vertex to the graph along with its adjacency list. This means that the\nadjacency lists for existing vertices will also need to be updated.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003epaths = [[\"a\", \"b\", \"c\"], [\"b\", \"d\"]]\ngraph = new Graph(paths)\n\ngraph.add_vertex(\"e\", [\"a\", \"d\"])\ngraph.graph\n=\u0026gt; {\n  a: { \"b\", \"e\" },\n  b: { \"a\", \"c\", \"d\" },\n  c: { \"b\" },\n  d: { \"b\", \"e\" },\n  e: { \"a\", \"d\" }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce you've got that working, determine the worst-case time complexity (Big O)\nfor adding a vertex.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g21837b52a9675e5431216e96cb8a7bdb","title":"Day 2: Find First Duplicate","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"find-first-duplicate\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/find-first-duplicate/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-first-duplicate\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-first-duplicate/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven an Array, find the first duplicate value that occurs. If there are no\nduplicates, return -1.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [2, 1, 3, 3, 2]\nOutput: 3\n\nInput: [1, 2, 3, 4]\nOutput: -1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g4de3b12725fb1ea0f75f7332de691136","title":"Day 2: Recursive Search","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"recursive-search\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/recursive-search/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/recursive-search\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/recursive-search/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithm problems using recursion\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven an Array of values, use recursion to find the target value. Return \u003ccode\u003etrue\u003c/code\u003e\nif found, otherwise \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [1, 2, 3], 2\nOutput: true\n\nInput: [3, 2, 1], 4\nOutput: false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSometimes it can help to solve the problem iteratively first, and then convert\nthat to the recursive version. Here are two possible iterative solutions: one in\nRuby and one in JS.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eiterative_search\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eiterativeSearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere are many ways to solve this problem. We suggest starting with the \u003cstrong\u003ebase\ncases\u003c/strong\u003e. What are they?\u003c/p\u003e\n\n\u003cp\u003eFeeling stuck? Have a hint! Do you need to pass the \u003cem\u003ewhole\u003c/em\u003e array with every\nrecursive call, or just \u003cem\u003epart\u003c/em\u003e of it?\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8792be3feb25e06b0cdc28ac492364fd","title":"Day 3-5: Add Two Numbers - List Nodes","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Add-Two-Numbers-List-Nodes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/Add-Two-Numbers-List-Nodes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Add-Two-Numbers-List-Nodes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Add-Two-Numbers-List-Nodes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice working with Linked Lists\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou are given two non-empty linked lists representing two non-negative integers.\nThe digits are stored in reverse order, and each of their nodes contains a\nsingle digit. Add the two numbers and return the sum as a linked list.\u003c/p\u003e\n\n\u003cp\u003eYou may assume the two numbers do not contain any leading zero, except the\nnumber 0 itself.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/add-two-numbers/example.png\" alt=\"example\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eExample 1\u003c/h3\u003e\n\n\u003cp\u003eInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807\u003c/p\u003e\n\n\u003ch3\u003eExample 2\u003c/h3\u003e\n\n\u003cp\u003eInput: l1 = [0], l2 = [0]\nOutput: [0]\u003c/p\u003e\n\n\u003ch3\u003eExample 3\u003c/h3\u003e\n\n\u003cp\u003eInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\u003c/p\u003e\n\n\u003ch3\u003eConstraints\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe number of nodes in each linked list is in the range\n\u003ccode\u003e[1, 100]- 0 \u0026lt;= Node.val \u0026lt;= 9\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eIt is guaranteed that the list represents a number that does not have leading\nzeros\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6682209e910ab6058267098df21974de","title":"Day 3-5: Validate Binary Search Tree","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Validate-BST\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/Validate-BST/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Validate-BST\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Validate-BST/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven the root of a binary tree, determine if it is a valid binary search tree\n(BST).\u003c/p\u003e\n\n\u003cp\u003eA valid BST is defined as follows:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe left subtree of a node contains only nodes with keys less than the node's\nkey.\u003c/li\u003e\n\u003cli\u003eThe right subtree of a node contains only nodes with keys greater than the\nnode's key.\u003c/li\u003e\n\u003cli\u003eBoth the left and right subtrees must also be binary search trees.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eExample 1\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/Validate-BST/example-1.png\" alt=\"example-1\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: root = [2,1,3]\nOutput: true\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eExample 2\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/Validate-BST/example-2.png\" alt=\"example-2\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: root = [5,1,4,null,null,3,6]\nOutput: false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eExplanation: The root node's value is 5 but its right child's value is 4.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g4786f50ff1de5919027a599a58d2b2c8","title":"Day 3: Fibonacci Series","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fibonacci-series\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fibonacci-series/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fibonacci-series\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fibonacci-series/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFind the nth element in the Fibonacci series. The Fibonacci sequence starts with\na 0 followed by a 1. After that, every value is the sum of the two values\npreceding it. Here are the first seven values as an example: 0, 1, 1, 2, 3, 5, 8.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: 0\nOutput: 0\n\nInput: 2\nOutput: 1\n\nInput: 10\nOutput: 55\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that we are using zero-indexing for the series.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd03b0559d382621f3966e7380a2fa39e","title":"Day 3: Recursive Fibonacci Series","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fibonacci-recursive\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fibonacci-recursive/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fibonacci-recursive\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fibonacci-recursive/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithm problems using recursion\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFind the nth element in the Fibonacci series. The Fibonacci sequence starts with\na 0 followed by a 1. After that, every value is the sum of the two values\npreceding it. Here are the first seven values as an example: 0, 1, 1, 2, 3, 5, 8.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: 0\nOutput: 0\n\nInput: 2\nOutput: 1\n\nInput: 10\nOutput: 55\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you solved this problem before iteratively, you may wish to convert that\nsolution to a recursive version. Here are two iterative solutions - one in Ruby\nand one in JS:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003evalues\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003etimes\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evalues\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elast\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eStuck? Here are some hints:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCode the base cases first.\u003c/li\u003e\n\u003cli\u003eYou may wish to look up how the fibonacci sequence is expressed as a formula.\u003c/li\u003e\n\u003cli\u003eStart small. What needs to happen if \u003ccode\u003en\u003c/code\u003e is 1 or \u003ccode\u003en\u003c/code\u003e is 2?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g04a2a6aaeb0419ab5f3eeab7eb1981d0","title":"Day 4: Recursive Find Shortest String","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"find-shortest-string-recursive\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/find-shortest-string-recursive/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-shortest-string-recursive\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-shortest-string-recursive/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithm problems using recursion\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven an array of strings, return the shortest string. If there is more than one\nstring of that length, return the string that comes first in the list. The array\nwill have a minimum length of 1.\u003c/p\u003e\n\n\u003cp\u003eOnce you're done solving the problem, calculate the average run time and compare\nit to the average run time for the iterative version.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: ['aaa', 'a', 'bb', 'ccc']\nOutput: 'a'\n\nInput: ['cat', 'hi', 'dog', 'an']\nOutput: 'hi'\n\nInput: ['flower', 'juniper', 'lily', 'dandelion']\nOutput: 'lily'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou may wish to convert your iterative solution to a recursive one. We've\nincluded our old solutions in Ruby and JavaScript below:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efind_shortest_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ereduce\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elength\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eshortest\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindShortestString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eshortest\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge7142ccce56f55dfc82cb9f1eecadc6c","title":"Day 4: Selection Sort","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"selection-sort\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/selection-sort/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/selection-sort\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/selection-sort/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eSort an Array of numbers using selection sort. The selection sort algorithm\nsorts an array by repeatedly finding the minimum element (lowest value) in the\ninput Array, and then putting it at the correct location in the sorted Array.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [3, -1, 5, 2]\nOutput: [-1, 2, 3, 5]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou ARE allowed to use a built-in array method to find the minimum value—you need \nnot recreate it algorithmically. Feel free to try it out for an extra challenge, \nthough.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch3\u003eBenchmarking\u003c/h3\u003e\n\n\u003cp\u003eFor this task, we are also asking you to calculate the average runtime of your\nsolution. In other words, you run it a bunch of times and then divide the total\ntime it took for the solution to run by the number of times it ran.\u003c/p\u003e\n\n\u003cp\u003eHere is the pseudocode for creating your own basic benchmarking procedure:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003estore the current time in a variable called start time\n\nloop 1000 times:\n  execute the method using a small input, e.g. three items if input is an Array\n  execute the method using a larger input, e.g. 100 items if input is an Array\n\naverage runtime = (current time - start time) / 2000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe have provided you with the long input to use for benchmarking.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g9c55437954b862f4a709c44c86c9c64e","title":"Day 4: What Is a Binary Search Tree?","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"binary-search-tree-manual\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/binary-search-tree-manual/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/binary-search-tree-manual\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/binary-search-tree-manual/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a binary search tree and its use cases\u003c/li\u003e\n\u003cli\u003eBuild a valid binary search tree\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/binary-search-tree-manual/valid_tree.png\" alt=\"Valid tree\"\u003e\u003c/p\u003e\n\n\u003cp\u003eA \u003cstrong\u003ebinary search tree\u003c/strong\u003e (BST) is a data structure consisting of nodes: it's\ncalled a \u003cstrong\u003ebinary\u003c/strong\u003e search tree because each node has at most \u003cstrong\u003etwo\u003c/strong\u003e child\nnodes and because its nodes are arranged in a specific order that makes it\npossible to search quickly.\u003c/p\u003e\n\n\u003cp\u003eEach node has two attributes, often called \u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003eright\u003c/code\u003e, and an additional\nattribute that stores the \u003ccode\u003evalue\u003c/code\u003e of that node. The \u003ccode\u003eleft\u003c/code\u003e node contains a\n\u003ccode\u003evalue\u003c/code\u003e less than the parent node, and the \u003ccode\u003eright\u003c/code\u003e node contains a value that is\ngreater than or equal to the parent node. Any node that has at least one child\nnode is called a parent node, and any node that doesn't have any children is\ncalled a leaf node. The node at the top of the tree is called the root node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eleft_node = new Node(1)\n=\u0026gt; Node with value 1, left is null or nil, right is null or nil\n\nright_node = new Node(3)\n=\u0026gt; Node with value 3, left is null or nil, right is null or nil\n\n// Both left_node and right_node are leaf nodes since they have no children\n\nroot_node = new Node(2, left_node, right_node)\n=\u0026gt; Node with value 2, left is Node with value 1, right is Node with value 3\n// This is the top of the tree, so it is the root, and because it has children, it's also a parent node\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt is important to note that a BST is not the same as a binary tree. A BST is a\ntype of binary tree that follows specific rules, such as the ability to traverse\nit in such a way that its nodes' values are output in sorted order. A binary\ntree, in contrast, can have nodes that are in no specific order whatsoever.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ebst_in_order_traversal(bst_root)\n=\u0026gt; [-1, 3, 5, 10]\n\nbinary_tree_in_order_traversal(bt_root)\n=\u0026gt; [10, -20, 3, 0, 7]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImportant Terms\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eroot\u003c/strong\u003e: The top node of the tree, the one where we begin traversing the tree\n(similar to the zeroth element in an Array). May or may not have children.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eparent\u003c/strong\u003e: Any node that has at least one child, i.e. its \u003ccode\u003eleft\u003c/code\u003e or \u003ccode\u003eright\u003c/code\u003e\nattribute, or both, point to another node.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eleft\u003c/strong\u003e: An attribute on every node in the tree. The node will have a value\nlesser than its parent. If it doesn't point to another node, it will be null\nor nil or some other falsy value.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eright\u003c/strong\u003e: An attribute on every node in the tree. The node will have a value\ngreater than or equal to its parent. If it doesn't point to another node, it\nwill be null or nil or some other falsy value.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eleaf\u003c/strong\u003e: A node that has no children.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003esubtree\u003c/strong\u003e: Any time we see a parent node, other than the root node, we can refer\nto that node and all that branch off of it as a subtree. This is similar to\nhow you think of a portion of an Array as a subset of that Array.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eBST Rules\u003c/h2\u003e\n\n\u003cp\u003eFor a BST to be valid, it must adhere to certain rules:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eEach node has a maximum of two children (\u003ccode\u003eleft\u003c/code\u003e and/or \u003ccode\u003eright\u003c/code\u003e nodes).\u003c/li\u003e\n\u003cli\u003eEvery parent node contains a value that is greater than the value of its\n\u003ccode\u003eleft\u003c/code\u003e node and less than the value of its \u003ccode\u003eright\u003c/code\u003e node.\u003c/li\u003e\n\u003cli\u003eAll nodes of a left subtree are less than the root node.\u003c/li\u003e\n\u003cli\u003eAll nodes of a right subtree are greater than the root node.\u003c/li\u003e\n\u003cli\u003eAll subtrees are also valid BSTs. This is just another way of rephrasing\npoints 3 and 4 above.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIt's important to note that a tree with only a root node is considered valid. An\nempty tree is also valid. Weird, but true!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eroot = new Node(7)\nis_valid_bst(root)\n=\u0026gt; true\n\nis_valid_bst(null)\n=\u0026gt; true\n\nis_valid_bst(\"If this is true, then I've gone bananas!\")\n=\u0026gt; false\n// guess we've not gone bananas!\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eExamples of Valid BSTs\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/binary-search-tree-manual/valid_trees.png\" alt=\"valid trees\"\u003e\u003c/p\u003e\n\n\u003cp\u003eBoth of these binary trees are valid BSTs.\u003c/p\u003e\n\n\u003cp\u003eThe left tree is valid because:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eEvery node value to the left of the root is less than the value of the root.\nEvery node value to the right of the root is greater than the root's value.\u003c/li\u003e\n\u003cli\u003eThe same is true for all subtrees. For example, if we start at the node with\nvalue 5, the node to its left is less than 5 and the node to its right is\ngreater than 5.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe right tree is valid because:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAll of the nodes to the right of the root (value 5) are greater than the root.\u003c/li\u003e\n\u003cli\u003eAs we go down the right side, each right node is greater than its parent node.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eExamples of Invalid BSTs\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/binary-search-tree-manual/invalid_trees.png\" alt=\"invalid trees\"\u003e\u003c/p\u003e\n\n\u003cp\u003eBoth of these trees are invalid BSTs.\u003c/p\u003e\n\n\u003cp\u003eThe left tree is invalid because:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe node with value 11 is greater than the root node with value 10. The node\nwith value 11 is to the left of the root and needs to be less than 10 and\ngreater than 5.\u003c/li\u003e\n\u003cli\u003eThe node with value 1 is less than the root node. Since it's on the right side\nof the tree, it needs to be greater than 10 and less than 16. If we consider\nthe node 12 and all of its child nodes as a subtree, then we also notice that\nthe node with value of 1 needs to be greater than 12. In summary, this\nmisplaced node needs to be greater than 12 and less than 16.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe right tree is invalid because:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe node with value 25 is to the right of the node with value 30, meaning that\nits value must be greater than 30.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eImplement a BST\u003c/h2\u003e\n\n\u003cp\u003eFor this challenge, we'll be creating the \u003ccode\u003eNode\u003c/code\u003e class with the appropriate\nattributes and then we'll manually create valid BSTs to ensure that we\nunderstand the rules of BSTs. Our tests will check that your manually created\nBSTs are valid. We will not be creating a parent class to track the \u003ccode\u003eroot\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can optionally pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eFeel free to run our tests whenever you like for this challenge! It can be\nhard to validate a BST on your own, especially if you're a newbie.\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003eCreate the \u003ccode\u003eNode\u003c/code\u003e class\u003c/h3\u003e\n\n\u003cp\u003eA \u003ccode\u003eNode\u003c/code\u003e should have three attributes: \u003ccode\u003eleft\u003c/code\u003e, \u003ccode\u003eright\u003c/code\u003e, \u003ccode\u003evalue\u003c/code\u003e. When\ninitializing a new Node, it should take three arguments: \u003ccode\u003evalue\u003c/code\u003e, \u003ccode\u003eleft\u003c/code\u003e, and\n\u003ccode\u003eright\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen a new \u003ccode\u003eNode\u003c/code\u003e is initialized without a \u003ccode\u003eleft\u003c/code\u003e node, \u003ccode\u003eleft\u003c/code\u003e should be set to\nan appropriate falsy value by default. The same applies to the \u003ccode\u003eright\u003c/code\u003e node.\nExpect that every \u003ccode\u003eNode\u003c/code\u003e will be initialized with a \u003ccode\u003evalue\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003enode = new Node(7)\n=\u0026gt; Node: value = 7, left = null / nil, right = null / nil\n\nleft = new Node(4)\nright = new Node(10)\nroot = new Node(7, left, right)\n=\u0026gt; Node: value = 7, left = Node with value 4, right = Node with value 10\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eManually Create Valid BSTs\u003c/h3\u003e\n\n\u003cp\u003eLet's manually create some BSTs using the \u003ccode\u003eNode\u003c/code\u003e class we just declared. For\nthis part, we'll have several methods with unique names, and it'll be your job\nto create the BST and return the \u003ccode\u003eroot\u003c/code\u003e node. Our tests will then traverse the\ntree and determine if it's valid.\u003c/p\u003e\n\n\u003cp\u003eYou will be given an Array of values in sorted order, which you'll use to create\nyour tree. Drawing the tree on paper can make it easier to understand how the\nnodes connect to one another. Be aware, that there is almost always more than\none way to create a valid BST from a list of values. You get to decide how! In\nother words, you get to decide which node in the list to use as the root.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = [1, 2, 3]\n/* i want my tree to look like this:\n       2\n    1     3\n*/\n\nfunction one_to_three_bst() {\n  left = new Node(1)\n  right = new Node(3)\n  root = new Node(2, left, right)\n\n  return root\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou can find the methods and their accompanying lists in the starter files.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g1add21a42518f7ca836605cc9a150ede","title":"Day 5: Balanced and Unbalanced Binary Trees","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"balanced-binary-tree\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/balanced-binary-tree/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/balanced-binary-tree\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/balanced-binary-tree/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain the difference between balanced and unbalanced binary search trees\u003c/li\u003e\n\u003cli\u003eBuild a balanced binary search tree\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/balanced-binary-tree/valid_trees.png\" alt=\"Balanced and unbalanced tree\"\u003e\u003c/p\u003e\n\n\u003cp\u003eBinary trees can be balanced or unbalanced. In the image above, the left tree is\nbalanced, while the right tree is unbalanced. For the left tree, the left\nsubtree is the same height as the right subtree, making it balanced. For the\nright tree, there is only a right subtree, making it unbalanced.\u003c/p\u003e\n\n\u003ch2\u003eHow to Calculate the Height of a Tree\u003c/h2\u003e\n\n\u003cp\u003eWe can look at a visualization of a tree and intuitively determine whether its\nleft and right subtrees are the same height, much the same way as we determine\nwhether two people are the same height. But, when it comes to trees, we actually\nhave a more specific definition of height and it can be measured numerically,\njust like your own height!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/balanced-binary-tree/tree_height.png\" alt=\"Tree height\"\u003e\u003c/p\u003e\n\n\u003cp\u003eFor a binary tree, the height is defined as the distance from the root node\n(where the tree starts) to the furthest leaf node (a node without any children).\nTo calculate the height we count up the layers (or depth) of nodes (not all of\nthe nodes), and then subtract 1, since we aren't supposed to include the root\nnode in the height. This means that the height for both trees in the image at\nthe top of this reading is 2.\u003c/p\u003e\n\n\u003ch2\u003eHow to Determine If a Tree Is Balanced or Unbalanced\u003c/h2\u003e\n\n\u003cp\u003eA tree is considered balanced if its right subtree and left subtree are the same\nheight or they have a difference of 1. All other trees are unbalanced. Here are\ntwo examples of balanced trees:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    0             10\n   / \\           /  \\\n-10   20        0    20\n                     /\n                   19\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eVisually, it is quite easy to determine whether a tree is balanced or not. We\nlook at the left and right sides and can almost immediately tell that they're\nthe same, or roughly the same, height. In code, however, we have to traverse the\nleft subtree and determine its depth, and then traverse the right subtree and\ndetermine its depth. Lastly, we compare those depths. We won't be coding this\ntoday, but we will be revisiting this in a later challenge.\u003c/p\u003e\n\n\u003ch2\u003eWhy Should We Balance a Tree?\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/balanced-binary-tree/tree_compare.png\" alt=\"Two trees to compare\"\u003e\u003c/p\u003e\n\n\u003cp\u003eTake a look at the two trees above. Let's imagine that we want to see if the\nvalue 16 is in these trees.\u003c/p\u003e\n\n\u003cp\u003eFor the left tree, which is balanced, we can do the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eGo to 10.\u003c/li\u003e\n\u003cli\u003eIs 10 more or less than 16? It's less!\u003c/li\u003e\n\u003cli\u003eGo right, to 12.\u003c/li\u003e\n\u003cli\u003eIs 12 more or less than 16? It's less!\u003c/li\u003e\n\u003cli\u003eGo right, to 16! found it.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNotice that we didn't have to visit the left subtree at all, which means this\nalgorithm would have a Big O run time of less than O(n)! Think about what the\nspecific run time might be, or Google it. (Hint: does this remind you the binary\nsearch algorithm?)\u003c/p\u003e\n\n\u003cp\u003eFor the right tree, which is unbalanced, we have to visit every single node\nbefore we get to 16. This has a Big O run time of O(n), which is not as good as\nthe balanced tree.\u003c/p\u003e\n\n\u003cp\u003eSo why do we want to aim for balanced trees? To save time!\u003c/p\u003e\n\n\u003ch2\u003ePractice Building Balanced Trees Manually\u003c/h2\u003e\n\n\u003cp\u003eFor practice, let's manually build balanced trees from lists. We'll include\nseveral methods in the starter files which you'll fill out. For each method,\nreturn the root node. Our tests will then check if the tree is balanced or\nunbalanced, and if it's a valid BST. Remember, a tree is balanced if the left\nand right subtrees have a height difference of 0 or 1. Note that there may be\nmore than one way to create a balanced BST from the lists.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = [1, 2, 3]\n/* i want my tree to look like this:\n       2\n    1     3\n*/\n\nfunction one_to_three_bst():\n  left = new Node(1)\n  right = new Node(3)\n  root = new Node(2, left, right)\n\n  return root\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can optionally pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gf29404adc091f03130c3a4e3946eee5f","title":"Day 5: Find a Target Value in a Binary Search Tree","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"find-value-binary-tree\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/find-value-binary-tree/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-value-binary-tree\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-value-binary-tree/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eImplement the binary search algorithm on a binary search tree\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eGiven a binary search tree (BST), find the node with the target value and return\nthe node. If the node does not exist in the tree return a falsy value, such as\n\u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e   1\n  / \\\n-1   2\n\nInput: root node, target = 2\nOutput: Node with value 2\n\nInput: root node, target = 5\nOutput: null or nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat is the time complexity of your solution? How does the complexity differ for\na balanced tree versus an unbalanced tree?\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"geacceb9fb5610204bdf8bf3f92ce6613","title":"Day 5: Find Shortest String","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"find-shortest-string\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/find-shortest-string/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-shortest-string\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find-shortest-string/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice algorithmic problem solving\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGiven an Array of strings, return the shortest string. If there is more than one\nstring of that length, return the string that comes first in the list. The Array\nwill have a minimum length of 1.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: ['aaa', 'a', 'bb', 'ccc']\nOutput: 'a'\n\nInput: ['cat', 'hi', 'dog', 'an']\nOutput: 'hi'\n\nInput: ['flower', 'juniper', 'lily', 'dandelion']\nOutput: 'lily'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch3\u003eBenchmarking\u003c/h3\u003e\n\n\u003cp\u003eFor this task, we are also asking you to calculate the average runtime of your\nsolution. In other words, you run it a bunch of times and then divide the total\ntime it took for the solution to run by the number of times it ran.\u003c/p\u003e\n\n\u003cp\u003eHere is the pseudocode for creating your own basic benchmarking procedure:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003estore the current time in a variable called start time\n\nloop 1000 times:\n  execute the method using a small input, e.g. three items if input is an Array\n  execute the method using a larger input, e.g. 100 items if input is an Array\n\naverage runtime = (current time - start time) / 2000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g924d240bf70f92dd24fb4f72285f885e","title":"Day 5: Recursive Selection Sort","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"selection-sort-recursive\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/selection-sort-recursive/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/selection-sort-recursive\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/selection-sort-recursive/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSolve algorithm problems using recursion\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eSort an array of numbers using selection sort. The selection sort algorithm\nsorts an array by repeatedly finding the minimum element (lowest value) in the\ninput array, and then putting it at the correct location in the sorted array.\u003c/p\u003e\n\n\u003cp\u003eOnce you're done solving the problem, calculate the average run time and compare\nit to the average run time for the iterative version.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [3, -1, 5, 2]\nOutput: [-1, 2, 3, 5]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou may wish to convert your iterative solution to a recursive one. We've\nincluded our old solutions in Ruby and JavaScript below:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eselection_sort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003esorted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003euntil\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n    \u003cspan class=\"n\"\u003emin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emin\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eidx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esorted\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edelete_at\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eidx\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003esorted\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eselectionSort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(...\u003c/span\u003e\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eidx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eindexOf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eidx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd220e41be9517c71404a69a4181186e1","title":"Day 5: What Is a Set?","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"what-is-a-set\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-set/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-set\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-set/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the characteristics of a set\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a set class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eA \u003cstrong\u003eset\u003c/strong\u003e is a data structure that can store any number of \u003cem\u003eunique\u003c/em\u003e values or\nelements. That means there are \u003cem\u003eno repeating elements\u003c/em\u003e in a set.\u003c/p\u003e\n\n\u003cp\u003eMany languages provide sets as part of the core language, but today, we'll be\nbuilding our own \u003ccode\u003eMySet\u003c/code\u003e class by using a hash/object as the underlying data\nstructure. We've chosen a hash/object because that data structure only allows\nunique keys.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e// Convert an Array to a Set\n\narray = [1, 3, 1, 2]\nset = new Set from array\n=\u0026gt; {1, 3, 2}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImplement the MySet class\u003c/h2\u003e\n\n\u003cp\u003eWe have already declared a class called \u003ccode\u003eMySet\u003c/code\u003e in the starter files and\nprovided the underlying data structure: a hash/object called \u003ccode\u003edata\u003c/code\u003e. You'll need\nto build out all of the methods. Do not worry about the ordering of items in the\nset. They can be in any order.\u003c/p\u003e\n\n\u003cp\u003eBe aware that these methods may go by different names in different languages.\nThis is one way to implement a set, there are others! We are basing ours on\nJavaScript's \u003ccode\u003eSet\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003eInitialization, e.g. \u003ccode\u003econstructor(iterable)\u003c/code\u003e or \u003ccode\u003e#initialize(iterable)\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eWe should be able to initialize a new \u003ccode\u003eMySet\u003c/code\u003e instance with no data, or by\nproviding an iterable, such as an array or string. When a new \u003ccode\u003eMySet\u003c/code\u003e instance\nis initialized with an array or string, only its \u003cstrong\u003eunique\u003c/strong\u003e contents should be\nadded to the \u003ccode\u003eMySet\u003c/code\u003e instance.\u003c/p\u003e\n\n\u003cp\u003eUse a value of \u003ccode\u003etrue\u003c/code\u003e for each key: \u003ccode\u003e{ dog: true }\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003enew MySet()\n=\u0026gt; MySet data = {}\nnew MySet([1, 2, 1, 3])\n=\u0026gt; MySet data = { 1: true, 2: true, 3: true }\nnew MySet('hello')\n=\u0026gt; MySet data = { 'h': true, 'e': true, 'l': true, 'o': true }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAn error should be thrown if a user tries to initialize a new \u003ccode\u003eMySet\u003c/code\u003e instance\nwith anything other than nothing, a string, or an array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003esize\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eReturns the number of items in the MySet instance.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eadd(item)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eAdd an item to a \u003ccode\u003eMySet\u003c/code\u003e instance. Remember, \u003cstrong\u003eonly unique items\u003c/strong\u003e should exist\nin \u003ccode\u003eMySet\u003c/code\u003e. When adding an item, the item is added as is. Return the \u003ccode\u003eMySet\u003c/code\u003e\ninstance.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emy_set = new MySet()\nmy_set.add('caat')\n=\u0026gt; MySet data = { 'caat' }\n\nnext_set = new MySet('doooog')\nnext_set.add('caarp')\n=\u0026gt; MySet data = { 'd', 'o', 'g', 'caarp' }\nnext_set.add(12)\n=\u0026gt; MySet data = { 'd', 'o', 'g', 'caarp', 12 }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote on JS: Arrays cannot be keys for JS objects. They will be converted to\nstrings by default like so: \u003ccode\u003e[1, 2] =\u0026gt; '1,2'\u003c/code\u003e. Don't worry about this. We'll\nensure our tests allow for this. For now, just be aware that actual Sets most\ncertainly can handle Arrays!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003edelete(item)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eRemoves the item from the set. If the removal was successful, return \u003ccode\u003etrue\u003c/code\u003e. If\nthe item was not removed (i.e. if the item was not present in the set to begin\nwith), return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emy_set = new MySet('aabb')\nmy_set.delete('a')\n=\u0026gt; true\nmy_set.delete('z')\n=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote on JS: Don't worry about handling Arrays here!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ehas(item)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIf the item is in the \u003ccode\u003eMySet\u003c/code\u003e instance, return \u003ccode\u003etrue\u003c/code\u003e, otherwise \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote on JS: Don't worry about handling Arrays here!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eentries\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eReturns an array containing all of the values in the \u003ccode\u003eMySet\u003c/code\u003e instance.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emy_set = new MySet('aabb')\nmy_set.entries()\n=\u0026gt; ['a', 'b']\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote on JS: Don't worry about handling Arrays (which were meant to be keys in\n\u003ccode\u003ethis.data\u003c/code\u003e) here!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3716c6a8bab57eb9e153d18321a0bff0","title":"Days 1-2: Bubble Sort","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"bubble-sort\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/bubble-sort/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/bubble-sort\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/bubble-sort/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the bubble sort algorithm and its advantages/disadvantages\u003c/li\u003e\n\u003cli\u003eImplement the bubble sort algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBubble sort is considered one of the simpler sorting algorithms, and it is\nhighly efficient at handling already sorted lists. While it performs well for\nsorted lists and short lists, it does not perform well for longer lists. As a\nresult, the sorting functions built into programming languages do not use bubble\nsort.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [3, 2, 1, 4]\nOutput: [1, 2, 3, 4]\n\nInput: []\nOutput: []\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eHow Does Bubble Sort Work?\u003c/h2\u003e\n\n\u003cp\u003eBubble sort sorts a list in place. In other words, it does not create a new\nArray; instead, it modifies the Array that was passed to the function as an\nargument.\u003c/p\u003e\n\n\u003cp\u003eTo achieve this in-place sorting, bubble sort swaps elements when they are in\nthe incorrect order. When no swaps occur, the Array is considered sorted. This\nalgorithm iterates over an Array over and over until it is sorted. If the input\nArray is already sorted, it iterates over it only once because no swaps occur.\u003c/p\u003e\n\n\u003cp\u003eLet's look at a step-by-step example with an unsorted list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [2, 3, 1]\n// 2 is less than 3, so it stays where it is\n// But 1 is less than 3 so those two values are swapped\nPass 1: [2, 1, 3]\n\n// 1 is less than 2, so those values are swapped\n// 2 is less than 3, so those values stay as is\nPass 2: [1, 2, 3]\n\n// On this final pass, no swaps occur, so Array is sorted\nPass 3: [1, 2, 3]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd here's what happens with a sorted list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [1, 2, 3]\n\n// No swaps occur when iterating over Array\n// Input Array is returned as is\nPass 1: [1, 2, 3]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImplement Bubble Sort\u003c/h2\u003e\n\n\u003cp\u003eGiven what you know about bubble sort, implement your own version. Remember, we\nneed to sort the Array in place, so there's no need to declare a new Array and\npush to it: be sure to return the input Array with its values in order.\u003c/p\u003e\n\n\u003cp\u003eLastly, you may wish to look up how to swap values in whichever language you\nchoose to solve the problem in. Some languages, like Ruby and JavaScript,\nprovide shortcuts!\u003c/p\u003e\n\n\u003cp\u003eWhen you write up the explanation of your solution, don't forget to calculate\nBig O for its time complexity.\u003c/p\u003e\n\n\u003cp\u003eAlso take some time to think about what you learned by solving this challenge.\nWhat problem solving techniques did you use, coding or otherwise? How can they\nhelp you solve other problems?\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g5e80b7328d031153072ea2f54798081d","title":"Days 1-2: Implement a Linked List","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"what-is-a-linked-list\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-linked-list/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-linked-list\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-linked-list/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the characteristics of a linked list\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a linked list class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll be implementing a \u003cstrong\u003elinked list\u003c/strong\u003e data structure. More\nspecifically, we'll be implementing a singly-linked list, or simple linked list\n(it goes by several names). A \u003cstrong\u003elinked list\u003c/strong\u003e consists of \u003cstrong\u003enodes\u003c/strong\u003e, which are\nconnected to one another. It is similar to an array in that its elements (nodes)\nare in a specific order.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/what-is-a-linked-list/linked_list.png\" alt=\"Linked List\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe may choose to use linked lists in place of other data structures when we need\nfast insertion and deletion of data.\u003c/p\u003e\n\n\u003cp\u003eThe node at the beginning of the list is called the \u003ccode\u003ehead\u003c/code\u003e, while the node at\nthe end is called the \u003ccode\u003etail\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eWhat Is a Node?\u003c/h2\u003e\n\n\u003cp\u003eA \u003cstrong\u003enode\u003c/strong\u003e in a linked list is an object that has two attributes: \u003ccode\u003evalue\u003c/code\u003e and\n\u003ccode\u003enext\u003c/code\u003e. The \u003ccode\u003evalue\u003c/code\u003e stores the data that we might be interested in retrieving,\nsuch as an integer, array, string, or some other object. The \u003ccode\u003enext\u003c/code\u003e attribute\npoints to the next node in the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003earray = [1, 2]\nhead = new Node(value: 1)\nnextNode = new Node(value: 2)\nhead.next = nextNode\n// head -\u0026gt; nextNode\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe very last node in the linked list will point to nothing, so its \u003ccode\u003enext\u003c/code\u003e value\nmay be \u003ccode\u003eundefined\u003c/code\u003e, \u003ccode\u003enull\u003c/code\u003e, \u003ccode\u003enil\u003c/code\u003e, etc. It depends on the language being used\nand on the implementation of the node class.\u003c/p\u003e\n\n\u003ch2\u003eHow Do We Track the Starting Node of a Linked List?\u003c/h2\u003e\n\n\u003cp\u003eIt is common to define a class called \u003ccode\u003eLinkedList\u003c/code\u003e when using this data\nstructure. The \u003ccode\u003eLinkedList\u003c/code\u003e class stores the \u003ccode\u003ehead\u003c/code\u003e node, which points to the\nstart of the list. As long as we know where the list starts, we can always\ntraverse it to access all other nodes in the list by using the \u003ccode\u003enext\u003c/code\u003e property.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node(value: 'i am the beginning!')\nlist = new LinkedList(head)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA note on online algorithm challenges: When completing challenges online, such\nas through LeetCode, you might be provided with only the head node, rather\nthan a \u003ccode\u003eLinkedList\u003c/code\u003e class.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eHow Do We Visit Each Node?\u003c/h2\u003e\n\n\u003cp\u003eIterables, like arrays, provide instance methods that allow us to traverse them,\nand we can also traverse them using loops and indices. Linked lists are a little\ndifferent. Nodes do not have indexes: they just point to the next node, or to\nnothing if it's the last node in the list (the \u003ccode\u003etail\u003c/code\u003e). This means we have to go\nto the \u003ccode\u003ehead\u003c/code\u003e node, ask it what's next, go there, and repeat!\u003c/p\u003e\n\n\u003cp\u003eHere's an example using people waiting in a queue to get into a club to dance to\nsome sick beats! In order, the queue consists of Janzz, Murray, and Lakshmi.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eYou: \"Hey Janzz! Who's next?\"\nJanzz: \"Murray\"\nYou: \"Hey Murray! Who's next?\"\nMurray: \"Lakshmi\"\nYou: \"Hey Lakshmi! Who's next?\"\nLakshmi: [awkward silence]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe're not giving you the code here because we want you to figure out how to\ntraverse a linked list for yourself later on. We believe in you!\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eA \u003cstrong\u003elinked list\u003c/strong\u003e is a data structure consisting of \u003cstrong\u003enodes\u003c/strong\u003e. The \u003ccode\u003ehead\u003c/code\u003e node\ndenotes the start of the list.\u003c/p\u003e\n\n\u003cp\u003eEach node has two attributes: \u003ccode\u003evalue\u003c/code\u003e and \u003ccode\u003enext\u003c/code\u003e. \u003ccode\u003evalue\u003c/code\u003e stores the data we\nmight be interested in retrieving, while \u003ccode\u003enext\u003c/code\u003e points to the next Node in the\nlist. The last node, called the \u003ccode\u003etail\u003c/code\u003e, in the list points to nothing (e.g.\n\u003ccode\u003enext\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e), and that's how we know it's the end!\u003c/p\u003e\n\n\u003cp\u003eWe can use another class called \u003ccode\u003eLinkedList\u003c/code\u003e to track the \u003ccode\u003ehead\u003c/code\u003e of the list.\u003c/p\u003e\n\n\u003ch2\u003eImplement a Linked List\u003c/h2\u003e\n\n\u003cp\u003ePlease note that in Ruby we'll be using \u003ccode\u003enext_node\u003c/code\u003e instead of \u003ccode\u003enext\u003c/code\u003e as the\n\u003ccode\u003eNode\u003c/code\u003e attribute. This is to avoid confusing syntax, since next is a reserved\nkeyword in Ruby. It also leads to confusing syntax highlighting as a result. In\nshort, wherever you see \u003ccode\u003enext\u003c/code\u003e, think \u003ccode\u003enext_node\u003c/code\u003e for Ruby.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, and optionally explain your solution and\ncode.\u003c/p\u003e\n\n\u003ch3\u003e1. Define the \u003ccode\u003eNode\u003c/code\u003e Class\u003c/h3\u003e\n\n\u003cp\u003eA \u003ccode\u003eNode\u003c/code\u003e has two attributes: \u003ccode\u003evalue\u003c/code\u003e and \u003ccode\u003enext\u003c/code\u003e. \u003ccode\u003evalue\u003c/code\u003e can store anything,\nwhile \u003ccode\u003enext\u003c/code\u003e will either point to the next \u003ccode\u003eNode\u003c/code\u003e or to nothing.\u003c/p\u003e\n\n\u003cp\u003eProvide default values for both \u003ccode\u003evalue\u003c/code\u003e and \u003ccode\u003enext\u003c/code\u003e so that a new Node can be\ninstantiated without any arguments. In JS, the default values for both should be\n\u003ccode\u003enull\u003c/code\u003e, while they should both be \u003ccode\u003enil\u003c/code\u003e in Ruby. Choose a comparable value if\ncoding in other languages.\u003c/p\u003e\n\n\u003cp\u003eWhen instantiating a new \u003ccode\u003eNode\u003c/code\u003e, the arguments in order should be: \u003ccode\u003evalue\u003c/code\u003e,\n\u003ccode\u003enext\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003enode = new Node()\nnode.value\n=\u0026gt; null or nil\nnode.next\n=\u0026gt; null or nil\n\nnode = new Node('hi', new Node('bye'))\nnode.value\n=\u0026gt; 'hi'\nnode.next\n=\u0026gt; Instance of Node with value of 'bye'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e2. Define the \u003ccode\u003eLinkedList\u003c/code\u003e Class\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eLinkedList\u003c/code\u003e class tracks the \u003ccode\u003ehead\u003c/code\u003e of the list, so we know where it\nbegins. It should have one attribute: \u003ccode\u003ehead\u003c/code\u003e. Provide a default value for \u003ccode\u003ehead\u003c/code\u003e\nof \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e, or some other falsy value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003enode = new Node()\nlist = new LinkedList(node)\nlist.head\n=\u0026gt; Instance of Node\n\nemptyList = new LinkedList()\nlist.head\n=\u0026gt; null or nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e3. Spend a Few Minutes Playing With Your Linked List\u003c/h3\u003e\n\n\u003cp\u003eSee if you can recreate the following Arrays as Linked Lists using your classes,\nwhere the 0th element denotes the \u003ccode\u003ehead\u003c/code\u003e of the list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003echaracters = ['Hamtaro', 'Walter White']\ndrinks = ['Coffee', 'Manhattan', 'Brandy Sour']\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou can test this manually like so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nprint list.head.value\nprint list.head.next.value\nprint list.head.next.next\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e4. Add \u003ccode\u003eiterate\u003c/code\u003e Method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eFor now, we'll build part of the \u003ccode\u003eiterate\u003c/code\u003e method (but not all of it). The\n\u003ccode\u003eiterate\u003c/code\u003e method traverses the entire \u003ccode\u003eLinkedList\u003c/code\u003e. To ensure that it's working,\nwe'll print the value of each \u003ccode\u003eNode\u003c/code\u003e. Later we'll remove this functionality and\nupdate the method to take a callback.\u003c/p\u003e\n\n\u003cp\u003eRemember, the \u003ccode\u003ehead\u003c/code\u003e is the first \u003ccode\u003eNode\u003c/code\u003e in the list, and the next one is stored\nin its \u003ccode\u003enext\u003c/code\u003e attribute. We can go to each \u003ccode\u003eNode\u003c/code\u003e by visiting all of the\n\u003ccode\u003enext\u003c/code\u003es. When \u003ccode\u003enext\u003c/code\u003e is equal to a falsy value, such as \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e, we've\nreached the end of the list. At the end of the iteration, return the \u003ccode\u003ehead\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.iterate()\n=\u0026gt; 'hi again'\n=\u0026gt; 'but why?'\n=\u0026gt; Node with value 'hi again'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e5. Modify the \u003ccode\u003eiterate(callback)\u003c/code\u003e Method to Take a Callback\u003c/h3\u003e\n\n\u003cp\u003eChange the \u003ccode\u003eiterate\u003c/code\u003e method, so that it takes a callback (a function) as an\nargument.\u003c/p\u003e\n\n\u003cp\u003eReplace the print statements in the \u003ccode\u003eiterate\u003c/code\u003e method with a call to the\ncallback. When calling the callback, provide the current Node as an argument to\nthe callback. You can test if this is working by calling \u003ccode\u003eiterate\u003c/code\u003e on the list\nwith a callback that prints the value of each Node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction printNode(node):\n  print node.value\n\nhead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.iterate(printNode)\n=\u0026gt; 'hi again'\n=\u0026gt; 'but why?'\n=\u0026gt; Node with value 'hi again'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eHint\u003c/strong\u003e: Rubyists might be interested in learning about passing blocks and\nusing \u003ca href=\"https://www.brainstobytes.com/ruby-iterators-and-the-yield-keyword-with-examples/\"\u003e\u003ccode\u003eyield\u003c/code\u003e\u003c/a\u003e to implement the \u003ccode\u003eiterate\u003c/code\u003e method. Your Ruby\nimplementation should accept a block rather than a callback function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eNode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'hi again'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"no\"\u003eNode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'but why?'\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"n\"\u003elist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eiterate\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003evalue\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e6. Add \u003ccode\u003eprint\u003c/code\u003e method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eprint\u003c/code\u003e method should print each node value on its own line. Use the\n\u003ccode\u003eiterate\u003c/code\u003e method in the \u003ccode\u003eprint\u003c/code\u003e method.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.print()\n=\u0026gt; 'hi again'\n=\u0026gt; 'but why?'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e7. Add \u003ccode\u003efind(target)\u003c/code\u003e method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003efind\u003c/code\u003e method searches for a \u003ccode\u003eNode\u003c/code\u003e with the \u003ccode\u003etarget\u003c/code\u003e value. If the \u003ccode\u003eNode\u003c/code\u003e\nis found, it returns that \u003ccode\u003eNode\u003c/code\u003e. Otherwise, it returns a falsy value such as\n\u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e. Use the \u003ccode\u003eiterate\u003c/code\u003e method to keep your code short and DRY.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.find('but why?')\n=\u0026gt; Node with value 'but why?'\n\nlist.find('tell me secrets')\n=\u0026gt; null or nil, etc.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e8. Add \u003ccode\u003eaddFirst(node)\u003c/code\u003e method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eaddFirst\u003c/code\u003e takes a Node as an argument and adds it as the \u003ccode\u003ehead\u003c/code\u003e of the Linked\nList. No existing Nodes are removed.\u003c/p\u003e\n\n\u003cp\u003eThis method adds only 1 Node to the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.addFirst(new Node('I am first now'))\nlist.print()\n=\u0026gt; 'I am first now'\n=\u0026gt; 'hi again'\n=\u0026gt; 'but why?'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e9. Add \u003ccode\u003eaddLast(node)\u003c/code\u003e method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eaddLast\u003c/code\u003e takes a Node as an argument and adds it at the end of the Linked List\n(i.e. it will be the tail). No existing Nodes are removed. The \u003ccode\u003eiterate\u003c/code\u003e method\ncan help you here.\u003c/p\u003e\n\n\u003cp\u003eThis method adds only 1 Node to the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.addLast(new Node('I am last'))\nlist.print()\n=\u0026gt; 'hi again'\n=\u0026gt; 'but why?'\n=\u0026gt; 'I am last'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e10. Add \u003ccode\u003eremoveFirst\u003c/code\u003e method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eremoveFirst\u003c/code\u003e removes the first (head) Node in the list and returns the node\nthat was removed.\u003c/p\u003e\n\n\u003cp\u003eHint: Try not to overthink this. Removing the head takes one line of code.\nYou'll need a little bit more code to handle returning the node that was\nremoved, however.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.removeFirst()\n=\u0026gt; Node with value 'hi again'\nlist.print()\n=\u0026gt; 'but why?'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e11. Add \u003ccode\u003eremoveLast\u003c/code\u003e method to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eremoveLast\u003c/code\u003e removes the last (tail) Node in the list and returns the removed\nNode.\u003c/p\u003e\n\n\u003cp\u003eHint: The \u003ccode\u003eiterate\u003c/code\u003e method might be helpful here.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('hi again', new Node('but why?'))\nlist = new LinkedList(head)\nlist.removeLast()\n=\u0026gt; Node with value 'but why?'\nlist.print()\n=\u0026gt; 'hi again'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e12. Add \u003ccode\u003ereplace(index, node)\u003c/code\u003e to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eReplace the Node at the given \u003ccode\u003eindex\u003c/code\u003e with the given \u003ccode\u003enode\u003c/code\u003e. \u003ccode\u003ereplace\u003c/code\u003e should\nwork on all Node indexes. Nodes are zero-indexed.\u003c/p\u003e\n\n\u003cp\u003eDon't worry about handling invalid indexes, such as -1 or those that go beyond\nthe size of the list.\u003c/p\u003e\n\n\u003cp\u003eReturn the inserted Node.\u003c/p\u003e\n\n\u003cp\u003eHint: The \u003ccode\u003eiterate\u003c/code\u003e method might be helpful here. You may wish to modify it by\nadding the ability to count, or you can declare the count within \u003ccode\u003ereplace\u003c/code\u003e and\nupdate it in the callback passed to \u003ccode\u003eiterate\u003c/code\u003e. Or you can create an\n\u003ccode\u003eiterate_with_count\u003c/code\u003e method and use that (and that method can call the \u003ccode\u003eiterate\u003c/code\u003e\nmethod). So many options!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('one', new Node('two', new Node('three')))\nlist = new LinkedList(head)\nlist.replace(0, '1')\n=\u0026gt; Node with value '1'\n// list is now '1' -\u0026gt; 'two' -\u0026gt; 'three'\n\nlist.replace(1, '2')\n=\u0026gt; Node with value '2'\n// list is now '1' -\u0026gt; '2' -\u0026gt; 'three'\n\nlist.replace(2, '3')\n=\u0026gt; Node with value '3'\n// list is now '1' -\u0026gt; '2' -\u0026gt; '3'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e13. Add \u003ccode\u003einsert(index, node)\u003c/code\u003e to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eInsert the given \u003ccode\u003enode\u003c/code\u003e at the given \u003ccode\u003eindex\u003c/code\u003e in the \u003ccode\u003eLinkedList\u003c/code\u003e. No nodes\nshould be removed or replaced! This method inserts only 1 Node into the list.\u003c/p\u003e\n\n\u003cp\u003eEnsure you can handle all valid \u003ccode\u003eindex\u003c/code\u003e values: 0 to last index + 1 in list.\nDon't worry about invalid index values.\u003c/p\u003e\n\n\u003cp\u003eHint: \u003ccode\u003eiterate\u003c/code\u003e may be helpful once more.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('one', new Node('two', new Node('three')))\nlist = new LinkedList(head)\nlist.insert(1, new Node('inserted at 1'))\n// list is now 'one' -\u0026gt; 'inserted at 1' -\u0026gt; 'two' -\u0026gt; 'three'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('one', new Node('two', new Node('three')))\nlist = new LinkedList(head)\nlist.insert(0, new Node('inserted at 0'))\n// list is now 'inserted at 0' -\u0026gt; 'one' -\u0026gt; 'two' -\u0026gt; 'three'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('one', new Node('two', new Node('three')))\nlist = new LinkedList(head)\nlist.insert(3, new Node('inserted at 3'))\n// list is now 'one' -\u0026gt; 'two' -\u0026gt; 'three' -\u0026gt; 'inserted at 3'\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e14. Add \u003ccode\u003eremove(index)\u003c/code\u003e to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eRemove the \u003ccode\u003eNode\u003c/code\u003e at the given \u003ccode\u003eindex\u003c/code\u003e and return the removed \u003ccode\u003eNode\u003c/code\u003e. Don't\nworry about invalid indices, such as -1 or those that go beyond the size of the\nlist.\u003c/p\u003e\n\n\u003cp\u003eHint: Good ol' \u003ccode\u003eiterate\u003c/code\u003e...again!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('one', new Node('two', new Node('three')))\nlist = new LinkedList(head)\n\nlist.remove(1)\n=\u0026gt; Node with value 'two'\n// list is now 'one' -\u0026gt; 'three'\n\nlist.remove(1)\n=\u0026gt; Node with value 'three'\n// list is now 'one'\n\nlist.remove(0)\n=\u0026gt; Node with value 'one'\n// list is empty :(\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e15. Add \u003ccode\u003eclear\u003c/code\u003e to \u003ccode\u003eLinkedList\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eClear the linked list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehead = new Node('one', new Node('two', new Node('three')))\nlist = new LinkedList(head)\n\nlist.clear()\nlist.print()\n// nothing happens because it's empty\nlist.head\n=\u0026gt; null or nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb5fb3c93b532892f86a76ecaea6b19fb","title":"Days 1-2: Implement a Stack Class","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"what-is-a-stack\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-stack/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-stack\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-stack/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the characteristics of a stack\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a stack class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eA \u003cstrong\u003estack\u003c/strong\u003e is a data structure where items are processed in last-in-first-out\norder (LIFO). Similar to a stack of pancakes, where the last pancake placed on\nthe stack is eaten first, the last item placed on the stack data structure is\nremoved first. The last item on the stack is known as the \u003cstrong\u003etop\u003c/strong\u003e, and the first\nitem that was pushed on the stack is known as the \u003cstrong\u003ebase\u003c/strong\u003e. This means that the\nbase is removed from the stack last.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/what-is-a-stack/pancakes.png\" alt=\"pancake stack\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe use stacks to solve certain algorithm problems. We also think of recursive\nproblems in terms of a stack, since each recursive call results in a stack frame\nbeing added to the stack: those frames are then processed and removed in LIFO\norder! If you are tackling a problem and you see that it must be solved\ndepth-first, this is a good clue that you'll either be using recursion or\nimplementing a stack. Depth-first means that we go as deep as we can before we\nstart processing data (LIFO order).\u003c/p\u003e\n\n\u003ch2\u003eWait! This Sounds A Lot Like an Array!\u003c/h2\u003e\n\n\u003cp\u003eWe can actually implement a \u003ccode\u003eStack\u003c/code\u003e class using an array as the underlying data\nstructure! Arrays provide all of the methods we need for the core functionality\nof a stack. Some of the methods we'll be adding to our \u003ccode\u003eStack\u003c/code\u003e class include:\n\u003ccode\u003epush\u003c/code\u003e, \u003ccode\u003epop\u003c/code\u003e, \u003ccode\u003epeek\u003c/code\u003e, \u003ccode\u003eisEmpty\u003c/code\u003e, and \u003ccode\u003eprint\u003c/code\u003e. Do any of those sound familiar?\u003c/p\u003e\n\n\u003cp\u003eHowever, it's important to note that an array doesn't have to be the underlying\ndata structure. It could be another data structure, such as a Linked List (we'll\ncover this data structure later).\u003c/p\u003e\n\n\u003cp\u003eWhen calculating Big O for a stack, we always need to consider what the\nunderlying data structure is since that'll affect our calculations.\u003c/p\u003e\n\n\u003ch2\u003eImplement the Stack Class\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eStack\u003c/code\u003e class already has two attributes: the \u003ccode\u003estack\u003c/code\u003e itself (an array) and\na \u003ccode\u003elimit\u003c/code\u003e, which is an integer representing the total number of items allowed in\nthe stack at one time.\u003c/p\u003e\n\n\u003cp\u003eWe've provided starter code for some languages. Choose whichever language you\nlike. Once again, we recommend writing your own tests first and then running the\ntest suites.\u003c/p\u003e\n\n\u003cp\u003eAdd the following methods to the \u003ccode\u003eStack\u003c/code\u003e class:\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003epush(item)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003epush\u003c/code\u003e adds an item to the top of the stack. If the stack is full, the item\nshould not be pushed, and an error should be thrown.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003epop\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003epop\u003c/code\u003e removes the item at the top of the stack and returns it. Don't worry if\n\u003ccode\u003epop\u003c/code\u003e is called on an empty stack. It's OK for it to return the default return\nvalue, such as \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003epeek\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003epeek\u003c/code\u003e returns the item at the top of the stack without removing it. If the\nstack is empty, use the default return value, e.g. \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eisEmpty\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eisEmpty\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if the stack is empty, otherwise \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eisFull\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eisFull\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if no more space is available in the stack, otherwise\n\u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003esize\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003esize\u003c/code\u003e returns the number of items currently on the stack.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003esearch(target)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003esearch\u003c/code\u003e returns an Integer representing how far the target item is from the top\nof the stack. If the item is not in the stack, return \u003ccode\u003e-1\u003c/code\u003e. Example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Stack = 1, 2, 3, 4, 5 \u0026lt;-top\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; 0\u003c/span\u003e\n\u003cspan class=\"nx\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; 1\u003c/span\u003e\n\u003cspan class=\"nx\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; -1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eprint\u003c/code\u003e prints the contents of the stack. It does not return them! You may print\nthem however you wish.\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g15a31ff7f4e18acc344f69a66f76ddf0","title":"Days 1-3: Binary Search","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"binary-search\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/binary-search/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/binary-search\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/binary-search/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the binary search algorithm and its use cases\u003c/li\u003e\n\u003cli\u003eImplement the binary search algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBinary search is an algorithm that searches a sorted list for a target value. It\nis typically implemented using recursion. For a sorted list, it is faster than\niterating over the entire list until the target is found, since a binary search\nwill not visit every single element in the list. Keep in mind that we perform\nbinary searches on \u003cstrong\u003esorted datasets only\u003c/strong\u003e!\u003c/p\u003e\n\n\u003ch2\u003eHow Does It Work?\u003c/h2\u003e\n\n\u003cp\u003eHopefully, you are old enough to remember the phone book (a large\nalphabetically-ordered directory of businesses and residents of a county or town\nand their phone numbers) because we're about to dive deep into its pages!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/binary-search/phone_book.jpeg\" alt=\"Phone Book\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's imagine we're searching for Deirdre Xanadu and we're trying to find the\npage with the \"X\" names (let's pretend there's only one page of them). Since\nDeirdre's last name starts with an \"X\", she'll probably be close to the end of\nthe phonebook. With iterative search, we can start at page 1 or the last page,\nand look at every page until we find \"Xanadu\". Starting at page 1 will be quick\nif there are barely any people whose last names start with the letters \"A\"\nthrough \"X\", and starting at the last page will only be quick if barely any\nresidents' last names start with letters \"Z\" through \"X\". In the worst case,\nDeirdre will be on the last page or first page, depending on where we start our\nsearch, and we will have visited every page.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/binary-search/binary_search.gif\" alt=\"Binary Search\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNow let's use a binary search. Instead of starting on the first or last page, we\nstart in the middle of the book. Let's say the last names on this page start\nwith \"M\". \"M\" comes before \"X\", so we take the second half of the book in our\nhands, locate the middle page of that portion, and go straight there. Let's say\nwe land on the page of \"Y\" names. \"X\" comes before \"Y\", so we take the part of\nthe book with \"M\" names up to the part with the \"Y\" names in our hands, find the\nmiddle and go there. Let's say we land on \"X\": we can check that page for\nDeirdre Xanadu. We found our friend without going to every page!\u003c/p\u003e\n\n\u003cp\u003eHere's a summary of the process we just used to find Xanadu:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eGo to middle of phone book\nLast names start with \"M\"\nIs \"M\" == \"X\":\n  No.\nIs \"M\" \u0026lt; \"X\":\n  Yes. Need to search half going from \"M\" to \"Z\".\n\nGo to middle of portion of phone book (\"M\" to \"Z\"):\nLast names start with \"Y\"\nIs \"Y\" == \"X\":\n  No.\nIs \"Y\" \u0026lt; \"X\":\n  No. Need to search first half of portion from \"M\" to \"Y\"\n\nGo to middle of portion of phone book (\"M\" to \"Y\")\nLast names start with \"X\"\nIs \"X\" == \"X\"\n  Yes! Find Xanadu's entry!\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFrom the above example, you may notice that we keep dividing the input into two\nparts: a left side containing everything that comes before the middle, and a\nright side containing everything after the middle. We then check if the target\nvalue we're searching for is less or more than the middle. If the target is less\nthan the middle value, we search the left side. If it's more than the middle, we\nsearch the right side. As we search, our input gets smaller and smaller until we\neither find the target or there is nothing left to search.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at another example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eList: [1, 2, 3, 4, 5]\nTarget: 1\n\nMiddle: 3\nIs Middle == Target:\n  No.\nIs Middle \u0026lt; Target:\n  No.\nLeft: [1, 2]\nSearch Left for Target\n\nMiddle: 2\nIs Middle == Target:\n  No.\nIs Middle \u0026lt; Target:\n  No.\nLeft: [1]\nSearch Left for Target\n\nMiddle: 1\nIs Middle == Target:\n  Yes! Return true\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImplement a Binary Search That Returns True or False\u003c/h2\u003e\n\n\u003cp\u003eLet's try something different today. Below you'll find pseudocode for binary\nsearch. Your job is to remove the pseudo part! Assume we're only searching for\nintegers.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction binary_search(array, target):\n  return false if array is empty\n\n  initialize integer variable middle with middle index of input array\n  initialize integer variable middle_value with middle value from array\n\n  return true if middle_value == target\n\n  if middle_value \u0026gt; target:\n    return binary_search(left half of input, target)\n  else:\n    return binary_search(right half of input, target)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd here are some test cases to consider:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: arr = [1, 2, 3], target = 3\nOutput: true\n\nInput: arr = [3, 5, 9], target = 10\nOutput: false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce you've got that working, take a moment to think. What is the worst-case\ntime complexity for this algorithm? How does that compare to an iterative\nsearch. Why does this only work with sorted inputs?\u003c/p\u003e\n\n\u003cp\u003eAlso take some time to plot out what's happening on paper using a small input as\nan example. Maybe try to plot the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eInput: \u003ccode\u003earr\u003c/code\u003e: \u003ccode\u003e[-10, 4, 9, 30, 31]\u003c/code\u003e, \u003ccode\u003etarget\u003c/code\u003e: \u003ccode\u003e30\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eInput: \u003ccode\u003earr\u003c/code\u003e: \u003ccode\u003e[1, 2, 3]\u003c/code\u003e, target: \u003ccode\u003e5\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eBonus: Return the Index of the Target\u003c/h2\u003e\n\n\u003cp\u003eCan you modify the algorithm to return the index of the target? If the target\nisn't in the input Array, return -1. For the bonus, copy your code from earlier\ninto the function called \u003ccode\u003ebinary_search_index\u003c/code\u003e/\u003ccode\u003ebinarySearchIndex\u003c/code\u003e, and then\nmodify it. That way all of the tests will run correctly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: arr = [1, 2, 3], target = 1\nOutput: 0\n\nInput: arr = [4, 7, 20], target = 100\nOutput: -1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6a8be5f1f744dd13b0d125e6b9021b63","title":"Days 1 to 2: Convert an HTML Table to a Graph","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"table-to-graph\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/table-to-graph/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/table-to-graph\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/table-to-graph/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild a graph from an HTML string\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eFor this challenge, you'll be provided with a string of HTML representing a\ntable of friends. You'll need to convert the table to an undirected graph. The\nfinal graph may be disconnected, i.e. there might not be a path from each person\nto every other person. The string will always contain a valid HTML table with\nentries in it, and the table will always have the same format: a header row\nfollowed by rows which contain the friends data, with two cells per row.\u003c/p\u003e\n\n\u003cp\u003eNote that the returned graph is a Hash/Object and the adjacency lists are\narrays. Also, although the table stored in the string in the example below is\nspaced with carriage returns, the string provided to your function will not be.\nInstead, it'll always be a continuous string like so: \u003ccode\u003e\"\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;...\"\u003c/code\u003e.\nSpacing is shown below to help you understand how the data is represented in the\ntable.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efriends = \"\u0026lt;table\u0026gt;\n  \u0026lt;tr\u0026gt;\n    \u0026lt;th\u0026gt;Person\u0026lt;/th\u0026gt;\n    \u0026lt;th\u0026gt;Friends\u0026lt;/th\u0026gt;\n  \u0026lt;/tr\u0026gt;\n  \u0026lt;tr\u0026gt;\n    \u0026lt;td\u0026gt;Fred\u0026lt;/td\u0026gt;\n    \u0026lt;td\u0026gt;Jane, Carol, Anesh, Xi\u0026lt;/td\u0026gt;\n  \u0026lt;/tr\u0026gt;\n  \u0026lt;tr\u0026gt;\n    \u0026lt;td\u0026gt;Carol\u0026lt;/td\u0026gt;\n    \u0026lt;td\u0026gt;Fred, Anesh, Janelle\u0026lt;/td\u0026gt;\n  \u0026lt;/tr\u0026gt;\n\u0026lt;/table\u0026gt;\"\n\ntable_to_graph(friends)\n=\u0026gt; {\n  \"Fred\": [\"Jane\", \"Carol\", \"Anesh\", \"Xi\"],\n  \"Jane\": [\"Fred\"],\n  \"Carol\": [\"Fred\", \"Anesh\", \"Janelle\"],\n  \"Anesh\": [\"Fred\", \"Carol\"],\n  \"Xi\": [\"Fred\"],\n  \"Janelle\": [\"Carol\"]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eFork and then clone me!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g456e6eb64c30953ad25ac4fb412d3aa3","title":"Days 1 to 2: Create a Queue Class Using Nodes","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"queue-with-nodes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/queue-with-nodes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/queue-with-nodes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/queue-with-nodes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eImplement a common methods of a queue class using nodes\u003c/li\u003e\n\u003cli\u003eIdentify the runtime benefits of using nodes for a queue\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003ePreviously, we created a \u003ccode\u003eQueue\u003c/code\u003e class using an array as the underlying data\nstructure. For this challenge we'll recreate the \u003ccode\u003eQueue\u003c/code\u003e class but with nodes\ninstead, similar to a linked list. We'll then calculate the time complexity\nusing Big O notation for each of our \u003ccode\u003eQueue\u003c/code\u003e class methods, so we can see how\nthis change affects the runtime.\u003c/p\u003e\n\n\u003ch2\u003eRefresher: What Is a Queue?\u003c/h2\u003e\n\n\u003cp\u003eA queue is a data structure where items are processed in first-in-first-out\norder (FIFO). It has two ends: a front and a rear. The front is where items are\ndequeued from first, while items at the rear are handled last. Items are added\nto the rear of the queue. A queue operates a lot like a queue at the checkout of\na grocery store. Customers join at the end of the line and are served at the\nfront of the line.\u003c/p\u003e\n\n\u003ch2\u003eImplement the Queue Class\u003c/h2\u003e\n\n\u003cp\u003eOur \u003ccode\u003eQueue\u003c/code\u003e class will track its front node and its rear node. We will assume\nthat nodes will be added to the queue one at a time. They will also be removed\none at a time. Each node will have two attributes: \u003ccode\u003edata\u003c/code\u003e, which tracks the\nvalue the node stores, and \u003ccode\u003enext\u003c/code\u003e, which points to the next node in the queue.\nIn Ruby, the next attribute will be called \u003ccode\u003enext_node\u003c/code\u003e, since next is a reserved\nkeyword and we'd prefer to not use confusing syntax.\u003c/p\u003e\n\n\u003cp\u003eLet's implement the following methods for the Queue class:\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eenqueue(data)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eenqueue\u003c/code\u003e adds a node to the back of the queue using the provided data.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003equeue = new Queue()\n\nqueue.enqueue(\"first\")\nqueue.front\n=\u0026gt; Node, data: \"first\", next: nil\n\nqueue.rear\n=\u0026gt; Node, data: \"first\", next: nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003edequeue\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003edequeue\u003c/code\u003e removes the node at the front of the queue and returns it. Don't worry\nif \u003ccode\u003edequeue\u003c/code\u003e is called on an empty queue. It's OK for it to return the default\nreturn value, such as \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003equeue = new Queue()\n\nqueue.enqueue(\"first\")\nqueue.dequeue()\n=\u0026gt; Node, data: \"first\", next: nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003epeek\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003epeek\u003c/code\u003e returns the node at the front of the queue without removing it. If the\nqueue is empty, use the default return value, e.g. \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003equeue = new Queue()\n\nqueue.enqueue(\"first\")\nqueue.peek()\n=\u0026gt; Node, data: \"first\", next: nil\n\nqueue.front\n=\u0026gt; Node, data: \"first\", next: nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003eisEmpty\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eisEmpty\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if the queue is empty, otherwise \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003equeue = new Queue()\n\nqueue.isEmpty()\n=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003esize\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003esize\u003c/code\u003e returns the number of nodes currently in the queue.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003equeue = new Queue()\nqueue.size()\n=\u0026gt; 0\n\nqueue.enqueue(\"first\")\nqueue.size()\n=\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003esearch(target)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003esearch\u003c/code\u003e returns an Integer representing how far the target node is from the\nfront of the queue. If the node is not in the queue, return \u003ccode\u003e-1\u003c/code\u003e. Example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e// queue = 1, 2, 3, 4, 5 \u0026lt;- rear\n\nqueue.search(5) =\u0026gt; 4\nqueue.search(4) =\u0026gt; 3\nqueue.search(6) =\u0026gt; -1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eCalculate Time Complexity\u003c/h2\u003e\n\n\u003cp\u003eWhen you are done implementing the class, determine the time complexity for the\nfollowing methods and compare that to the time complexity for when an Array is\nused as the underlying data structure:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eenqueue\u003c/code\u003e: Time complexity when using an Array is O(1)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edequeue\u003c/code\u003e: Time complexity when using an Array is O(n)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003epeek\u003c/code\u003e: Time complexity when using an Array is O(1)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003esearch\u003c/code\u003e: Time complexity when using an Array is O(n)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g79ef0e2a684ea212088281ee6c04e29b","title":"Days 1 to 2: Level-Order aka Breadth-First Tree Traversal","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"level-order-tree-traversal\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/level-order-tree-traversal/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/level-order-tree-traversal\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/level-order-tree-traversal/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the breadth-first tree traversal algorithm\u003c/li\u003e\n\u003cli\u003eImplement the breadth-first tree traversal algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThere are a number of different ways to traverse a tree, or in other words,\ntravel down a tree from its root node all the way through to its leaf nodes or\nto a target node. Today we'll be focusing on a type of traversal called\nlevel-order or breadth-first tree traversal, which can be used with any type of\ntree data structure. Typically, it is implemented iteratively.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/level-order-tree-traversal/trees.png\" alt=\"Trees\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eWhat is level-order tree traversal?\u003c/h2\u003e\n\n\u003cp\u003eWith level-order traversal we start at the root and then move down the tree one\nlevel, or layer, at a time. You can think of it as being similar to a printer:\nit outputs its ink in rows until the image is complete. You can also think of it\nas being similar to typing a document: you type one line going from left to\nright, and then move down to the next and repeat.\u003c/p\u003e\n\n\u003cp\u003eTake a moment to look at the trees at the top of this README. If we were to\nperform a level-order traversal of the left tree and print out each value, we\nwould get: 10, 5, 12, 3, 6, 16. For the tree on the right: 5, 30, 60.\u003c/p\u003e\n\n\u003ch2\u003eBut Why?\u003c/h2\u003e\n\n\u003cp\u003eLet's say we had our data stored in a tree, but it wasn't a binary search tree\n(a BST requires its nodes to be ordered). In this tree the values of our nodes\ncan be stored in any order:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/level-order-tree-traversal/unordered_tree.png\" alt=\"Trees\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNow, let's say we want to find the shortest path to the node with a value of 30.\nThat node could be anywhere! On the left side or the right side. If we do a\nlevel-order traversal (breadth-first search aka BFS), we can stop searching once\nwe reach the correct depth. In contrast, if we were to go all the way down one\npath, before coming back up to the root and going down a different path, we\ncould end up going much further down the tree than we need to.\u003c/p\u003e\n\n\u003cp\u003eThere are other uses for a level-order tree traversal, but we'll let you\nresearch that when you're ready to do so.\u003c/p\u003e\n\n\u003ch2\u003ePerform a Level-Order Tree Traversal\u003c/h2\u003e\n\n\u003cp\u003eFor this challenge, we're going to write a method that takes the root node of a\ntree, performs a level-order traversal, and returns an array representing each\nlayer of the tree. The array will contain the values of the nodes, rather than\nthe nodes themselves:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    1\n  /   \\\n 2     3\n\nlevel_order_traversal(root)\n=\u0026gt; [1, 2, 3]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e       10\n      /  \\\n    20    30\n   /  \\\n  9   22\n\nlevel_order_traversal(root)\n=\u0026gt; [10, 20, 30, 9, 22]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gab78c8c3c4b59323ff237d84dcef8b8e","title":"Days 2 to 3: Depth-First Graph Traversal","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"graph-dfs\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/graph-dfs/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/graph-dfs\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/graph-dfs/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse depth-first traversal to find a path between vertices in a graph\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/graph-dfs/fork_road.jpg\" alt=\"fork in the road\"\u003e\u003c/p\u003e\n\n\u003cp\u003eFor this challenge, we'll be determining whether there is a path from vertex A to\nvertex B in a graph. We'll do this using depth-first traversal, which is\ntypically a recursive process. During a depth-first traversal, we explore a path\ncompletely before going down another path. It's like exploring a fork in a road\non foot: you walk all the way down one side of the fork, then walk back up to\nwhere you started, and then go down the other side before walking back up again.\u003c/p\u003e\n\n\u003ch2\u003eOur Graph\u003c/h2\u003e\n\n\u003cp\u003eFor this challenge, we'll be using a \u003cstrong\u003edirected disconnected graph\u003c/strong\u003e stored in a\nhash/object where each key maps to an \u003cstrong\u003eadjacency list\u003c/strong\u003e. Let's break down that\nword jumble:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eDirected graph\u003c/strong\u003e: Starting at any vertex, we can travel in only one direction,\ne.g. we can go from vertex A to vertex B but not from B to A. This is similar\nto a Linked List. The difference, however, is that we can connect any two\nvertices we like, e.g. A -\u0026gt; B -\u0026gt; C -\u0026gt; A, and a vertex may be connected to many\nother vertices.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eDisconnected graph\u003c/strong\u003e: It is possible that certain vertices might be\nunreachable from another vertex. E.g. we can go from A to B, but there is no\npath from A to C.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eAdjacency list\u003c/strong\u003e: A list of vertices that share an edge with a given vertex,\ni.e. there is a direct connection from the given vertex to every vertex in the\nadjacency list.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/graph-dfs/graph.jpg\" alt=\"friends graph\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003egraph = {\n  jan: [\"john\", \"jambaby\"],\n  john: [\"carl\"],\n  jambaby: [],\n  carl: [\"jambaby\"],\n  dave: []\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn this graph, \u003ccode\u003ejan\u003c/code\u003e can travel to \u003ccode\u003ecarl\u003c/code\u003e via \u003ccode\u003ejohn\u003c/code\u003e, but \u003ccode\u003ejambaby\u003c/code\u003e can't visit\nanyone and neither can \u003ccode\u003edave\u003c/code\u003e. Similarly, no one can visit \u003ccode\u003edave\u003c/code\u003e, who's just\nfloating in space all by their lonesome. Sorry \u003ccode\u003edave\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eImplement isPath(graph, vertexA, vertexB) / is_path(graph, vertex_a, vertex_b)\u003c/h2\u003e\n\n\u003cp\u003eYour method will be given a graph stored in a hash/object. Each key represents a\nvertex in the graph, and each value will be a list of adjacent vertices stored\nin an array. The method will also be passed two vertices. Your job is to\ndetermine whether there is a path between them. If there is, return \u003ccode\u003etrue\u003c/code\u003e,\notherwise \u003ccode\u003efalse\u003c/code\u003e. The vertices given will always be in the graph, and the graph\nwill always be valid and contain data.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003egraph = {\n  jan: [\"john\", \"jambaby\"],\n  john: [\"carl\"],\n  jambaby: [],\n  carl: [\"jambaby\"],\n  dave: []\n}\n\nis_path(graph, \"jan\", \"carl\")\n=\u0026gt; true\n\nis_path(graph, \"jan\", \"dave\")\n=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g78c803950fa1d0ea51ecb4d5dcf3547c","title":"Days 3-4: Implement a Queue Class","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"what-is-a-queue\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-queue/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-queue\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/what-is-a-queue/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the characteristics of a queue\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a queue class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eA queue is a data structure where items are processed in first-in-first-out\norder (FIFO). It has two ends: a front and a rear. The front is where items are\ndequeued from first, while items at the rear are handled last. Items are added\nto the rear of the queue until the queue is full. A queue operates a lot like a\nqueue at the checkout of a grocery store. Customers join at the end of the line\nand are served at the front of the line.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/what-is-a-queue/grocery_store.jpg\" alt=\"grocery queue\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can implement a \u003ccode\u003eQueue\u003c/code\u003e class using an array as the underlying data structure!\nArrays provide all of the methods we need for the core functionality of a queue.\nSome of the methods we'll be adding to our Queue class include: \u003ccode\u003eenqueue\u003c/code\u003e,\n\u003ccode\u003edequeue\u003c/code\u003e, \u003ccode\u003epeek\u003c/code\u003e, \u003ccode\u003eisEmpty\u003c/code\u003e, and \u003ccode\u003eprint\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIt's important to note that an array doesn't have to be the underlying data\nstructure. It could be another data structure, such as a Linked List (we'll\ncover this data structure later).\u003c/p\u003e\n\n\u003cp\u003eWhen calculating Big O for a queue, we always need to consider what the\nunderlying data structure is since that'll affect our calculations.\u003c/p\u003e\n\n\u003ch2\u003eImplement the Queue Class\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eQueue\u003c/code\u003e class already has two attributes: the \u003ccode\u003equeue\u003c/code\u003e itself (an array) and\na \u003ccode\u003elimit\u003c/code\u003e, which is an integer representing the total number of items allowed in\nthe \u003ccode\u003equeue\u003c/code\u003e at one time.\u003c/p\u003e\n\n\u003cp\u003eWe've provided starter code for some languages. Choose whichever language you\nlike. Once again, we recommend writing your own tests first and then running the\ntest suites.\u003c/p\u003e\n\n\u003cp\u003eAdd the following methods to the class:\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eenqueue(item)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eenqueue\u003c/code\u003e adds an item to the back of the queue. If the queue is full, the item\nshould not be pushed and an Error should be thrown.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003edequeue\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003edequeue\u003c/code\u003e removes the item at the front of the queue and returns it. Don't worry\nif \u003ccode\u003edequeue\u003c/code\u003e is called on an empty queue. It's OK for it to return the default\nreturn value, such as \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003epeek\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003epeek\u003c/code\u003e returns the item at the front of the queue without removing it. If the\nqueue is empty, use the default return value, e.g. \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eisEmpty\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eisEmpty\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if the queue is empty, otherwise \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eisFull\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eisFull\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if no more space is available in the queue, otherwise \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003esize\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003esize\u003c/code\u003e returns the number of items currently in the queue.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003esearch(target)\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003esearch\u003c/code\u003e returns an integer representing how far the target item is from the\nfront of the queue. If the item is not in the queue, return \u003ccode\u003e-1\u003c/code\u003e. Example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// queue = 1, 2, 3, 4, 5 \u0026lt;- rear\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; 4\u003c/span\u003e\n\u003cspan class=\"nx\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; 3\u003c/span\u003e\n\u003cspan class=\"nx\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; -1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eprint\u003c/code\u003e prints the contents of the queue. It does not return them! You may print\nthem however you wish.\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gea2f37d686477cf969600c96620a0cfd","title":"Days 3-5: Merge Sort","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"merge-sort\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/merge-sort/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/merge-sort\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/merge-sort/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the merge sort algorithm and its advantages/disadvantages\u003c/li\u003e\n\u003cli\u003eImplement the merge sort algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eMerge sort is an efficient sorting algorithm that uses a divide and conquer\napproach to sorting elements. In other words, it sorts small subsets of the\nlist, merges those subsets, sorts those, and carries on until the whole list has\nbeen sorted. It is commonly implemented as a recursive algorithm.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/merge-sort/merge_sort.gif\" alt=\"Merge Sort animation\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow Does Merge Sort Work?\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/merge-sort/merge_sort.png\" alt=\"Merge Sort image\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's say we have an Array consisting of four elements. First, we divide that\ninto two Arrays of two elements each. Since this is not the smallest possible\ndivision, we then divide those into four Arrays total consisting of one element\neach:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[4, 3, 2, 1]\n[4, 3] [2, 1]\n[4] [3] [2] [1]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNext, we sort and combine those elements until we have a merged and sorted list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eSort [4] with [3] =\u0026gt; [3, 4]\nSort [2] with [1] =\u0026gt; [1, 2]\nSort [3, 4] with [1, 2] =\u0026gt; [1, 2, 3, 4]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt is common to declare two functions (or more) when implementing a merge sort.\nThe main function is recursive: it divides the list and merges the sorted\npieces. It calls a helper function, which might be recursive or iterative. The\nhelper function merges the pieces of the list into a sorted list, and returns\nit.\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003cp\u003eYou should also think of what the time complexity is for this algorithm. This is\na tough one because you have to think about both the recursive process and the\niterative process to come up with an answer for Big O. You might want to search\nthe web for this one. Check out this\n\u003ca href=\"https://softwareengineering.stackexchange.com/questions/297160/why-is-mergesort-olog-n\"\u003eStackExchange discussion\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003e1. Implement the Helper Function \u003ccode\u003emerge\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003emerge\u003c/code\u003e takes two arguments, both of which are Arrays. \u003cstrong\u003eEach of those Arrays\nwill already be sorted.\u003c/strong\u003e It then merges those Arrays into one sorted Array and\nreturns it. It merges and sorts them by comparing the first element of each\nArray. The smallest one is removed and pushed onto a new result Array. It does\nthis until one of the Arrays is empty, and then pushes any remaining values onto\nthe result.\u003c/p\u003e\n\n\u003cp\u003eHere is an example of what happens during this process:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003einput 1 = [1, 2]\ninput 2 = [0, 6]\nresult = []\n\nIs 1 \u0026lt; 0?\n  No. Remove 0 and push onto result.\n\ninput 1 = [1, 2]\ninput 2 = [6]\nresult = [0]\n\nIs 1 \u0026lt; 6?\n  Yes. Remove 1 and push onto result.\n\ninput 1 = [2]\ninput 2 = [6]\nresult = [0, 1]\n\nIs 2 \u0026lt; 6?\n  Yes. Remove 2 and push onto result.\n\ninput 1 = []\ninput 2 = [6]\nresult = [0, 1, 2]\n\ninput 1 is empty, add remainder of input 2 to result:\nresult = [0, 1, 2, 6]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBe sure to test your \u003ccode\u003emerge\u003c/code\u003e method with Arrays of different sizes to ensure\nit's working. What sizes might those Arrays be? Will both inputs always be the\nsame size? If your \u003ccode\u003emerge\u003c/code\u003e method is working, it'll return a sorted list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emerge([0, 1], [-2, 4])\n=\u0026gt; [-2, 0, 1, 4]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd remember, each argument Array to \u003ccode\u003emerge\u003c/code\u003e will already be sorted:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e// Valid inputs\nmerge([2, 10], [9, 10, 12])\n\n// Invalid inputs\nmerge([10, 3], [10, 9, 2])\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eDo not worry about invalid inputs! Just ensure your method works for valid\ninputs before moving on. You'll need to rely on your own testing skills here!\nYou've got this!\u003c/p\u003e\n\n\u003ch2\u003e2. Implement the Main Function \u003ccode\u003emerge_sort\u003c/code\u003e/\u003ccode\u003emergeSort\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe main function recursively divides the unsorted input array into pieces until\nthose pieces are as small as possible. It then feeds those pieces to the \u003ccode\u003emerge\u003c/code\u003e\nhelper method. It then combines the results from calling \u003ccode\u003emerge\u003c/code\u003e into one final\nsorted list that is returned.\u003c/p\u003e\n\n\u003cp\u003eLet's take this step by step by breaking this process down into chunks we can\ntest. Keep in mind that you'll be responsible for testing each step. Our tests\nwill only check the final result of calling the main method.\u003c/p\u003e\n\n\u003ch3\u003e1. Add the base case\u003c/h3\u003e\n\n\u003cp\u003eWe want to divide the input into its smallest possible subsets. What length or\nlengths might the smallest possible subset be? You can also ask yourself: \"What\nmight the smallest possible input be?\" or \"When do I want to stop dividing the\nArray and return it?\" or \"What inputs would already be considered sorted no\nmatter what their contents are?\"\u003c/p\u003e\n\n\u003cp\u003eIf you're feeling rusty on recursion: the base case, often an \u003ccode\u003eif\u003c/code\u003e statement, is\nresponsible for stopping the recursive calls.\u003c/p\u003e\n\n\u003cp\u003eTest your code. If it's working you'll get the following result:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput []\nOutput: []\n\nInput: [1]\nOutput: [1]\n\nInput: [1, 2]\nOutput: undefined or nil (i.e. default return value for the language you're using)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e2. Find the middle\u003c/h3\u003e\n\n\u003cp\u003eStore the middle index of the input Array in a variable. Print or return it to\ncheck that it's correct. Make sure it's an integer!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: []\nOutput: [] // never reaches the middle calculation\n\nInput: [1]\nOutput: [1] // never reaches the middle calculation\n\nInput: [1, 2]\nOutput: 1\n\nInput: [1, 2, 3]\nOutput: 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce that's working, be sure to remove any print or return statements you used\nto test your code.\u003c/p\u003e\n\n\u003ch3\u003e3. Divide the Array\u003c/h3\u003e\n\n\u003cp\u003eDivide the Array into two parts: one part stores all the values up to the\nmiddle, and the other part stores all the values from the middle onwards. These\nare often called \u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003eright\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTest your work by printing or returning the two parts. Make sure all of the\nvalues from the input are present.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInput: [1, 2, 3, 4]\nLeft: [1, 2]\nRight: [3, 4]\n\nInput: [1, 2, 3]\nLeft: [1]\nRight: [2, 3]\n// Left [1, 2] and Right [3] is also valid\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce that's working, be sure to remove any print or return statements you used\nto test your code.\u003c/p\u003e\n\n\u003ch3\u003e4. Divide more!\u003c/h3\u003e\n\n\u003cp\u003eEarlier, we said that we need to keep dividing the input until it is divided\ninto the smallest possible pieces. Another way of thinking of this is that we\nneed to keep dividing the input until we hit the base case we declared earlier.\u003c/p\u003e\n\n\u003cp\u003eRight now, we are only dividing the list into a \u003ccode\u003eleft\u003c/code\u003e side and a \u003ccode\u003eright\u003c/code\u003e side\nonce. How can we keep dividing the list until it's as small as possible? What do\nwe need to do?\u003c/p\u003e\n\n\u003cp\u003eYou can test your code by printing the values stored in left and right. If the\nprint statement/s are the very last line/s in your code, you should see the\nfollowing print out:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emerge_sort([1, 2, 3, 4])\n=\u0026gt; [1]\n=\u0026gt; [2]\n=\u0026gt; [3]\n=\u0026gt; [4]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce that's working, be sure to remove any print or return statements you used\nto test your code.\u003c/p\u003e\n\n\u003ch3\u003e5. Sort and merge\u003c/h3\u003e\n\n\u003cp\u003eWe still haven't called our helper method \u003ccode\u003emerge\u003c/code\u003e, and it's getting lonely. If\nyou recall from earlier in this README, \u003ccode\u003emerge\u003c/code\u003e takes two sorted lists and sorts\nand merges them into one list. What might we do with this method? What might we\nprovide to it as arguments?\u003c/p\u003e\n\n\u003cp\u003eAt the end of this step, you should be done!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emerge_sort([1, 2, 3])\n=\u0026gt; [1, 2, 3]\n\nmerge_sort([-10, 5, 100, -100])\n=\u0026gt; [-100, -10, 5, 100]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e6. Take some time to think\u003c/h3\u003e\n\n\u003cp\u003eTake some time to understand what's happening as the algorithm recurses. What\ndoes the stack look like? What's in each frame? Can you plot it out on paper for\nsmall inputs? Try plotting it out when the input Array has 2 elements, 3\nelements, or 4 elements. You can also watch your solution in action using this\n\u003ca href=\"http://pythontutor.com/visualize.html#mode=edit\"\u003etool\u003c/a\u003e: don't forget to choose\nthe right language, and then call your function with an argument!\u003c/p\u003e\n\n\u003cp\u003eAlso think about the problem solving techniques you used. How can you use what\nyou've learned to solve other problems? What did you learn about\nrecursion/recursive programming?\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge1d0a29447f5b9b3f2505a78df5d5237","title":"Days 3 to 4: In-Order Tree Traversal","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"tree-traversal-inorder\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/tree-traversal-inorder/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/tree-traversal-inorder\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/tree-traversal-inorder/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the in-order tree traversal algorithm\u003c/li\u003e\n\u003cli\u003eImplement the in-order tree traversal algorithm\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn-order tree traversal requires an algorithm that visits the \u003cstrong\u003eleft\u003c/strong\u003e subtree\nfirst, followed by the \u003cstrong\u003eroot\u003c/strong\u003e, and then the \u003cstrong\u003eright\u003c/strong\u003e subtree.\u003c/p\u003e\n\n\u003cp\u003eWhen using in-order traversal with a binary search tree (BST), the value of each\nnode will be output in order from least to greatest. For the left tree above the\noutput would be: 3, 5, 6, 10, 12, 16. For the tree on the right: 5, 30, 60.\u003c/p\u003e\n\n\u003cp\u003eThis algorithm can be programmed recursively or iteratively.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/tree-traversal-inorder/trees.png\" alt=\"Binary search trees\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eImplement In-Order Traversal\u003c/h2\u003e\n\n\u003cp\u003eFor this exercise, your function will be called with the root node of a BST.\nYour algorithm should return an array containing the nodes' values in sorted\norder. Note that your algorithm should not be calling sort! It should traverse\nthe tree nodes in order and add each value to the array that will be returned as\nit travels through the tree.\u003c/p\u003e\n\n\u003cp\u003eWhat is the time complexity of your solution?\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eHint: It might help to add a default parameter if solving this recursively.\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e      2\n    /   \\\n  -10   20\n\nin_order_traversal(root)\n=\u0026gt; [-10, 2, 20]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e     10\n    /   \\\n   0    20\n    \\     \\\n     5     30\n\nin_order_traversal(root)\n=\u0026gt; [0, 5, 10, 20, 30]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd6c65108084433ccd407b586fa442920","title":"Days 3 to 5: Least Recently Used (LRU) Cache","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"lru-cache\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/lru-cache/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/lru-cache\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/lru-cache/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the characteristics of a Least Recently Used (LRU) Cache\u003c/li\u003e\n\u003cli\u003eImplement a common methods of a LRU Cache class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eA Least Recently Used (LRU) Cache is a data structure that organizes items in\norder of use or access from most recently accessed to least recently accessed.\nIt has a fixed length or is allowed to take up a maximum amount of space in\nmemory, i.e. there is a limit to the number of items it contains. You can think\nof it as being similar to items in a kitchen cabinet: the items you use most\noften will likely be easy to see and within reach when you open the cupboard.\nThe items you use less often will be behind those items, and the items you use\nleast may be completely out of reach.\u003c/p\u003e\n\n\u003ch2\u003eWhy Use an LRU Cache?\u003c/h2\u003e\n\n\u003cp\u003eThe short story is that it's faster to read data from a cache (such as on the\nRAM) than it is to read it from a database or hard disk. Since there is a limit\nto how much data we can cache, we have to come up with a system to determine\nwhich data stays and which data gets evicted from the cache. With an LRU cache,\nwe evict the least recently used data once the cache is full. If you'd like the\nlong story, carry on reading this section.\u003c/p\u003e\n\n\u003cp\u003eLet's say we have a website where users can access many different stories. Our\nwebsite gets a lot of traffic, and each visit results in a request to the\ndatabase for a story. The responses to these requests are becoming slower and\nslower since accessing the database is expensive. We look at which stories our\nusers are accessing most often and notice that there are 10 stories that most\nusers access and those specific stories shift over time, i.e. the popular\nstories at 5PM differ from the popular stories at 10PM. This means we can cache\nthis data, or these stories, on the server. When we do this, requests for these\nstories will not result in database requests. Instead, they will be quickly\nretrieved directly from the server's memory.\u003c/p\u003e\n\n\u003cp\u003eWe decide to implement an LRU cache! When a user makes a request for a story, we\ncheck if it's in the cache. If it is, we respond with that story and reorder the\ndata in our cache to reflect that the story was the most recently accessed. If\nthe story isn't in the cache, we make the request to the database, and then\nplace the story in the correct place within the LRU cache. If the cache is full,\nwe also remove the least recently accessed story from it.\u003c/p\u003e\n\n\u003ch2\u003eTrade Offs\u003c/h2\u003e\n\n\u003cp\u003eThe typical design of an LRU cache allows for extremely fast access: checking if\nan item is in the cache is a constant time O(1) operation. Updating the cache is\nalso extremely fast: O(1).\u003c/p\u003e\n\n\u003cp\u003eHowever, the trade off is the amount of space required to store the data. An LRU\ncache often uses two data structures — a doubly linked list and hash map — to\nstore the data in the correct order. This means it takes up more space than\nusing a simpler data structure, such as an Array. Note that it is possible to\nimplement an LRU cache with different data structures.\u003c/p\u003e\n\n\u003ch2\u003eWhy Two Data Structures?\u003c/h2\u003e\n\n\u003cp\u003eThe LRU cache requires its data to be ordered. It also requires fast access and\nupdating (insertion and deletion). Let's say we used an Array, since it's\nordered. We only have fast access if we know the index of the element we're\nlooking for in the Array, and our program is unlikely to have that information.\nSimilarly, inserting elements at the front of an Array is an O(n) operation, so\nwe can't use an Array for an LRU cache.\u003c/p\u003e\n\n\u003cp\u003eWe could also think about using a hash/object, but hashes are not ordered, so we\nhave another problem here. However, they do provide O(1) access when you know\nthe key for the value you're looking for. It is also extremely fast to add and\nremove key-value pairs from a Hash. We could also think about using a doubly\nlinked list (a doubly linked lists contains nodes that point to the next node\nand previous node). Linked lists are ordered and they allow for fast insertion\nand deletion. However, finding a specific item takes O(n) time, since we must\ntraverse the list.\u003c/p\u003e\n\n\u003cp\u003eWhen we combine a hash with a doubly linked list, we get the best of both\nworlds: constant-time access, insertion, and deletion! (As long as we design\nour LRU cache properly, that is.)\u003c/p\u003e\n\n\u003ch2\u003eHow Do We Combine These Data Structures?\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/lru-cache/lru_cache.svg\" alt=\"LRU Cache\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIt's easier to think about how these data structures work together if we first\nset up some rules:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhen we check if an item is in the cache, we always check if it's in the hash\u003c/li\u003e\n\u003cli\u003eA key in the hash always points to a node in the doubly linked list\u003c/li\u003e\n\u003cli\u003eItems in the doubly linked list are always ordered from most recently used (at\nthe head) to least recently used (at the tail)\u003c/li\u003e\n\u003cli\u003eIf an item is being added to a cache that's full, the least recently used item\nis removed from both the hash and list (at the tail)\n\n\u003cul\u003e\n\u003cli\u003eThe list tells us which item was least recently used since it will always be\nat the tail\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIf an item is being retrieved from the cache, it is moved to the head of the\nlist and the hash remains unchanged\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's say we start with an empty cache. We want the recipe associated with an\nitem that has an ID of \"cake\". First, we check if \"cake\" is in the cache by\nasking the hash if it has a key of \"cake\". The cache is empty, so the data is\nretrieved from the database. Next, the LRU cache creates a new node, which\nstores the recipe. The node is added to the doubly linked list as its head and\ntail since the list contains only one item. Next, a key of \"cake\" is added to\nthe hash, and its value is set to the node that was just created. At the end of\nthis operation we have a list with a single node in it, and a hash with a key of\n\"cake\" pointing to that node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elru_cache.hash\n=\u0026gt; {\n  \"cake\": Node storing \"cake\"s recipe\n}\n\nlru_cache.list\n=\u0026gt; Doubly Linked List with head and tail both pointing to \"cake\" recipe Node\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow another user comes along asking for \"cake\". We check the cache's hash for\n\"cake\". It's there, so we retrieve its value and send it to the user. We don't\nneed to do anything else because \"cake\" is already the most recently accessed\nitem in the cache.\u003c/p\u003e\n\n\u003cp\u003eNext a user asks for \"cookies\". We check the hash, but it's not in there, so we\nretrieve the recipe from the database. Next, we create a node using the\n\"cookies\" data and set that node as the head of the doubly linked list, since\nit's the most recently accessed item. This means that \"cake\" is now the tail.\nLastly, we add a key of \"cookies\" to the hash and have it point to the node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elru_cache.hash\n=\u0026gt; {\n  \"cake\": Node storing \"cake\"s recipe,\n  \"cookies\": Node storing \"cookie\"s recipe\n}\n\nlru_cache.list\n=\u0026gt; Doubly Linked List with head pointing to \"cookies\" Node and tail pointing to \"cake\" Node\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's pretend our cache can only store two recipes. This means our cache is\nfull! A user comes along and asks for an omelette recipe. The LRU Cache's hash\ndoesn't have an \"omelette\" key, so the data is retrieved from the database. A\nnode is created using the omelette data. The cache goes to add it to the head of\nthe list, but the list is full, so it kicks out \"cake\", which is at the tail.\nThe omelette node is then added as the head of the list, and a key is created in\nthe hash which points to the omelette node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elru_cache.hash\n=\u0026gt; {\n  \"cookies\": Node storing \"cake\"s recipe,\n  \"omelette\": Node storing \"omelette\"s recipe\n}\n\nlru_cache.list\n=\u0026gt; Doubly Linked List with head pointing to \"omelette\" Node and tail pointing to \"cookies\" Node\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImplement an LRU Cache\u003c/h2\u003e\n\n\u003cp\u003eWe'll take this slow: first we'll create our Doubly Linked List class, and then\nwe'll move on to creating the LRU Cache. For the Doubly Linked List class, we'll\nonly worry about creating the methods required for our cache to work. Note that\nour tests will only check if the cache is functioning correctly. It'll be up to\nyou to test that the list is working correctly.\u003c/p\u003e\n\n\u003cp\u003eThe Node class has already been filled out. It contains four attributes: \u003ccode\u003edata\u003c/code\u003e,\nwhich stores some kind of value, \u003ccode\u003ekey\u003c/code\u003e, which stores the associated key name in\nthe hash, \u003ccode\u003enext\u003c/code\u003e/\u003ccode\u003enext_node\u003c/code\u003e, which points to the next node in the list, and\n\u003ccode\u003eprev\u003c/code\u003e/\u003ccode\u003eprev_node\u003c/code\u003e, which points to the previous node in the list.\u003c/p\u003e\n\n\u003ch3\u003eImplement the Doubly Linked List\u003c/h3\u003e\n\n\u003cp\u003eAs you implement each of these methods, make sure you're correctly updating each\nNode's \u003ccode\u003enext\u003c/code\u003e and \u003ccode\u003eprev\u003c/code\u003e attributes. Also keep in mind that each of these\noperations should take constant time: O(1).\u003c/p\u003e\n\n\u003cp\u003eYou may assume that only valid inputs will be provided to each method. For\nexample, if you're asked to move a node to the head of the list, it's guaranteed\nthat the argument will contain a node and that the node will be in the list\nalready.\u003c/p\u003e\n\n\u003ch4\u003e1. \u003ccode\u003eaddHead(node)\u003c/code\u003e / \u003ccode\u003eadd_head(node)\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003ePlace the given node at the head of the list. Do not remove the existing head if\nthere is one!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new DoublyLinkedList\nlist.add_head(node1)\nlist.head\n=\u0026gt; node1\n\nlist.add_head(node2)\nlist.head\n=\u0026gt; node2\n\nlist.head.next\n=\u0026gt; node1\n\nlist.tail\n=\u0026gt; node1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4\u003e2. \u003ccode\u003eremoveTail()\u003c/code\u003e / \u003ccode\u003eremove_tail\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eRemove the tail from the list and return it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new DoublyLinkedList\nlist.add_head(node1)\nlist.head\n=\u0026gt; node1\n\nlist.tail\n=\u0026gt; node1\n\nlist.remove_tail()\n=\u0026gt; node1\n\nlist.tail\n=\u0026gt; null or nil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4\u003e3. \u003ccode\u003eremoveNode(node)\u003c/code\u003e / \u003ccode\u003eremove_node(node)\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eRemove the given node from the list and return it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new DoublyLinkedList\nlist.add_head(node1)\nlist.add_head(node2)\nlist.add_head(node3)\n// list is 3 -\u0026gt; 2 -\u0026gt; 1\n\nlist.remove_node(node2)\n=\u0026gt; node2\n// list is 3 -\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4\u003e4. \u003ccode\u003emoveNodeToHead(node)\u003c/code\u003e / \u003ccode\u003emove_node_to_head(node)\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eMove the given node to the head of the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elist = new DoublyLinkedList\nlist.add_head(node1)\nlist.add_head(node2)\nlist.add_head(node3)\n// list is 3 -\u0026gt; 2 -\u0026gt; 1\n\nlist.move_node_to_head(node2)\n// list is 2 -\u0026gt; 3 -\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eImplement the LRU Cache\u003c/h3\u003e\n\n\u003cp\u003eNow that we have our list ready for use, we can implement the LRU Cache! Our\ncache will contain only two methods (one to get data and another to add it), but\nyou can add helper methods if you need to. The necessary attributes - \u003ccode\u003elimit\u003c/code\u003e,\n\u003ccode\u003esize\u003c/code\u003e, \u003ccode\u003ehash\u003c/code\u003e, and \u003ccode\u003elist\u003c/code\u003e - have already been added to the cache. The \u003ccode\u003elimit\u003c/code\u003e\nis set to a default value, which can be overridden when instantiating a new\ncache. It sets the maximum number of items allowed in the cache. The \u003ccode\u003esize\u003c/code\u003e\ntracks the total number of items currently in the cache. The \u003ccode\u003ehash\u003c/code\u003e and \u003ccode\u003elist\u003c/code\u003e\npoint to the hash/object and Doubly Linked List that store the cache's data.\u003c/p\u003e\n\n\u003cp\u003eAs you work on the cache, remember that you'll also need to determine when and\nwhere to update the \u003ccode\u003esize\u003c/code\u003e of the cache. Also keep in mind that our operations\nneed to run in constant time.\u003c/p\u003e\n\n\u003cp\u003eYou may assume that the methods will only be given valid arguments.\u003c/p\u003e\n\n\u003ch4\u003e1. \u003ccode\u003eget(key)\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eReturn the item from the cache using the given \u003ccode\u003ekey\u003c/code\u003e. If the item is in the\ncache, move it to the head of the list to denote that it is the most recently\naccessed item. If the item isn't in the cache, return \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elru_cache.get(\"potato\")\n=\u0026gt; Node with data associated with \"potato\"\n\nlru_cache.get(\"notato\")\n=\u0026gt; -1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4\u003e2. \u003ccode\u003eput(key, value)\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eAdd or update the item in the cache. If the key does not exist in the cache, add\nthe item to the cache. If the key is in the cache, update the item with the\nvalue. In any case, move the item to the head of the list to denote that it's\nthe most recently accessed item. If the cache is already full, remove the least\nrecently used item from the cache before adding the new item.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elru_cache = new LRUCache(3)\nlru_cache.put(\"cake\", \"cake recipe\")\n\nlru_cache.get(\"cake\")\n=\u0026gt; Node with data \"cake recipe\"\n\nlru_cache.put(\"cookies\", \"cookie recipe\")\nlru_cache.put(\"cake\", \"fixed cake recipe\")\nlru_cache.put(\"scones\", \"scone recipe\")\nlru_cache.put(\"smoothie\", \"smoothie recipe\")\n\nlru_cache.get(\"cake\")\n=\u0026gt; Node with data \"fixed cake recipe\"\n\nlru_cache.get(\"smoothie\")\n=\u0026gt; Node with data \"smoothie recipe\"\n\nlru_cache.get(\"cookies\")\n=\u0026gt; -1\n// cookies got kicked out when smoothie was added because the cache was full\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g645220525fe3987c6bcf5bdfd1e64adf","title":"Days 4 to 5: Breadth-first Graph Traversal","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"find_distance\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/find_distance/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find_distance\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/find_distance/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse breadth-first traversal to the find distance between vertices in a graph\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/data-structures-and-algorithms/find-distance/graph.jpg\" alt=\"Friends graph\"\u003e\u003c/p\u003e\n\n\u003cp\u003eFor this challenge we are going to find the length of the shortest distance\nbetween two friends (or vertices, rather, which represent friends). To achieve\nthis we'll need to perform a breadth-first search (BFS). Unlike depth-first\nsearch (DFS), which travels all the way down a path, a BFS considers all\nadjacent vertices on each iteration. If we were to do a BFS on the friends graph\nto find the shortest distance from \u003ccode\u003ejan\u003c/code\u003e to \u003ccode\u003ecarl\u003c/code\u003e, it might check the friends\nlike so:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIs \u003ccode\u003ejohn\u003c/code\u003e == \u003ccode\u003ecarl\u003c/code\u003e?\u003c/li\u003e\n\u003cli\u003eIs \u003ccode\u003ejambaby\u003c/code\u003e == \u003ccode\u003ecarl\u003c/code\u003e?\u003c/li\u003e\n\u003cli\u003eIs \u003ccode\u003ecarl\u003c/code\u003e == \u003ccode\u003ecarl\u003c/code\u003e?\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn other words, the algorithm checks the adjacent vertices first (the closest\nones to the starting vertex), and then checks the vertices adjacent to those.\nSince it always checks the closest vertices first, and the furthest last, it's\nperfect for finding the shortest distance between two vertices!\u003c/p\u003e\n\n\u003cp\u003eYou should know that this type of search can also help us find the shortest path\nbetween two points!\u003c/p\u003e\n\n\u003ch2\u003efind_distance(graph, vertex_a, vertex_b) / findDistance(graph, vertexA, vertexB)\u003c/h2\u003e\n\n\u003cp\u003eUse BFS to return the shortest distance from vertex A to B. If there is no path,\nreturn -1. The graph and vertices will always be valid. The graph will always\ncontain vertices and vertices A and B will always be in the graph. We will be\nusing a directed disconnected graph.\u003c/p\u003e\n\n\u003cp\u003eIf you are asked to find the distance from a vertex back to itself, i.e. a\ncycle, return the distance of the cycle, rather than 0. Be aware that there\nmight not be a cycle.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003egraph = {\n  jan: [\"john\", \"jambaby\"],\n  john: [\"carl\"],\n  jambaby: [],\n  carl: [\"jambaby\"],\n  dave: []\n}\n\nfind_distance(graph, \"jan\", \"carl\")\n=\u0026gt; 2\n\nfind_distance(graph, \"dave\", \"carl\")\n=\u0026gt; -1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eHint: A BFS is normally implemented as an iterative algorithm that uses a queue\nto track which vertices to visit next. Be careful of cycles!\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eUse the language of your choosing. We've included starter files for some\nlanguages where you can pseudocode, explain your solution and code.\u003c/p\u003e\n\n\u003ch2\u003eBefore you start coding\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRewrite the problem in your own words\u003c/li\u003e\n\u003cli\u003eValidate that you understand the problem\u003c/li\u003e\n\u003cli\u003eWrite your own test cases\u003c/li\u003e\n\u003cli\u003ePseudocode\u003c/li\u003e\n\u003cli\u003eCode!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAnd remember, don't run our tests until you've passed your own!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eHow to run your own tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eruby \u0026lt;filename\u0026gt;.rb\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode \u0026lt;filename\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHow to run our tests\u003c/h2\u003e\n\n\u003ch3\u003eRuby\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the ruby folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebundle install\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eJavaScript\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the javascript folder\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm test\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge5d618acdd77816c21d43ffd1722bf93","title":"Week 15 Algo Practices","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Week-15-algo-practices\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Week-15-algo-practices\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Week-15-algo-practices/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eHere are some hand-picked algorithms to practice with:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://leetcode.com/problems/maximum-subarray/\"\u003eMaximum Subarray\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003eFirst just solve it however possible. BONUS: Use DP to solve. Calculate Big-O.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://leetcode.com/problems/house-robber/\"\u003eHouse Robber\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003eFirst just solve it however possible. BONUS: Use DP to solve. Calculate Big-O.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://leetcode.com/problems/is-subsequence/\"\u003eIs Subsequence\u003c/a\u003e \n\n\u003cul\u003e\n\u003cli\u003eSolve however possible, then aim for O(n). Calculate Big-O.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://leetcode.com/problems/unique-paths-iii/\"\u003eUnique Paths\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://leetcode.com/problems/super-egg-drop/\"\u003eEgg Dropping Problem\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null}],"discussion_topics":[],"quizzes":[{"exportId":"gdc862cc100da18e92fb8c7142c10bb5a","title":"Day 1: Time Complexity Quiz","type":"Quizzes::Quiz","content":"\u003cp\u003eUse this short quiz to check your understanding of time complexity. If you don't know the answer to a question, select I don't know.\u003c/p\u003e","assignmentExportId":"g628a2f865f155c1a98cea44fe1000627","questionCount":3,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":3.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gda36189d8b467f85c1706bef52e5b1ae","title":"Day 2: Big O Linked List Quiz","type":"Quizzes::Quiz","content":"\u003cp\u003eIn this quiz we'll ask you to calculate the time complexity for several of the methods declared inside the LinkedList class.\u003c/p\u003e","assignmentExportId":"g0c68d084a26be944b214a3a9941cd838","questionCount":4,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":4.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g4502585cfd2556beb22ae2713d9071a0","title":"Day 2: Big O Stack Quiz","type":"Quizzes::Quiz","content":"\u003cp\u003eIn this quiz we'll ask you to calculate the time complexity for several of the Stack class methods. Remember that we used an Array as the underlying data structure for our class. If you don't know the time complexity for an Array method, you may need to Google.\u003c/p\u003e","assignmentExportId":"g447b2f08f5f9b8f0dcd321648f3bd976","questionCount":3,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":3.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6a3c9dbb187c10c791bf72038e6d0456","title":"Day 2: Space Complexity Quiz","type":"Quizzes::Quiz","content":"\u003cp\u003eUse this short quiz to check your understanding of space complexity. If you don't know the answer to a question, select I don't know.\u003c/p\u003e","assignmentExportId":"g4f73176dce6a0ec3e86cc8d96ca60199","questionCount":3,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":3.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gce960cab1c254c2bd7283d14414675db","title":"Day 3: Work Out Big O Quiz Part 1","type":"Quizzes::Quiz","content":"\u003cp\u003eUse this quiz to check your understanding of time and space complexity. If you don't know the answer to a question, select I don't know.\u003c/p\u003e","assignmentExportId":"g8d101a71781fa12452ecc9137ee6153c","questionCount":2,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":2.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g76e1fe9cc974f565512cf5cb97be892d","title":"Day 4: Big O Queue Quiz","type":"Quizzes::Quiz","content":"\u003cp\u003eIn this quiz we'll ask you to calculate the time complexity for several of the Queue class methods. Remember that we used an Array as the underlying data structure for our class. If you don't know the time complexity for an Array method, you may need to Google.\u003c/p\u003e","assignmentExportId":"g3546206289961b149a22ce30c3b18e20","questionCount":3,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":3.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g5a51bdbaeadfb67c03985a2e72b81b7b","title":"Day 4: Work Out Big O Quiz Part 2","type":"Quizzes::Quiz","content":"\u003cp\u003e\u003cspan\u003eUse this quiz to check your understanding of time and space complexity. If you don't know the answer to a question, select I don't know.\u003c/span\u003e\u003c/p\u003e","assignmentExportId":"g8d3bf18f09210509db6b5c0c418ad60f","questionCount":2,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":2.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc4ad2134b4df5ff7bcd1a68e4d0437e2","title":"Day 5: Big O Set Quiz","type":"Quizzes::Quiz","content":"\u003cp\u003eIn this quiz we'll ask you to calculate the time complexity for several of the MySet class methods. Remember that we used a Hash/Object as the underlying data structure for our class. If you don't know the time complexity for a method, you may need to Google.\u003c/p\u003e","assignmentExportId":"g046796c979c39efb3ee2f02ee5ac8176","questionCount":3,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":3.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g9c0a669888e37fe86781a4d349e3f6c0","title":"Day 5: Data Structure Quiz","type":"Quizzes::Quiz","content":"\u003cp\u003eIn this quiz we'll present different programming scenarios that can be solved with several different data structures. Your job will be to choose the best one for the job based on the requirements! Pull from your Big O knowledge!\u003c/p\u003e\n\u003cp\u003eAssume all answer options are valid choices (no trick questions), and that all of the necessary information about the scenario has been presented to you.\u003c/p\u003e","assignmentExportId":"gff16d830320518df468e329ff35deced","questionCount":3,"timeLimit":null,"attempts":2,"graded":true,"pointsPossible":3.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8b929fd339351cc23992f7ab06b8cf24","title":"Self-Assessment","type":"Quizzes::Quiz","content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g216a380cafd203e6976ecdbd9604b07c","title":"Self-Assessment","type":"Quizzes::Quiz","content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc837e80101032012dd830f30d5bde8fc","title":"Self-Assessment","type":"Quizzes::Quiz","content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g7c75b4ae14e51da9e79164ba57f989c9","title":"Self-Assessment","type":"Quizzes::Quiz","content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g459e346f2e7204f2bfd8d28cf153a830","title":"Self-Assessment","type":"Quizzes::Quiz","content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g9d977edf49928bb417862a9bf372d739","title":"Self-Assessment","type":"Quizzes::Quiz","content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g25672e25ecd6e0ad94a1f3077ee63178","title":"Self-Assessment","type":"Quizzes::Quiz","content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6c4af0047738afcf836626a081558676","title":"Self-Assessment","type":"Quizzes::Quiz","content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfbcfe47f6448a70b784344970b2c3d2b","title":"Self-Assessment","type":"Quizzes::Quiz","content":"\u003cp\u003eThe self-assessment is your opportunity to reflect on the challenge you just completed. It will be helpful to have your local copy of the previous challenge open so you can easily answer the questions. There is no grade for the self-assessment and there are no right or wrong answers. Think of this as an opportunity to rate your own learning!\u003c/p\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":4,"timeLimit":null,"attempts":-1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null}],"files":null}